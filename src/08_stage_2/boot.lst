     1                                          BOOT_LOAD       equ     0x7C00  ;ブートプログラムのロードアドレス
     2                                          ORG     BOOT_LOAD               ;アセンブラに指示  
     3                                                                          ;これがないと0x0000にロードされることになってしまうが
     4                                                                          ;BIOSそこはがすでに使っている領域である
     5                                  
     6                                  ;マクロ
     7                                  
     8                                  %include        "../include/macro.s"
     1                              <1> %macro      cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep    %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__>>3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
     9                                  
    10                                  ;エントリーポイント
    11                                  
    12                                  entry:
    13                                  ;BPB(Bios Parameter Block)
    14 00000000 EB58                            jmp     ipl
    15 00000002 90<rept>                        times 90 - ($ - $$) db 0x90
    16                                  ;IPL(Initial Program Loader)
    17                                  
    18                                  ipl:
    19 0000005A FA                              cli                     ;割込み禁止
    20                                  
    21 0000005B B80000                          mov     ax, 0x0000        ;セグメントレジスタの値を設定
    22 0000005E 8ED8                            mov     ds, ax            
    23 00000060 8EC0                            mov     es, ax
    24 00000062 8ED0                            mov     ss, ax
    25 00000064 BC007C                          mov     sp, BOOT_LOAD
    26                                  
    27 00000067 FB                              sti                    ;割込み禁止解除
    28                                  
    29 00000068 8816[BA00]                      mov     [BOOT.DRIVE], dl  ;ブートドライブの保存
    30                                  
    31                                  ;文字列を表示
    32 0000006C 68[9A00]E84A0083C4-             cdecl   puts, .s0        
    32 00000074 02                 
    33                                  
    34                                  ;次の512バイトを読み込む
    35 00000075 B402                            mov     ah, 0x02                ; 読み込み命令
    36 00000077 B001                            mov     al, 1                   ; 読み込みセクタ数
    37 00000079 B90200                          mov     cx, 0x0002              ; シリンダ/セクタ
    38 0000007C B600                            mov     dh, 0x00                ; ヘッド位置
    39 0000007E 8A16[BA00]                      mov     dl, [BOOT.DRIVE]        ; ドライブ番号
    40 00000082 BB007E                          mov     bx, 0x7C00 + 512        ; オフセット
    41 00000085 CD13                            int     0x13                    ; BIOS(0x13, 0x02)
    42 00000087 730C                    .10Q:   jnc     .10E
    43 00000089 68[A700]E82D0083C4-     .10T:   cdecl   puts, .e0
    43 00000091 02                 
    44 00000092 E8C600                          call    reboot
    45                                  
    46                                  .10E:
    47 00000095 E96801                          jmp     stage_2    ;次のステージへ移行
    48                                  
    49                                          
    50                                  ;処理をループすることによって停止させる
    51 00000098 EBFE                            jmp     $
    52                                  
    53                                  ;データ
    54 0000009A 426F6F74696E672E2E-     .s0     db      "Booting...", 0x0A, 0x0D, 0
    54 000000A3 2E0A0D00           
    55 000000A7 4572726F723A736563-     .e0     db      "Error:sector read", 0
    55 000000B0 746F72207265616400 
    56                                  
    57 000000B9 00                      ALIGN 2, db 0
    58                                  BOOT:
    59 000000BA 0000                     .DRIVE:        dw 0    ;ブートのドライブ番号
    60                                  
    61                                  ; モジュール
    62                                  
    63                                  %include    "../modules/real/puts.s"
     1                              <1> puts:
     2 000000BC 55                  <1>         push    bp
     3 000000BD 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 000000BF 50                  <1>         push    ax
     6 000000C0 53                  <1>         push    bx
     7 000000C1 56                  <1>         push    si
     8                              <1> 
     9 000000C2 8B7604              <1>         mov     si, [bp + 4]
    10                              <1> 
    11 000000C5 B40E                <1>         mov     ah, 0x0e
    12 000000C7 BB0000              <1>         mov     bx, 0x0000
    13 000000CA FC                  <1>         cld
    14                              <1> .10L:
    15                              <1> 
    16 000000CB AC                  <1>         lodsb
    17                              <1> 
    18 000000CC 3C00                <1>         cmp     al, 0
    19 000000CE 7404                <1>         je      .10E
    20                              <1> 
    21 000000D0 CD10                <1>         int     0x10
    22 000000D2 EBF7                <1>         jmp     .10L
    23                              <1> .10E:
    24                              <1> 
    25 000000D4 5E                  <1>         pop     si
    26 000000D5 5B                  <1>         pop     bx
    27 000000D6 58                  <1>         pop     ax
    28                              <1> 
    29 000000D7 89EC                <1>         mov     sp, bp
    30 000000D9 5D                  <1>         pop     bp
    31                              <1> 
    32 000000DA C3                  <1>         ret
    64                                  %include    "../modules/real/itoa.s"
     1                              <1> itoa:
     2 000000DB 55                  <1>         push    bp
     3 000000DC 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 000000DE 50                  <1>         push    ax
     6 000000DF 53                  <1>         push    bx
     7 000000E0 51                  <1>         push    cx
     8 000000E1 52                  <1>         push    dx
     9 000000E2 56                  <1>         push    si
    10 000000E3 57                  <1>         push    di
    11                              <1> 
    12                              <1> ;引数を取得
    13                              <1> 
    14 000000E4 8B4604              <1>         mov     ax, [bp + 4]        ; 数値
    15 000000E7 8B7606              <1>         mov     si, [bp + 6]        ; バッファアドレス
    16 000000EA 8B4E08              <1>         mov     cx, [bp + 8]        ;バッファサイズ
    17                              <1> 
    18 000000ED 89F7                <1>         mov     di, si
    19 000000EF 01CF                <1>         add     di, cx
    20 000000F1 4F                  <1>         dec     di      ;バッファの最後尾
    21                              <1> 
    22 000000F2 8B5E0C              <1>         mov     bx, word[bp + 12] ;flags = オプション
    23                              <1> 
    24                              <1> ;符号付き判定
    25                              <1> 
    26 000000F5 F7C30100            <1>         test    bx, 0b001
    27 000000F9 7408                <1> .10Q:   je      .10E
    28 000000FB 83F800              <1>         cmp     ax, 0
    29 000000FE 7D03                <1> .12Q:   jge     .12E
    30 00000100 83CB02              <1>         or      bx, 0b0010
    31                              <1> .12E:
    32                              <1> .10E:
    33                              <1> 
    34                              <1> ;符号出力判定
    35                              <1> 
    36 00000103 F7C30200            <1>         test    bx, 0b0010
    37 00000107 7410                <1> .20Q:   je      .20E
    38 00000109 83F800              <1>         cmp     ax, 0
    39 0000010C 7D07                <1> .22Q:   jge     .22F
    40 0000010E F7D8                <1>         neg     ax
    41 00000110 C6042D              <1>         mov     [si], byte '-'   ;先頭にマイナスを表示
    42 00000113 EB03                <1>         jmp     .22E
    43                              <1> .22F:   
    44                              <1> 
    45 00000115 C6042B              <1>         mov     [si], byte '+'  ;先頭にプラスを表示
    46                              <1> 
    47                              <1> .22E:   
    48 00000118 49                  <1>         dec     cx
    49                              <1> 
    50                              <1> .20E:
    51                              <1> 
    52                              <1> ; ASCII変換
    53 00000119 8B5E0A              <1>         mov bx, [bp + 10]        ;基数
    54                              <1> 
    55                              <1> .30L:
    56 0000011C BA0000              <1>         mov     dx, 0                   ;基数で割ることによって基数に合わせた数値にする
    57 0000011F F7F3                <1>         div     bx                     ; dx = dx:ax % bx
    58                              <1> 
    59 00000121 89D6                <1>         mov     si, dx                              
    60 00000123 8A94[4B01]          <1>         mov     dl, byte [.ascii + si]
    61                              <1> 
    62 00000127 8815                <1>         mov     [di], dl                ;diは一番うしろの数値のアドレス
    63 00000129 4F                  <1>         dec     di
    64                              <1> 
    65 0000012A 83F800              <1>         cmp     ax, 0
    66 0000012D E0ED                <1>         loopnz  .30L
    67                              <1> .30E:
    68                              <1> 
    69                              <1> ;空欄を埋める
    70                              <1> 
    71 0000012F 83F900              <1>         cmp     cx, 0
    72 00000132 740D                <1> .40Q:   je      .40E
    73 00000134 B020                <1>         mov     al, ' '
    74 00000136 837E0C04            <1>         cmp     [bp + 12], word 0b0100             ;フラグ
    75 0000013A 7502                <1> .42Q:   jne     .42E
    76 0000013C B030                <1>         mov     al, '0'
    77                              <1> .42E:
    78 0000013E FD                  <1>         std
    79 0000013F F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1> ;レジスタ復帰とスタックフレームの廃棄
    83                              <1> 
    84 00000141 5F                  <1>         pop     di
    85 00000142 5E                  <1>         pop     si
    86 00000143 5A                  <1>         pop     dx 
    87 00000144 59                  <1>         pop     cx
    88 00000145 5B                  <1>         pop     bx
    89 00000146 58                  <1>         pop     ax
    90                              <1> 
    91 00000147 89EC                <1>         mov     sp, bp
    92 00000149 5D                  <1>         pop     bp
    93                              <1> 
    94 0000014A C3                  <1>         ret
    95                              <1> 
    96 0000014B 303132333435363738- <1> .ascii:  db      "0123456789ABCDEF"          ;変換テーブル
    96 00000154 39414243444546      <1>
    65                                  %include    "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3 0000015B 68[7701]E85BFF83C4- <1>         cdecl   puts, .s0   ;メッセージの表示
     3 00000163 02                  <1>
     4                              <1> 
     5                              <1> ; キー入力待ち
     6                              <1> 
     7                              <1> .10L:
     8 00000164 B410                <1>         mov     ah, 0x10
     9 00000166 CD16                <1>         int     0x16
    10                              <1> 
    11 00000168 3C20                <1>         cmp     al, ' '
    12 0000016A 75F8                <1>         jne     .10L
    13                              <1> 
    14                              <1> ;改行を出力
    15 0000016C 68[9501]E84AFF83C4- <1>         cdecl   puts, .s1
    15 00000174 02                  <1>
    16                              <1> 
    17                              <1> ;再起動
    18 00000175 CD19                <1>         int     0x19    ; BIOS(0x19)
    19                              <1> 
    20                              <1> ;文字列データ
    21 00000177 0A0D50757368205350- <1> .s0     db      0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000180 414345206B65792074- <1>
    21 00000189 6F207265626F6F742E- <1>
    21 00000192 2E2E00              <1>
    22 00000195 0A0D0A0D00          <1> .s1     db      0x0A, 0x0D, 0x0A, 0x0D, 0
    66                                  
    67                                  ;ブートフラグ
    68                                  
    69 0000019A 00<rept>                        times 510 - ($ - $$) db 0x00    ;先頭512バイトの最後を0x55AAにすることでブートプログラムである条件を満たす
    70 000001FE 55AA                            db 0x55, 0xAA    
    71                                  
    72                                  ; ブート処理第二のステージ
    73                                  stage_2:
    74                                  
    75 00000200 68[0B02]E8B6FE83C4-             cdecl puts, .s0    ;文字列を表示
    75 00000208 02                 
    76                                  
    77 00000209 EBFE                            jmp     $    ;ループ
    78                                  
    79 0000020B 326E64207374616765-     .s0     db      "2nd stage...", 0x0A, 0x0D, 0
    79 00000214 2E2E2E0A0D00       
    80                                  
    81                                  ;パディング（8kByteのファイルにする）
    82 0000021A 00<rept>                        times (1024 * 8) - ($ - $$)  db 0
