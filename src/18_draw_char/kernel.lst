     1                                  %include       "../include/define.s"
     1                              <1> 
     2                              <1> BOOT_SIZE       equ     (1024 * 8)              ;ブートコードサイズ
     3                              <1> KERNEL_SIZE     equ     (1024 * 8)   
     4                              <1> BOOT_LOAD       equ     0x7c00                  ;ブートプログラムのロード位置
     5                              <1>                                                 ;これがないと0x0000にロードされることになってしまうが
     6                              <1>                                                 ;BIOSそこはがすでに使っている領域である
     7                              <1> 
     8                              <1> BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     9                              <1> SECT_SIZE       equ     (512)                   ;セクタサイズ
    10                              <1> BOOT_SECT       equ     (BOOT_SIZE/SECT_SIZE)   ;ブートプログラムのセクタサイズ
    11                              <1> KERNEL_SECT     equ     (KERNEL_SIZE/SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE    equ     20
    14                              <1> 
    15                              <1> KERNEL_LOAD     equ     0x0010_1000
    16                              <1> 
    17                              <1>   
     2                                  %include       "../include/macro.s"
     1                              <1> %macro      cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep    %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__>>3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no     resw    1
    19 00000002 <res 00000002>      <1>         .cyln   resw    1
    20 00000004 <res 00000002>      <1>         .head   resw    1
    21 00000006 <res 00000002>      <1>         .sect   resw    1
    22                              <1> endstruc
    23                              <1> 
     3                                  
     4                                      ORG      KERNEL_LOAD
     5                                  
     6                                  [BITS 32]
     7                                  
     8                                  ; エントリーポイント
     9                                  
    10                                  kernel:
    11                                      
    12                                      ; フォントアドレスを取得
    13 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE
    14 00000005 0FB706                          movzx   eax, word [esi + 0]
    15 00000008 0FB75E02                        movzx   ebx, word [esi + 2]
    16 0000000C C1E004                          shl     eax, 4
    17 0000000F 01D8                            add     eax, ebx
    18 00000011 A3[C8000000]                    mov     [FONT_ADR], eax
    19                                  
    20                                          ;文字の表示
    21                                  
    22 00000016 6A41680F0100006A00-     		cdecl	draw_char, 0, 0, 0x010F, 'A'
    22 0000001F 6A00E8590100006683-
    22 00000028 C410               
    23 0000002A 6A42680F0100006A00-     		cdecl	draw_char, 1, 0, 0x010F, 'B'
    23 00000033 6A01E8450100006683-
    23 0000003C C410               
    24 0000003E 6A43680F0100006A00-     		cdecl	draw_char, 2, 0, 0x010F, 'C'
    24 00000047 6A02E8310100006683-
    24 00000050 C410               
    25                                  
    26 00000052 6A3068020400006A00-     		cdecl	draw_char, 0, 0, 0x0402, '0'
    26 0000005B 6A00E81D0100006683-
    26 00000064 C410               
    27 00000066 6A3168120200006A00-     		cdecl	draw_char, 1, 0, 0x0212, '1'
    27 0000006F 6A01E8090100006683-
    27 00000078 C410               
    28 0000007A 6A5F68120200006A00-     		cdecl	draw_char, 2, 0, 0x0212, '_'
    28 00000083 6A02E8F50000006683-
    28 0000008C C410               
    29                                  
    30 0000008E 6A0D6A3FE8AC010000-             cdecl   draw_font, 63, 13
    30 00000097 6683C408           
    31                                  
    32 0000009B 68[B4000000]680F01-             cdecl   draw_str, 25, 14, 0x010F, .s0
    32 000000A3 00006A0E6A19E8DA01-
    32 000000AC 00006683C410       
    33                                  
    34                                  
    35 000000B2 EBFE                            jmp     $
    36                                  
    37 000000B4 2048656C6C6F2C204B-     .s0         db  " Hello, Kernel! ", 0
    37 000000BD 65726E656C212000   
    38                                  
    39 000000C5 00<rept>                ALIGN 4, db 0
    40 000000C8 00000000                FONT_ADR: dd 0
    41                                  ;   モジュール
    42                                  %include	"../modules/protect/vga.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	読み込みプレーンの選択
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void vga_set_read_plane(plane);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	plane	: 読み込みプレーン
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> vga_set_read_plane:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| プレーン（インデックス）
    16                              <1> 												; ------+----------------
    17 000000CC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 000000CD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 000000CF 50                  <1> 		push	eax
    25 000000D0 52                  <1> 		push	edx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 読み込みプレーンの選択
    29                              <1> 		;---------------------------------------
    30 000000D1 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    31 000000D4 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    32 000000D7 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    33 000000D9 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    34 000000DD 66EF                <1> 		out		dx, ax							; // ポート出力
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの復帰】
    38                              <1> 		;---------------------------------------
    39 000000DF 5A                  <1> 		pop		edx
    40 000000E0 58                  <1> 		pop		eax
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 【スタックフレームの破棄】
    44                              <1> 		;---------------------------------------
    45 000000E1 89EC                <1> 		mov		esp, ebp
    46 000000E3 5D                  <1> 		pop		ebp
    47                              <1> 
    48 000000E4 C3                  <1> 		ret
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ;	書き込みプレーンを選択
    52                              <1> ;========================================================================
    53                              <1> ;■書式		: void vga_set_write_plane(plane);
    54                              <1> ;
    55                              <1> ;■引数
    56                              <1> ;	plane	: 書き込みプレーン
    57                              <1> ;
    58                              <1> ;■戻り値	: 無し
    59                              <1> ;************************************************************************
    60                              <1> vga_set_write_plane:
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 【スタックフレームの構築】
    63                              <1> 		;---------------------------------------
    64                              <1> 												; EBP+ 8| プレーン（ビット指定）
    65                              <1> 												; ------+----------------
    66 000000E5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    67 000000E6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    68                              <1> 												; ------+----------------
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【レジスタの保存】
    72                              <1> 		;---------------------------------------
    73 000000E8 50                  <1> 		push	eax
    74 000000E9 52                  <1> 		push	edx
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 書き込みプレーンの選択
    78                              <1> 		;---------------------------------------
    79 000000EA 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
    80 000000ED 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
    81 000000F0 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
    82 000000F2 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
    83 000000F6 66EF                <1> 		out		dx, ax							; // ポート出力
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの復帰】
    87                              <1> 		;---------------------------------------
    88 000000F8 5A                  <1> 		pop		edx
    89 000000F9 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 000000FA 89EC                <1> 		mov		esp, ebp
    95 000000FC 5D                  <1> 		pop		ebp
    96                              <1> 
    97 000000FD C3                  <1> 		ret
    98                              <1> 
    99                              <1> ;************************************************************************
   100                              <1> ;	フォントの書き込み
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	font	: FONTアドレス
   106                              <1> ;	vram	: VRAMアドレス
   107                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vram_font_copy:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+20| 色（背景/前景色）
   117                              <1> 												; EBP+16| プレーン（ビット指定）
   118                              <1> 												; EBP+12| VRAMアドレス
   119                              <1> 												; EBP+ 8| FONTアドレス
   120                              <1> 												; ------+----------------
   121 000000FE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 000000FF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 00000101 50                  <1> 		push	eax
   129 00000102 53                  <1> 		push	ebx
   130 00000103 51                  <1> 		push	ecx
   131 00000104 52                  <1> 		push	edx
   132 00000105 56                  <1> 		push	esi
   133 00000106 57                  <1> 		push	edi
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 00000107 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   139 0000010A 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   140 0000010D 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   141 00000111 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   142                              <1> 
   143 00000115 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   144 00000117 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   145 0000011A FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   146                              <1> 
   147 0000011C 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   148 0000011E 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   149 00000121 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 16ドットフォントのコピー
   153                              <1> 		;---------------------------------------
   154 00000123 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   155                              <1> 
   156 00000124 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159                              <1> 		;---------------------------------------
   160                              <1> 		; フォントマスクの作成
   161                              <1> 		;---------------------------------------
   162 00000129 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   163 0000012A 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   164 0000012C F6D4                <1> 		not		ah								;   
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 前景色
   168                              <1> 		;---------------------------------------
   169 0000012E 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 背景色
   173                              <1> 		;---------------------------------------
   174 00000130 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   175 00000136 7404                <1> 		jz		.11F							;   {
   176 00000138 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   177 0000013A EB02                <1> 		jmp		.11E							;   }
   178                              <1> .11F:											;   else
   179                              <1> 												;   {
   180 0000013C 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   181                              <1> .11E:											;   }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 前景色と背景色を合成
   185                              <1> 		;---------------------------------------
   186 0000013E 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 新しい値を出力
   190                              <1> 		;---------------------------------------
   191 00000140 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   192                              <1> 
   193 00000142 83C750              <1> 		add		edi, 80							;   EDI += 80;
   194 00000145 E2E2                <1> 		loop	.10L							; } while (--ECX);
   195                              <1> .10E:											; 
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000147 5F                  <1> 		pop		edi
   201 00000148 5E                  <1> 		pop		esi
   202 00000149 5A                  <1> 		pop		edx
   203 0000014A 59                  <1> 		pop		ecx
   204 0000014B 5B                  <1> 		pop		ebx
   205 0000014C 58                  <1> 		pop		eax
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 0000014D 89EC                <1> 		mov		esp, ebp
   211 0000014F 5D                  <1> 		pop		ebp
   212                              <1> 
   213 00000150 C3                  <1> 		ret
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	ビットパターンの書き込み
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	bit		: 出力ビットパターン
   222                              <1> ;	vram	: VRAMアドレス
   223                              <1> ;	flag	: 1:セット, 0:クリア
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vram_bit_copy:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+20| 色（背景/前景色）
   232                              <1> 												; EBP+16| プレーン（ビット指定）
   233                              <1> 												; EBP+12| VRAMアドレス
   234                              <1> 												; EBP+ 8| 出力ビットパターン
   235                              <1> 												; ------+----------------
   236 00000151 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 00000152 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 00000154 50                  <1> 		push	eax
   244 00000155 53                  <1> 		push	ebx
   245 00000156 57                  <1> 		push	edi
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【処理の開始】
   249                              <1> 		;---------------------------------------
   250 00000157 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   251 0000015A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   252 0000015E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   253                              <1> 
   254 00000162 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   255 00000164 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   256 00000167 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; マスクデータの作成
   260                              <1> 		;---------------------------------------
   261 00000169 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   262 0000016C 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   263 0000016E F6D4                <1> 		not		ah								; 
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 現在値の出力を取得
   267                              <1> 		;---------------------------------------
   268 00000170 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   269 00000172 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   270 00000174 08E0                <1> 		or		al, ah							; AL |= AH;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 新しい値を出力
   274                              <1> 		;---------------------------------------
   275 00000176 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【レジスタの復帰】
   279                              <1> 		;---------------------------------------
   280 00000178 5F                  <1> 		pop		edi
   281 00000179 5B                  <1> 		pop		ebx
   282 0000017A 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 0000017B 89EC                <1> 		mov		esp, ebp
   288 0000017D 5D                  <1> 		pop		ebp
   289                              <1> 
   290 0000017E C3                  <1> 		ret
   291                              <1> 
    43                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+20| 文字
     7                              <1> 												; EBP+16| 色
     8                              <1> 												; EBP+12| Y（行）
     9                              <1> 												; EBP+ 8| X（列）
    10                              <1> 												; ------+----------------
    11 0000017F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    12 00000180 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    13                              <1> 												; ------+----------------
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 00000182 50                  <1> 		push	eax
    19 00000183 53                  <1> 		push	ebx
    20 00000184 51                  <1> 		push	ecx
    21 00000185 52                  <1> 		push	edx
    22 00000186 56                  <1> 		push	esi
    23 00000187 57                  <1> 		push	edi
    24                              <1> 		;---------------------------------------
    25                              <1> 		; テストアンドセット
    26                              <1> 		;---------------------------------------
    27                              <1> %ifdef	USE_TEST_AND_SET
    28                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    29                              <1> %endif
    30                              <1> 
    31                              <1>         ;コピー元のアドレスを取得
    32 00000188 0FB67514            <1>         movzx   esi, byte [ebp +20]
    33 0000018C C1E604              <1>         shl     esi, 4
    34 0000018F 0335[C8000000]      <1>         add     esi, [FONT_ADR]
    35                              <1> 
    36                              <1>         ;コピー先のアドレスを取得
    37 00000195 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000198 C1E708              <1>         shl     edi, 8
    39 0000019B 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]
    40 000001A2 037D08              <1>         add     edi, [ebp + 8]
    41                              <1> 
    42                              <1>         ;一文字分のフォントを出力
    43 000001A5 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
    44                              <1> 
    45 000001A9 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
    45 000001B2 C404                <1>
    46 000001B4 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
    46 000001BD C404                <1>
    47 000001BF 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    47 000001C8 FF6683C410          <1>
    48                              <1> 
    49 000001CD 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
    49 000001D6 C404                <1>
    50 000001D8 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
    50 000001E1 C404                <1>
    51 000001E3 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 000001EC FF6683C410          <1>
    52                              <1> 
    53 000001F1 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
    53 000001FA C404                <1>
    54 000001FC 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
    54 00000205 C404                <1>
    55 00000207 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 00000210 FF6683C410          <1>
    56                              <1> 
    57 00000215 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
    57 0000021E C404                <1>
    58 00000220 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
    58 00000229 C404                <1>
    59 0000022B 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 00000234 FF6683C410          <1>
    60                              <1> 
    61                              <1> %ifdef	USE_TEST_AND_SET
    62                              <1> 		;---------------------------------------
    63                              <1> 		; テストアンドセット
    64                              <1> 		;---------------------------------------
    65                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    66                              <1> %endif
    67                              <1> 
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【レジスタの復帰】
    70                              <1> 		;---------------------------------------
    71 00000239 5F                  <1> 		pop		edi
    72 0000023A 5E                  <1> 		pop		esi
    73 0000023B 5A                  <1> 		pop		edx
    74 0000023C 59                  <1> 		pop		ecx
    75 0000023D 5B                  <1> 		pop		ebx
    76 0000023E 58                  <1> 		pop		eax
    77                              <1> 
    78                              <1> 		;---------------------------------------
    79                              <1> 		; 【スタックフレームの破棄】
    80                              <1> 		;---------------------------------------
    81 0000023F 89EC                <1> 		mov		esp, ebp
    82 00000241 5D                  <1> 		pop		ebp
    83                              <1> 
    84 00000242 C3                  <1> 		ret
    85                              <1> 
    86                              <1> %ifdef USE_TEST_AND_SET
    87                              <1> ALIGN 4, db 0
    88                              <1> IN_USE:	dd	0
    89                              <1> %endif
    90                              <1> 
    44                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+12| Y（行）
     7                              <1> 												; EBP+ 8| X（列）
     8                              <1> 												; ---------------
     9 00000243 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    10 00000244 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    11                              <1> 												; ---------------
    12                              <1> 
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 00000246 50                  <1> 		push	eax
    17 00000247 53                  <1> 		push	ebx
    18 00000248 51                  <1> 		push	ecx
    19 00000249 52                  <1> 		push	edx
    20 0000024A 56                  <1> 		push	esi
    21 0000024B 57                  <1> 		push	edi
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 表示位置
    25                              <1> 		;---------------------------------------
    26 0000024C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    27 0000024F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    28                              <1> 
    29 00000252 B900000000          <1>         mov     ecx, 0
    30 00000257 81F900010000        <1> .10L:   cmp     ecx, 256
    31 0000025D 731F                <1>         jae     .10E
    32                              <1> 
    33 0000025F 89C8                <1>         mov     eax, ecx
    34 00000261 83E00F              <1>         and     eax, 0x0F
    35 00000264 01F0                <1>         add     eax, esi            ;列 0 => 11110000 として端っこによるようにする
    36                              <1> 
    37 00000266 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    38 00000268 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
    39 0000026B 01FB                <1> 		add		ebx, edi						;   EBX += Y;       ;行 １６で割ったときに商がいくつか
    40                              <1> 
    41 0000026D 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
    41 00000276 FF6683C410          <1>
    42                              <1> 
    43 0000027B 41                  <1> 		inc		ecx								;   // for (... ECX++)
    44 0000027C EBD9                <1> 		jmp		.10L							; 
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 0000027E 5F                  <1> 		pop		edi
    51 0000027F 5E                  <1> 		pop		esi
    52 00000280 5A                  <1> 		pop		edx
    53 00000281 59                  <1> 		pop		ecx
    54 00000282 5B                  <1> 		pop		ebx
    55 00000283 58                  <1> 		pop		eax
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; 【スタックフレームの破棄】
    59                              <1> 		;---------------------------------------
    60 00000284 89EC                <1> 		mov		esp, ebp
    61 00000286 5D                  <1> 		pop		ebp
    62                              <1> 
    63 00000287 C3                  <1> 		ret
    64                              <1> 
    45                                  %include	"../modules/protect/draw_str.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	文字列の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_str(col, row, color, p);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	p		: 文字列のアドレス
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_str:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| *p（文字列のアドレス）
    20                              <1> 												; EBP+16| color（色）
    21                              <1> 												; EBP+12| row（行）
    22                              <1> 												; EBP+ 8| col（列）
    23                              <1> 												; ---------------
    24 00000288 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    25 00000289 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    26                              <1> 												; ---------------
    27                              <1> 
    28                              <1> 		;---------------------------------------
    29                              <1> 		; 【レジスタの保存】
    30                              <1> 		;---------------------------------------
    31 0000028B 50                  <1> 		push	eax
    32 0000028C 53                  <1> 		push	ebx
    33 0000028D 51                  <1> 		push	ecx
    34 0000028E 52                  <1> 		push	edx
    35 0000028F 56                  <1> 		push	esi
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 文字列の表示
    39                              <1> 		;---------------------------------------
    40 00000290 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    41 00000293 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    42 00000296 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    43 0000029A 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
    44                              <1> 
    45 0000029D FC                  <1> 		cld										; DF = 0; // アドレス加算
    46                              <1> .10L:											; do
    47                              <1> 												; {
    48 0000029E AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
    49 0000029F 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
    50 000002A1 7425                <1> 		je		.10E							;     break;
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 1文字表示
    54                              <1> 		;---------------------------------------
    55                              <1> %ifdef	USE_SYSTEM_CALL
    56                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
    57                              <1> %else
    58 000002A3 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
    58 000002AC 6683C410            <1>
    59                              <1> %endif
    60                              <1> 
    61                              <1> 		; 次の文字の位置を調整
    62 000002B0 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
    63 000002B1 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
    64 000002B4 7C10                <1> 		jl		.12E							;   {
    65 000002B6 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
    66 000002BB 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
    67 000002BC 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
    68 000002BF 7C05                <1> 		jl		.12E							;     {
    69 000002C1 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
    70                              <1> 												;     }
    71                              <1> .12E:											;   }
    72 000002C6 EBD6                <1> 		jmp		.10L							;   
    73                              <1> .10E:											; } while (1);
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの復帰】
    77                              <1> 		;---------------------------------------
    78 000002C8 5E                  <1> 		pop		esi
    79 000002C9 5A                  <1> 		pop		edx
    80 000002CA 59                  <1> 		pop		ecx
    81 000002CB 5B                  <1> 		pop		ebx
    82 000002CC 58                  <1> 		pop		eax
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの破棄】
    86                              <1> 		;---------------------------------------
    87 000002CD 89EC                <1> 		mov		esp, ebp
    88 000002CF 5D                  <1> 		pop		ebp
    89                              <1> 
    90 000002D0 C3                  <1> 		ret
    91                              <1> 
    46                                  
    47                                  ; パディング
    48                                  
    49 000002D1 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0x00
    50                                      
