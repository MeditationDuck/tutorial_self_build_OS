     1                                  %include       "../include/define.s"
     1                              <1> 
     2                              <1> BOOT_SIZE       equ     (1024 * 8)              ;ブートコードサイズ
     3                              <1> KERNEL_SIZE     equ     (1024 * 8)   
     4                              <1> BOOT_LOAD       equ     0x7c00                  ;ブートプログラムのロード位置
     5                              <1>                                                 ;これがないと0x0000にロードされることになってしまうが
     6                              <1>                                                 ;BIOSそこはがすでに使っている領域である
     7                              <1> 
     8                              <1> BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)
     9                              <1> SECT_SIZE       equ     (512)                   ;セクタサイズ
    10                              <1> BOOT_SECT       equ     (BOOT_SIZE/SECT_SIZE)   ;ブートプログラムのセクタサイズ
    11                              <1> KERNEL_SECT     equ     (KERNEL_SIZE/SECT_SIZE)
    12                              <1> 
    13                              <1> E820_RECORD_SIZE    equ     20
    14                              <1> 
    15                              <1> KERNEL_LOAD     equ     0x0010_1000
    16                              <1> 
    17                              <1>   
     2                                  %include       "../include/macro.s"
     1                              <1> %macro      cdecl 1-*.nolist
     2                              <1> 
     3                              <1>     %rep    %0 - 1
     4                              <1>         push    %{-1:-1}
     5                              <1>         %rotate -1
     6                              <1>     %endrep
     7                              <1>     %rotate -1
     8                              <1> 
     9                              <1>         call    %1
    10                              <1> 
    11                              <1>     %if 1 < %0
    12                              <1>         add     sp, (__BITS__>>3) * (%0 - 1)
    13                              <1>     %endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> struc drive
    18 00000000 <res 00000002>      <1>         .no     resw    1
    19 00000002 <res 00000002>      <1>         .cyln   resw    1
    20 00000004 <res 00000002>      <1>         .head   resw    1
    21 00000006 <res 00000002>      <1>         .sect   resw    1
    22                              <1> endstruc
    23                              <1> 
     3                                  
     4                                      ORG      KERNEL_LOAD
     5                                  
     6                                  [BITS 32]
     7                                  
     8                                  ; エントリーポイント
     9                                  
    10                                  kernel:
    11                                      
    12                                      ; フォントアドレスを取得
    13 00000000 BE007E0000                      mov     esi, BOOT_LOAD + SECT_SIZE
    14 00000005 0FB706                          movzx   eax, word [esi + 0]
    15 00000008 0FB75E02                        movzx   ebx, word [esi + 2]
    16 0000000C C1E004                          shl     eax, 4
    17 0000000F 01D8                            add     eax, ebx
    18 00000011 A3[40020000]                    mov     [FONT_ADR], eax
    19                                  
    20                                  		;---------------------------------------
    21                                  		; フォントの一覧表示
    22                                  		;---------------------------------------
    23 00000016 6A0D6A3FE8A0030000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    23 0000001F 6683C408           
    24 00000023 6A046A3FE821040000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    24 0000002C 6683C408           
    25                                  
    26                                  
    27 00000030 6A0D6A3FE886030000-             cdecl   draw_font, 63, 13
    27 00000039 6683C408           
    28                                  
    29                                  		;---------------------------------------
    30                                  		; 文字列の表示
    31                                  		;---------------------------------------
    32 0000003D 68[2C020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    32 00000045 00006A0E6A19E8B403-
    32 0000004E 00006683C410       
    33                                  
    34                                  
    35                                  
    36                                  		;---------------------------------------
    37                                  		; 線を描画
    38                                  		;---------------------------------------
    39 00000054 6A0F6A006A006A646A-     		cdecl	draw_line, 100, 100,   0,   0, 0x0F
    39 0000005D 64E8270500006683C4-
    39 00000066 14                 
    40 00000067 6A0F6A0068C8000000-     		cdecl	draw_line, 100, 100, 200,   0, 0x0F
    40 00000070 6A646A64E811050000-
    40 00000079 6683C414           
    41 0000007D 6A0F68C800000068C8-     		cdecl	draw_line, 100, 100, 200, 200, 0x0F
    41 00000086 0000006A646A64E8F8-
    41 0000008F 0400006683C414     
    42 00000096 6A0F68C80000006A00-     		cdecl	draw_line, 100, 100,   0, 200, 0x0F
    42 0000009F 6A646A64E8E2040000-
    42 000000A8 6683C414           
    43                                  
    44 000000AC 6A026A006A326A646A-     		cdecl	draw_line, 100, 100,  50,   0, 0x02
    44 000000B5 64E8CF0400006683C4-
    44 000000BE 14                 
    45 000000BF 6A036A006896000000-     		cdecl	draw_line, 100, 100, 150,   0, 0x03
    45 000000C8 6A646A64E8B9040000-
    45 000000D1 6683C414           
    46 000000D5 6A0468C80000006896-     		cdecl	draw_line, 100, 100, 150, 200, 0x04
    46 000000DE 0000006A646A64E8A0-
    46 000000E7 0400006683C414     
    47 000000EE 6A0568C80000006A32-     		cdecl	draw_line, 100, 100,  50, 200, 0x05
    47 000000F7 6A646A64E88A040000-
    47 00000100 6683C414           
    48                                  
    49 00000104 6A026A326A006A646A-     		cdecl	draw_line, 100, 100,   0,  50, 0x02
    49 0000010D 64E8770400006683C4-
    49 00000116 14                 
    50 00000117 6A036A3268C8000000-     		cdecl	draw_line, 100, 100, 200,  50, 0x03
    50 00000120 6A646A64E861040000-
    50 00000129 6683C414           
    51 0000012D 6A04689600000068C8-     		cdecl	draw_line, 100, 100, 200, 150, 0x04
    51 00000136 0000006A646A64E848-
    51 0000013F 0400006683C414     
    52 00000146 6A0568960000006A00-     		cdecl	draw_line, 100, 100,   0, 150, 0x05
    52 0000014F 6A646A64E832040000-
    52 00000158 6683C414           
    53                                  
    54 0000015C 6A0F6A006A646A646A-     		cdecl	draw_line, 100, 100, 100,   0, 0x0F
    54 00000165 64E81F0400006683C4-
    54 0000016E 14                 
    55 0000016F 6A0F6A6468C8000000-     		cdecl	draw_line, 100, 100, 200, 100, 0x0F
    55 00000178 6A646A64E809040000-
    55 00000181 6683C414           
    56 00000185 6A0F68C80000006A64-     		cdecl	draw_line, 100, 100, 100, 200, 0x0F
    56 0000018E 6A646A64E8F3030000-
    56 00000197 6683C414           
    57 0000019B 6A0F6A646A006A646A-     		cdecl	draw_line, 100, 100,   0, 100, 0x0F
    57 000001A4 64E8E00300006683C4-
    57 000001AD 14                 
    58                                  				;---------------------------------------
    59                                  		; 矩形を描画
    60                                  		;---------------------------------------
    61 000001AE 6A0368C800000068C8-     		cdecl	draw_rect, 100, 100, 200, 200, 0x03
    61 000001B7 0000006A646A64E879-
    61 000001C0 0400006683C414     
    62 000001C7 6A0568960000006896-     		cdecl	draw_rect, 400, 250, 150, 150, 0x05
    62 000001D0 00000068FA00000068-
    62 000001D9 90010000E85A040000-
    62 000001E2 6683C414           
    63 000001E6 6A066A64682C010000-     		cdecl	draw_rect, 350, 400, 300, 100, 0x06
    63 000001EF 6890010000685E0100-
    63 000001F8 00E83E0400006683C4-
    63 00000201 14                 
    64                                  
    65                                  		;---------------------------------------
    66                                  		; 時刻の表示
    67                                  		;---------------------------------------
    68                                  .10L:											; do
    69                                  												; {
    70 00000202 68[44020000]E81F05-     		cdecl	rtc_get_time, RTC_TIME			;   EAX = get_time(&RTC_TIME);
    70 0000020A 00006683C404       
    72 00000210 FF35[44020000]6800-     		cdecl	draw_time, 72, 0, 0x0700,									dword [RTC_TIME]
    72 00000218 0700006A006A48E848-
    72 00000221 0500006683C410     
    73 00000228 EBD8                    		jmp		.10L							; } while (1);
    74                                  
    75 0000022A EBFE                            jmp     $
    76                                  
    77 0000022C 2048656C6C6F2C204B-     .s0         db  " Hello, Kernel! ", 0
    77 00000235 65726E656C212000   
    78                                  
    79 0000023D 00<rept>                ALIGN 4, db 0
    80 00000240 00000000                FONT_ADR: dd 0
    81 00000244 00000000                RTC_TIME:	dd	0
    82                                  ;   モジュール
    83                                  %include	"../modules/protect/vga.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	読み込みプレーンの選択
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void vga_set_read_plane(plane);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	plane	: 読み込みプレーン
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> vga_set_read_plane:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| プレーン（インデックス）
    16                              <1> 												; ------+----------------
    17 00000248 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 00000249 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000024B 50                  <1> 		push	eax
    25 0000024C 52                  <1> 		push	edx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 読み込みプレーンの選択
    29                              <1> 		;---------------------------------------
    30 0000024D 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    31 00000250 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    32 00000253 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    33 00000255 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    34 00000259 66EF                <1> 		out		dx, ax							; // ポート出力
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの復帰】
    38                              <1> 		;---------------------------------------
    39 0000025B 5A                  <1> 		pop		edx
    40 0000025C 58                  <1> 		pop		eax
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 【スタックフレームの破棄】
    44                              <1> 		;---------------------------------------
    45 0000025D 89EC                <1> 		mov		esp, ebp
    46 0000025F 5D                  <1> 		pop		ebp
    47                              <1> 
    48 00000260 C3                  <1> 		ret
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ;	書き込みプレーンを選択
    52                              <1> ;========================================================================
    53                              <1> ;■書式		: void vga_set_write_plane(plane);
    54                              <1> ;
    55                              <1> ;■引数
    56                              <1> ;	plane	: 書き込みプレーン
    57                              <1> ;
    58                              <1> ;■戻り値	: 無し
    59                              <1> ;************************************************************************
    60                              <1> vga_set_write_plane:
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 【スタックフレームの構築】
    63                              <1> 		;---------------------------------------
    64                              <1> 												; EBP+ 8| プレーン（ビット指定）
    65                              <1> 												; ------+----------------
    66 00000261 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    67 00000262 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    68                              <1> 												; ------+----------------
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【レジスタの保存】
    72                              <1> 		;---------------------------------------
    73 00000264 50                  <1> 		push	eax
    74 00000265 52                  <1> 		push	edx
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 書き込みプレーンの選択
    78                              <1> 		;---------------------------------------
    79 00000266 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
    80 00000269 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
    81 0000026C B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
    82 0000026E 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
    83 00000272 66EF                <1> 		out		dx, ax							; // ポート出力
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの復帰】
    87                              <1> 		;---------------------------------------
    88 00000274 5A                  <1> 		pop		edx
    89 00000275 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 00000276 89EC                <1> 		mov		esp, ebp
    95 00000278 5D                  <1> 		pop		ebp
    96                              <1> 
    97 00000279 C3                  <1> 		ret
    98                              <1> 
    99                              <1> ;************************************************************************
   100                              <1> ;	フォントの書き込み
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	font	: FONTアドレス
   106                              <1> ;	vram	: VRAMアドレス
   107                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vram_font_copy:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+20| 色（背景/前景色）
   117                              <1> 												; EBP+16| プレーン（ビット指定）
   118                              <1> 												; EBP+12| VRAMアドレス
   119                              <1> 												; EBP+ 8| FONTアドレス
   120                              <1> 												; ------+----------------
   121 0000027A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 0000027B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 0000027D 50                  <1> 		push	eax
   129 0000027E 53                  <1> 		push	ebx
   130 0000027F 51                  <1> 		push	ecx
   131 00000280 52                  <1> 		push	edx
   132 00000281 56                  <1> 		push	esi
   133 00000282 57                  <1> 		push	edi
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 00000283 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   139 00000286 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   140 00000289 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   141 0000028D 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   142                              <1> 
   143 00000291 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   144 00000293 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   145 00000296 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   146                              <1> 
   147 00000298 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   148 0000029A 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   149 0000029D FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 16ドットフォントのコピー
   153                              <1> 		;---------------------------------------
   154 0000029F FC                  <1> 		cld										; DF  = 0; // アドレス加算
   155                              <1> 
   156 000002A0 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159                              <1> 		;---------------------------------------
   160                              <1> 		; フォントマスクの作成
   161                              <1> 		;---------------------------------------
   162 000002A5 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   163 000002A6 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   164 000002A8 F6D4                <1> 		not		ah								;   
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 前景色
   168                              <1> 		;---------------------------------------
   169 000002AA 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 背景色
   173                              <1> 		;---------------------------------------
   174 000002AC F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   175 000002B2 7404                <1> 		jz		.11F							;   {
   176 000002B4 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   177 000002B6 EB02                <1> 		jmp		.11E							;   }
   178                              <1> .11F:											;   else
   179                              <1> 												;   {
   180 000002B8 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   181                              <1> .11E:											;   }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 前景色と背景色を合成
   185                              <1> 		;---------------------------------------
   186 000002BA 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 新しい値を出力
   190                              <1> 		;---------------------------------------
   191 000002BC 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   192                              <1> 
   193 000002BE 83C750              <1> 		add		edi, 80							;   EDI += 80;
   194 000002C1 E2E2                <1> 		loop	.10L							; } while (--ECX);
   195                              <1> .10E:											; 
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 000002C3 5F                  <1> 		pop		edi
   201 000002C4 5E                  <1> 		pop		esi
   202 000002C5 5A                  <1> 		pop		edx
   203 000002C6 59                  <1> 		pop		ecx
   204 000002C7 5B                  <1> 		pop		ebx
   205 000002C8 58                  <1> 		pop		eax
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 000002C9 89EC                <1> 		mov		esp, ebp
   211 000002CB 5D                  <1> 		pop		ebp
   212                              <1> 
   213 000002CC C3                  <1> 		ret
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	ビットパターンの書き込み
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	bit		: 出力ビットパターン
   222                              <1> ;	vram	: VRAMアドレス
   223                              <1> ;	flag	: 1:セット, 0:クリア
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vram_bit_copy:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+20| 色（背景/前景色）
   232                              <1> 												; EBP+16| プレーン（ビット指定）
   233                              <1> 												; EBP+12| VRAMアドレス
   234                              <1> 												; EBP+ 8| 出力ビットパターン
   235                              <1> 												; ------+----------------
   236 000002CD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 000002CE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 000002D0 50                  <1> 		push	eax
   244 000002D1 53                  <1> 		push	ebx
   245 000002D2 57                  <1> 		push	edi
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【処理の開始】
   249                              <1> 		;---------------------------------------
   250 000002D3 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   251 000002D6 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   252 000002DA 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   253                              <1> 
   254 000002DE 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   255 000002E0 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   256 000002E3 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; マスクデータの作成
   260                              <1> 		;---------------------------------------
   261 000002E5 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   262 000002E8 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   263 000002EA F6D4                <1> 		not		ah								; 
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 現在値の出力を取得
   267                              <1> 		;---------------------------------------
   268 000002EC 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   269 000002EE 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   270 000002F0 08E0                <1> 		or		al, ah							; AL |= AH;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 新しい値を出力
   274                              <1> 		;---------------------------------------
   275 000002F2 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【レジスタの復帰】
   279                              <1> 		;---------------------------------------
   280 000002F4 5F                  <1> 		pop		edi
   281 000002F5 5B                  <1> 		pop		ebx
   282 000002F6 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 000002F7 89EC                <1> 		mov		esp, ebp
   288 000002F9 5D                  <1> 		pop		ebp
   289                              <1> 
   290 000002FA C3                  <1> 		ret
   291                              <1> 
    84                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+20| 文字
     7                              <1> 												; EBP+16| 色
     8                              <1> 												; EBP+12| Y（行）
     9                              <1> 												; EBP+ 8| X（列）
    10                              <1> 												; ------+----------------
    11 000002FB 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    12 000002FC 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    13                              <1> 												; ------+----------------
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 000002FE 50                  <1> 		push	eax
    19 000002FF 53                  <1> 		push	ebx
    20 00000300 51                  <1> 		push	ecx
    21 00000301 52                  <1> 		push	edx
    22 00000302 56                  <1> 		push	esi
    23 00000303 57                  <1> 		push	edi
    24                              <1> 		;---------------------------------------
    25                              <1> 		; テストアンドセット
    26                              <1> 		;---------------------------------------
    27                              <1> %ifdef	USE_TEST_AND_SET
    28                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    29                              <1> %endif
    30                              <1> 
    31                              <1>         ;コピー元のアドレスを取得
    32 00000304 0FB67514            <1>         movzx   esi, byte [ebp +20]
    33 00000308 C1E604              <1>         shl     esi, 4
    34 0000030B 0335[40020000]      <1>         add     esi, [FONT_ADR]
    35                              <1> 
    36                              <1>         ;コピー先のアドレスを取得
    37 00000311 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000314 C1E708              <1>         shl     edi, 8
    39 00000317 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]
    40 0000031E 037D08              <1>         add     edi, [ebp + 8]
    41                              <1> 
    42                              <1>         ;一文字分のフォントを出力
    43 00000321 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
    44                              <1> 
    45 00000325 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
    45 0000032E C404                <1>
    46 00000330 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
    46 00000339 C404                <1>
    47 0000033B 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    47 00000344 FF6683C410          <1>
    48                              <1> 
    49 00000349 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
    49 00000352 C404                <1>
    50 00000354 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
    50 0000035D C404                <1>
    51 0000035F 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 00000368 FF6683C410          <1>
    52                              <1> 
    53 0000036D 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
    53 00000376 C404                <1>
    54 00000378 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
    54 00000381 C404                <1>
    55 00000383 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 0000038C FF6683C410          <1>
    56                              <1> 
    57 00000391 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
    57 0000039A C404                <1>
    58 0000039C 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
    58 000003A5 C404                <1>
    59 000003A7 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 000003B0 FF6683C410          <1>
    60                              <1> 
    61                              <1> %ifdef	USE_TEST_AND_SET
    62                              <1> 		;---------------------------------------
    63                              <1> 		; テストアンドセット
    64                              <1> 		;---------------------------------------
    65                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    66                              <1> %endif
    67                              <1> 
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【レジスタの復帰】
    70                              <1> 		;---------------------------------------
    71 000003B5 5F                  <1> 		pop		edi
    72 000003B6 5E                  <1> 		pop		esi
    73 000003B7 5A                  <1> 		pop		edx
    74 000003B8 59                  <1> 		pop		ecx
    75 000003B9 5B                  <1> 		pop		ebx
    76 000003BA 58                  <1> 		pop		eax
    77                              <1> 
    78                              <1> 		;---------------------------------------
    79                              <1> 		; 【スタックフレームの破棄】
    80                              <1> 		;---------------------------------------
    81 000003BB 89EC                <1> 		mov		esp, ebp
    82 000003BD 5D                  <1> 		pop		ebp
    83                              <1> 
    84 000003BE C3                  <1> 		ret
    85                              <1> 
    86                              <1> %ifdef USE_TEST_AND_SET
    87                              <1> ALIGN 4, db 0
    88                              <1> IN_USE:	dd	0
    89                              <1> %endif
    90                              <1> 
    85                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+12| Y（行）
     7                              <1> 												; EBP+ 8| X（列）
     8                              <1> 												; ---------------
     9 000003BF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    10 000003C0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    11                              <1> 												; ---------------
    12                              <1> 
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 000003C2 50                  <1> 		push	eax
    17 000003C3 53                  <1> 		push	ebx
    18 000003C4 51                  <1> 		push	ecx
    19 000003C5 52                  <1> 		push	edx
    20 000003C6 56                  <1> 		push	esi
    21 000003C7 57                  <1> 		push	edi
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 表示位置
    25                              <1> 		;---------------------------------------
    26 000003C8 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    27 000003CB 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    28                              <1> 
    29 000003CE B900000000          <1>         mov     ecx, 0
    30 000003D3 81F900010000        <1> .10L:   cmp     ecx, 256
    31 000003D9 731F                <1>         jae     .10E
    32                              <1> 
    33 000003DB 89C8                <1>         mov     eax, ecx
    34 000003DD 83E00F              <1>         and     eax, 0x0F
    35 000003E0 01F0                <1>         add     eax, esi            ;列 0 => 11110000 として端っこによるようにする
    36                              <1> 
    37 000003E2 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    38 000003E4 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
    39 000003E7 01FB                <1> 		add		ebx, edi						;   EBX += Y;       ;行 １６で割ったときに商がいくつか
    40                              <1> 
    41 000003E9 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
    41 000003F2 FF6683C410          <1>
    42                              <1> 
    43 000003F7 41                  <1> 		inc		ecx								;   // for (... ECX++)
    44 000003F8 EBD9                <1> 		jmp		.10L							; 
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 000003FA 5F                  <1> 		pop		edi
    51 000003FB 5E                  <1> 		pop		esi
    52 000003FC 5A                  <1> 		pop		edx
    53 000003FD 59                  <1> 		pop		ecx
    54 000003FE 5B                  <1> 		pop		ebx
    55 000003FF 58                  <1> 		pop		eax
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; 【スタックフレームの破棄】
    59                              <1> 		;---------------------------------------
    60 00000400 89EC                <1> 		mov		esp, ebp
    61 00000402 5D                  <1> 		pop		ebp
    62                              <1> 
    63 00000403 C3                  <1> 		ret
    64                              <1> 
    86                                  %include	"../modules/protect/draw_str.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	文字列の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_str(col, row, color, p);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	p		: 文字列のアドレス
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_str:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| *p（文字列のアドレス）
    20                              <1> 												; EBP+16| color（色）
    21                              <1> 												; EBP+12| row（行）
    22                              <1> 												; EBP+ 8| col（列）
    23                              <1> 												; ---------------
    24 00000404 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    25 00000405 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    26                              <1> 												; ---------------
    27                              <1> 
    28                              <1> 		;---------------------------------------
    29                              <1> 		; 【レジスタの保存】
    30                              <1> 		;---------------------------------------
    31 00000407 50                  <1> 		push	eax
    32 00000408 53                  <1> 		push	ebx
    33 00000409 51                  <1> 		push	ecx
    34 0000040A 52                  <1> 		push	edx
    35 0000040B 56                  <1> 		push	esi
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 文字列の表示
    39                              <1> 		;---------------------------------------
    40 0000040C 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    41 0000040F 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    42 00000412 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    43 00000416 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
    44                              <1> 
    45 00000419 FC                  <1> 		cld										; DF = 0; // アドレス加算
    46                              <1> .10L:											; do
    47                              <1> 												; {
    48 0000041A AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
    49 0000041B 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
    50 0000041D 7425                <1> 		je		.10E							;     break;
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 1文字表示
    54                              <1> 		;---------------------------------------
    55                              <1> %ifdef	USE_SYSTEM_CALL
    56                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
    57                              <1> %else
    58 0000041F 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
    58 00000428 6683C410            <1>
    59                              <1> %endif
    60                              <1> 
    61                              <1> 		; 次の文字の位置を調整
    62 0000042C 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
    63 0000042D 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
    64 00000430 7C10                <1> 		jl		.12E							;   {
    65 00000432 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
    66 00000437 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
    67 00000438 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
    68 0000043B 7C05                <1> 		jl		.12E							;     {
    69 0000043D BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
    70                              <1> 												;     }
    71                              <1> .12E:											;   }
    72 00000442 EBD6                <1> 		jmp		.10L							;   
    73                              <1> .10E:											; } while (1);
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの復帰】
    77                              <1> 		;---------------------------------------
    78 00000444 5E                  <1> 		pop		esi
    79 00000445 5A                  <1> 		pop		edx
    80 00000446 59                  <1> 		pop		ecx
    81 00000447 5B                  <1> 		pop		ebx
    82 00000448 58                  <1> 		pop		eax
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの破棄】
    86                              <1> 		;---------------------------------------
    87 00000449 89EC                <1> 		mov		esp, ebp
    88 0000044B 5D                  <1> 		pop		ebp
    89                              <1> 
    90 0000044C C3                  <1> 		ret
    91                              <1> 
    87                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	カラーバーの表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_color_bar(col, row);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> draw_color_bar:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												; EBP+ 8| X（列）
    18                              <1> 												; EBP+12| Y（行）
    19                              <1> 												; ---------------
    20 0000044D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 0000044E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ---------------
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 【レジスタの保存】
    25                              <1> 		;---------------------------------------
    26 00000450 50                  <1> 		push	eax
    27 00000451 53                  <1> 		push	ebx
    28 00000452 51                  <1> 		push	ecx
    29 00000453 52                  <1> 		push	edx
    30 00000454 56                  <1> 		push	esi
    31 00000455 57                  <1> 		push	edi
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 表示位置
    35                              <1> 		;---------------------------------------
    36 00000456 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    37 00000459 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; カラーバーを表示
    41                              <1> 		;---------------------------------------
    42 0000045C B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
    43 00000461 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
    44 00000464 732E                <1> 		jae		.10E							; 
    45                              <1> 												;      ECX++)
    46                              <1> 												; {
    47                              <1> 												;   // 桁位置の計算
    48 00000466 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
    49 00000468 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
    50 0000046B C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
    51 0000046E 01F0                <1> 		add		eax, esi						;   EAX += X;
    52                              <1> 												;   
    53                              <1> 												;   // 行位置の計算
    54 00000470 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    55 00000472 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
    56 00000474 01FB                <1> 		add		ebx, edi						;   EBX += Y;
    57                              <1> 												;   
    58                              <1> 												;   // 表示色の取得
    59 00000476 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
    60 00000478 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
    61 0000047A 8B92[A7040000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
    62                              <1> 
    63 00000480 68[9E040000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
    63 00000488 E877FFFFFF6683C410  <1>
    64                              <1> 
    65 00000491 41                  <1> 		inc		ecx								;   // for (... ECX++)
    66 00000492 EBCD                <1> 		jmp		.10L							; 
    67                              <1> .10E:											; }
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 【レジスタの復帰】
    71                              <1> 		;---------------------------------------
    72 00000494 5F                  <1> 		pop		edi
    73 00000495 5E                  <1> 		pop		esi
    74 00000496 5A                  <1> 		pop		edx
    75 00000497 59                  <1> 		pop		ecx
    76 00000498 5B                  <1> 		pop		ebx
    77 00000499 58                  <1> 		pop		eax
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 【スタックフレームの破棄】
    81                              <1> 		;---------------------------------------
    82 0000049A 89EC                <1> 		mov		esp, ebp
    83 0000049C 5D                  <1> 		pop		ebp
    84                              <1> 
    85 0000049D C3                  <1> 		ret
    86                              <1> 
    87 0000049E 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
    88                              <1> 
    89 000004A7 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
    90 000004AB 00010009            <1> 		dw	0x0100, 0x0900
    91 000004AF 0002000A            <1> 		dw	0x0200, 0x0A00
    92 000004B3 0003000B            <1> 		dw	0x0300, 0x0B00
    93 000004B7 0004000C            <1> 		dw	0x0400, 0x0C00
    94 000004BB 0005000D            <1> 		dw	0x0500, 0x0D00
    95 000004BF 0006000E            <1> 		dw	0x0600, 0x0E00
    96 000004C3 0007000F            <1> 		dw	0x0700, 0x0F00
    97                              <1> 
    88                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ピクセルの描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_pixel(X, Y, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X		: X座標
     8                              <1> ;	Y		: Y座標
     9                              <1> ;	color	: 描画色
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> draw_pixel:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ------|--------
    18                              <1> 												; EBP+16| 色
    19                              <1> 												; EBP+12| Y
    20                              <1> 												; EBP+ 8| X
    21                              <1> 												; ------|--------
    22 000004C7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    23 000004C8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    24                              <1> 												; ------+--------
    25                              <1> 		;---------------------------------------
    26                              <1> 		; 【レジスタの保存】
    27                              <1> 		;---------------------------------------
    28 000004CA 50                  <1> 		push	eax
    29 000004CB 53                  <1> 		push	ebx
    30 000004CC 51                  <1> 		push	ecx
    31 000004CD 57                  <1> 		push	edi
    32                              <1>         
    33                              <1> 		;---------------------------------------
    34                              <1> 		; Y座標を80倍する（640/8）
    35                              <1> 		;---------------------------------------
    36                              <1> 
    37 000004CE 8B7D0C              <1>         mov     edi, [ebp +12]
    38 000004D1 C1E704              <1>         shl     edi, 4
    39 000004D4 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000]
    40                              <1> 
    41 000004DB 8B5D08              <1>         mov     ebx, [ebp + 8]
    42 000004DE 89D9                <1>         mov     ecx, ebx
    43 000004E0 C1EB03              <1>         shr     ebx, 3
    44 000004E3 01DF                <1>         add     edi, ebx
    45                              <1> 
    46 000004E5 83E107              <1>         and     ecx, 0x07
    47 000004E8 BB80000000          <1>         mov     ebx, 0x80
    48 000004ED D3EB                <1>         shr     ebx, cl
    49                              <1> 
    50 000004EF 8B4D10              <1>         mov     ecx, [ebp +16]
    51                              <1> 
    52                              <1> %ifdef	USE_TEST_AND_SET
    53                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    54                              <1> %endif
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; プレーン毎に出力
    58                              <1> 		;---------------------------------------
    59 000004F2 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
    59 000004FB C404                <1>
    60 000004FD 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
    60 00000506 C404                <1>
    61 00000508 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    61 00000511 FF6683C410          <1>
    62                              <1> 
    63 00000516 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
    63 0000051F C404                <1>
    64 00000521 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
    64 0000052A C404                <1>
    65 0000052C 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    65 00000535 FF6683C410          <1>
    66                              <1> 
    67 0000053A 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
    67 00000543 C404                <1>
    68 00000545 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
    68 0000054E C404                <1>
    69 00000550 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    69 00000559 FF6683C410          <1>
    70                              <1> 
    71 0000055E 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
    71 00000567 C404                <1>
    72 00000569 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
    72 00000572 C404                <1>
    73 00000574 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    73 0000057D FF6683C410          <1>
    74                              <1> 
    75                              <1> 
    76                              <1> %ifdef	USE_TEST_AND_SET
    77                              <1> 		;---------------------------------------
    78                              <1> 		; テストアンドセット
    79                              <1> 		;---------------------------------------
    80                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    81                              <1> %endif
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【レジスタの復帰】
    85                              <1> 		;---------------------------------------
    86 00000582 5F                  <1> 		pop		edi
    87 00000583 59                  <1> 		pop		ecx
    88 00000584 5B                  <1> 		pop		ebx
    89 00000585 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 00000586 89EC                <1> 		mov		esp, ebp
    95 00000588 5D                  <1> 		pop		ebp
    96                              <1> 
    97 00000589 C3                  <1> 		ret
    98                              <1> 
    89                                  %include	"../modules/protect/draw_line.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	直線の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_line:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ---------------
    20                              <1> 												;    +24| 色
    21                              <1> 												;    +20| Y1
    22                              <1> 												;    +16| X1
    23                              <1> 												;    +12| Y0
    24                              <1> 												;    + 8| X0
    25                              <1> 												; ---------------
    26 0000058A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 0000058B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ---------------
    29 0000058D 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
    30 0000058F 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
    31 00000591 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
    32 00000593 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
    33 00000595 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
    34 00000597 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
    35 00000599 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
    36                              <1> 												; ------|--------
    37                              <1> 
    38                              <1> 		;---------------------------------------
    39                              <1> 		; 【レジスタの保存】
    40                              <1> 		;---------------------------------------
    41 0000059B 50                  <1> 		push	eax
    42 0000059C 53                  <1> 		push	ebx
    43 0000059D 51                  <1> 		push	ecx
    44 0000059E 52                  <1> 		push	edx
    45 0000059F 56                  <1> 		push	esi
    46 000005A0 57                  <1> 		push	edi
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 幅を計算（X軸）
    50                              <1> 		;---------------------------------------
    51 000005A1 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    52 000005A4 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
    53 000005A7 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
    54 000005A9 7D09                <1> 		jge		.10F							; if (幅 < 0)
    55                              <1> 												; {
    56 000005AB F7DB                <1> 		neg		ebx								;   幅   *= -1;
    57 000005AD BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
    58 000005B2 EB05                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61 000005B4 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
    62                              <1> .10E:											; }
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 高さを計算（Y軸）
    66                              <1> 		;---------------------------------------
    67 000005B9 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
    68 000005BC 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
    69 000005BF 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
    70 000005C1 7D09                <1> 		jge		.20F							; if (高さ < 0)
    71                              <1> 												; {
    72 000005C3 F7DA                <1> 		neg		edx								;   高さ *= -1;
    73 000005C5 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
    74 000005CA EB05                <1> 		jmp		.20E							; }
    75                              <1> .20F:											; else
    76                              <1> 												; {
    77 000005CC BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
    78                              <1> .20E:											; }
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; X軸
    82                              <1> 		;---------------------------------------
    83 000005D1 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
    84 000005D4 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
    85 000005D7 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; Y軸
    89                              <1> 		;---------------------------------------
    90 000005DA 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
    91 000005DD 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
    92 000005E0 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 基準軸を決める
    96                              <1> 		;---------------------------------------
    97 000005E3 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
    98 000005E5 7F08                <1> 		jg		.22F							; {
    99                              <1> 												;   
   100 000005E7 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   101 000005EA 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   102                              <1> 												;   
   103 000005ED EB06                <1> 		jmp		.22E							; }
   104                              <1> .22F:											; else
   105                              <1> 												; {
   106 000005EF 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   107 000005F2 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   108                              <1> .22E:											; }
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 繰り返し回数(基準軸のドット数)
   112                              <1> 		;---------------------------------------
   113 000005F5 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   114 000005F8 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   115 000005FB 7505                <1> 		jnz		.30E							; {
   116 000005FD B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   117                              <1> .30E:											; }
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 線を描画
   121                              <1> 		;---------------------------------------
   122                              <1> .50L:											; do
   123                              <1> 												; {
   124                              <1> %ifdef	USE_SYSTEM_CALL
   125                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   126                              <1> 
   127                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   128                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   129                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   130                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   131                              <1> 
   132                              <1> 		mov		ecx, eax
   133                              <1> %else
   136 00000602 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   136 0000060B E8B7FEFFFF6683C40C  <1>
   137                              <1> %endif
   138                              <1> 												;   // 基準軸を更新(1ドット分)
   139 00000614 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   140 00000617 0106                <1> 		add		[esi - 0], eax					;   
   141                              <1> 
   142                              <1> 												;   // 相対軸を更新
   143 00000619 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   144 0000061C 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   145 0000061F 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   146                              <1> 
   147 00000622 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   148 00000624 7C07                <1> 		jl		.52E							;   {
   149 00000626 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   150                              <1> 												;     
   151                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   152 00000628 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   153 0000062B 011F                <1> 		add		[edi - 0], ebx					;     
   154                              <1> .52E:											;   }
   155 0000062D 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   156                              <1> 												;   
   157 00000630 E2D0                <1> 		loop	.50L							;   
   158                              <1> .50E:											; } while (ループ回数--);
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【レジスタの復帰】
   162                              <1> 		;---------------------------------------
   163 00000632 5F                  <1> 		pop		edi
   164 00000633 5E                  <1> 		pop		esi
   165 00000634 5A                  <1> 		pop		edx
   166 00000635 59                  <1> 		pop		ecx
   167 00000636 5B                  <1> 		pop		ebx
   168 00000637 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 00000638 89EC                <1> 		mov		esp, ebp
   174 0000063A 5D                  <1> 		pop		ebp
   175                              <1> 
   176 0000063B C3                  <1> 		ret
   177                              <1> 
    90                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	矩形の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_rect:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ------|--------
    20                              <1> 												; EBP+24| 色
    21                              <1> 												; EBP+20| Y1
    22                              <1> 												; EBP+16| X1
    23                              <1> 												; EBP+12| Y0
    24                              <1> 												; EBP+ 8| X0
    25                              <1> 												; ---------------
    26 0000063C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 0000063D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ------|--------
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; 【レジスタの保存】
    32                              <1> 		;---------------------------------------
    33 0000063F 50                  <1> 		push		eax
    34 00000640 53                  <1> 		push		ebx
    35 00000641 51                  <1> 		push		ecx
    36 00000642 52                  <1> 		push		edx
    37 00000643 56                  <1> 		push		esi
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; 矩形を描画
    41                              <1> 		;---------------------------------------
    42 00000644 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    43 00000647 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
    44 0000064A 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
    45 0000064D 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
    46 00000650 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 座標軸の大小を確定
    50                              <1> 		;---------------------------------------
    51 00000653 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
    52 00000655 7C01                <1> 		jl		.10E							; {
    53 00000657 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
    54                              <1> .10E:											; }
    55                              <1> 
    56 00000658 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
    57 0000065A 7C02                <1> 		jl		.20E							; {
    58 0000065C 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
    59                              <1> .20E:											; }
    60                              <1> 
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 矩形を描画
    63                              <1> 		;---------------------------------------
    64 0000065E 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
    64 00000667 FF6683C414          <1>
    65 0000066C 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
    65 00000675 FF6683C414          <1>
    66                              <1> 
    67 0000067A 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
    68 0000067B 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
    68 00000684 FF6683C414          <1>
    69 00000689 42                  <1> 		inc		edx
    70                              <1> 
    71 0000068A 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
    72 0000068B 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
    72 00000694 FF6683C414          <1>
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 00000699 5E                  <1> 		pop		esi
    78 0000069A 5A                  <1> 		pop		edx
    79 0000069B 59                  <1> 		pop		ecx
    80 0000069C 5B                  <1> 		pop		ebx
    81 0000069D 58                  <1> 		pop		eax
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの破棄】
    85                              <1> 		;---------------------------------------
    86 0000069E 89EC                <1> 		mov		esp, ebp
    87 000006A0 5D                  <1> 		pop		ebp
    88                              <1> 
    89 000006A1 C3                  <1> 		ret
    90                              <1> 
    91                                  %include	"../modules/protect/itoa.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	数値を文字に変換
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	num		: 変換する数値
     8                              <1> ;	buff	: 保存先バッファアドレス
     9                              <1> ;	size	: 保存先バッファサイズ
    10                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    11                              <1> ;	flags	: フラグ
    12                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    13                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    14                              <1> ;			:   B1 : 1=＋/-符号を表示する
    15                              <1> ;			:      : 0=＋/-符号を表示しない
    16                              <1> ;			:   B0 : 1=符号付き正数として扱う
    17                              <1> ;			:      : 0=符号無し正数として扱う
    18                              <1> ;
    19                              <1> ;■戻り値	: 無し
    20                              <1> ;************************************************************************
    21                              <1> itoa:
    22                              <1> 		;---------------------------------------
    23                              <1> 		; 【スタックフレームの構築】
    24                              <1> 		;---------------------------------------
    25                              <1> 												; ------|--------
    26                              <1> 												;    +24| フラグ
    27                              <1> 												;    +20| 基数
    28                              <1> 												;    +16| バッファサイズ
    29                              <1> 												;    +12| バッファアドレス
    30                              <1> 												;    + 8| 数値
    31                              <1> 												; ------|--------
    32                              <1> 												;    + 4| EIP（戻り番地）
    33 000006A2 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    34 000006A3 89E5                <1> 		mov		ebp, esp						; ------+--------
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの保存】
    38                              <1> 		;---------------------------------------
    39 000006A5 50                  <1> 		push	eax
    40 000006A6 53                  <1> 		push	ebx
    41 000006A7 51                  <1> 		push	ecx
    42 000006A8 52                  <1> 		push	edx
    43 000006A9 56                  <1> 		push	esi
    44 000006AA 57                  <1> 		push	edi
    45                              <1> 
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 引数を取得
    48                              <1> 		;---------------------------------------
    49 000006AB 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
    50 000006AE 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
    51 000006B1 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
    52                              <1> 
    53 000006B4 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
    54 000006B6 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
    55 000006B8 4F                  <1> 		dec		edi								; 
    56                              <1> 
    57 000006B9 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
    58                              <1> 
    59                              <1> 		;---------------------------------------
    60                              <1> 		; 符号付き判定
    61                              <1> 		;---------------------------------------
    62 000006BC F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
    63 000006C2 7408                <1> .10Q:	je		.10E							; {
    64 000006C4 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    65 000006C7 7D03                <1> .12Q:	jge		.12E							;   {
    66 000006C9 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
    67                              <1> .12E:											;   }
    68                              <1> .10E:											; }
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 符号出力判定
    72                              <1> 		;---------------------------------------
    73 000006CC F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
    74 000006D2 7410                <1> .20Q:	je		.20E							; {
    75 000006D4 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    76 000006D7 7D07                <1> .22Q:	jge		.22F							;   {
    77 000006D9 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
    78 000006DB C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
    79 000006DE EB03                <1> 		jmp		.22E							;   }
    80                              <1> .22F:											;   else
    81                              <1> 												;   {
    82 000006E0 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
    83                              <1> .22E:											;   }
    84 000006E3 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
    85                              <1> .20E:											; }
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; ASCII変換
    89                              <1> 		;---------------------------------------
    90 000006E4 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
    91                              <1> .30L:											; do
    92                              <1> 												; {
    93 000006E7 BA00000000          <1> 		mov		edx, 0							;   
    94 000006EC F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
    95                              <1> 												;   AX = DX:AX / 基数;
    96                              <1> 												;   
    97 000006EE 89D6                <1> 		mov		esi, edx						;   // テーブル参照
    98 000006F0 8A96[1B070000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
    99                              <1> 												;   
   100 000006F6 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   101 000006F8 4F                  <1> 		dec		edi								;   dst--;
   102                              <1> 												;   
   103 000006F9 83F800              <1> 		cmp		eax, 0							;   
   104 000006FC E0E9                <1> 		loopnz	.30L							; } while (AX);
   105                              <1> .30E:
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 空欄を埋める
   109                              <1> 		;---------------------------------------
   110 000006FE 83F900              <1> 		cmp		ecx, 0							; if (size)
   111 00000701 740E                <1> .40Q:	je		.40E							; {
   112 00000703 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   113 00000705 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   114 0000070A 7502                <1> .42Q:	jne		.42E							;   {
   115 0000070C B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   116                              <1> .42E:											;   }
   117 0000070E FD                  <1> 		std										;   // DF = 1（-方向）
   118 0000070F F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   119                              <1> .40E:											; }
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの復帰】
   123                              <1> 		;---------------------------------------
   124 00000711 5F                  <1> 		pop		edi
   125 00000712 5E                  <1> 		pop		esi
   126 00000713 5A                  <1> 		pop		edx
   127 00000714 59                  <1> 		pop		ecx
   128 00000715 5B                  <1> 		pop		ebx
   129 00000716 58                  <1> 		pop		eax
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの破棄】
   133                              <1> 		;---------------------------------------
   134 00000717 89EC                <1> 		mov		esp, ebp
   135 00000719 5D                  <1> 		pop		ebp
   136                              <1> 
   137 0000071A C3                  <1> 		ret
   138                              <1> 
   139 0000071B 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   139 00000724 39414243444546      <1>
   140                              <1> 
    92                                  %include	"../modules/protect/rtc.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD rtc_get_time(dst);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	dst		: 保存先アドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    10                              <1> ;************************************************************************
    11                              <1> rtc_get_time:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; ------|--------
    16                              <1> 												; EBP+ 8| 保存先アドレス
    17                              <1> 												; ---------------
    18 0000072B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    19 0000072C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    20                              <1> 												; ---------------
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000072E 53                  <1> 		push	ebx
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; RTCから時刻を取得
    28                              <1> 		;---------------------------------------
    29 0000072F B00A                <1> 		mov		al, 0x0A						; // レジスタA
    30 00000731 E670                <1> 		out		0x70, al						; outp(0x70, AL);
    31 00000733 E471                <1> 		in		al, 0x71						; AL = レジスタA;
    32 00000735 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
    33 00000737 7407                <1> 		je		.10F							; {
    34 00000739 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
    35 0000073E EB27                <1> 		jmp		.10E							; }
    36                              <1> .10F:											; else
    37                              <1> 												; {
    38                              <1> 												;   // RAM[0x04]:時
    39 00000740 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
    40 00000742 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    41 00000744 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
    42                              <1> 												;   
    43 00000746 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    44                              <1> 												;   
    45                              <1> 												;   // RAM[0x02]:分
    46 00000749 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
    47 0000074B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    48 0000074D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
    49                              <1> 												;   
    50 0000074F C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    51                              <1> 												;   
    52                              <1> 												;   // RAM[0x00]:秒
    53 00000752 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
    54 00000754 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    55 00000756 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
    56                              <1> 												;   
    57 00000758 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
    58                              <1> 												;   
    59 0000075D 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
    60 00000760 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
    61                              <1> 												;   
    62 00000762 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
    63                              <1> .10E:											; }
    64                              <1> 
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 【レジスタの復帰】
    67                              <1> 		;---------------------------------------
    68 00000767 5B                  <1> 		pop		ebx
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【スタックフレームの破棄】
    72                              <1> 		;---------------------------------------
    73 00000768 89EC                <1> 		mov		esp, ebp
    74 0000076A 5D                  <1> 		pop		ebp
    75                              <1> 
    76 0000076B C3                  <1> 		ret
    77                              <1> 
    93                                  %include	"../modules/protect/draw_time.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	時刻の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_time(col, row, color, time);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	time	: 時刻データ
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_time:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| 時刻データ
    20                              <1> 												; EBP+16| 色
    21                              <1> 												; EBP+12| Y（行）
    22                              <1> 												; EBP+ 8| X（列）
    23                              <1> 												; ---------------
    24 0000076C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    25 0000076D 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
    26                              <1> 												; ---------------
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの保存】
    29                              <1> 		;---------------------------------------
    30 0000076F 50                  <1> 		push	eax
    31 00000770 53                  <1> 		push	ebx
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 
    35                              <1> 		;---------------------------------------
    36 00000771 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
    37 00000774 3B05[F2070000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
    38 0000077A 7467                <1> 		je		.10E							; {
    39                              <1> 												;   
    40 0000077C A3[F2070000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
    41                              <1> 												;   
    42 00000781 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
    43 00000786 88C3                <1> 		mov		bl, al							;   EBX = 秒;
    44 00000788 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
    44 0000078F [00080000]53E809FF- <1>
    44 00000797 FFFF6683C414        <1>
    45                              <1> 
    46 0000079D 88E3                <1> 		mov		bl, ah							;   EBX = 分;
    47 0000079F 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
    47 000007A6 [FD070000]53E8F2FE- <1>
    47 000007AE FFFF6683C414        <1>
    48                              <1> 
    49 000007B4 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
    50 000007B7 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
    50 000007BE [FA070000]50E8DAFE- <1>
    50 000007C6 FFFF6683C414        <1>
    51                              <1> 
    52                              <1> 												;   // 時刻を表示
    53 000007CC 68[FA070000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    53 000007D4 FF750CFF7508E825FC- <1>
    53 000007DD FFFF6683C410        <1>
    54                              <1> 												;     
    55                              <1> 												;   }
    56                              <1> .10E:											; }
    57                              <1> 
    58                              <1> 		;---------------------------------------
    59                              <1> 		; 【レジスタの復帰】
    60                              <1> 		;---------------------------------------
    61 000007E3 5B                  <1> 		pop		ebx
    62 000007E4 58                  <1> 		pop		eax
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 【スタックフレームの破棄】
    66                              <1> 		;---------------------------------------
    67 000007E5 89EC                <1> 		mov		esp, ebp
    68 000007E7 5D                  <1> 		pop		ebp
    69                              <1> 
    70 000007E8 C3                  <1> 		ret
    71                              <1> 
    72 000007E9 00                  <1> ALIGN 2, db 0
    73 000007EA 0000000000000000    <1> .temp:	dq	0
    74 000007F2 0000000000000000    <1> .last:	dq	0
    75 000007FA 5A5A3A              <1> .hour:	db	"ZZ:"
    76 000007FD 5A5A3A              <1> .min:	db	"ZZ:"
    77 00000800 5A5A00              <1> .sec:	db	"ZZ", 0
    94                                  
    95                                  ; パディング
    96                                  
    97 00000803 00<rept>                    times KERNEL_SIZE - ($ - $$) db 0x00
    98                                      
