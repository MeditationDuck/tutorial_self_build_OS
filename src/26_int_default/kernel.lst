     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  ;************************************************************************
     8                                  ;	マクロ
     9                                  ;************************************************************************
    10                                  %include	"../include/define.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	メモリイメージ
     3                              <1> ;************************************************************************
     4                              <1> 
     5                              <1> 		;---------------------------------------
     6                              <1> 		;           |            | 
     7                              <1> 		;           |____________| 
     8                              <1> 		; 0000_7A00 |            | ( 512) スタック
     9                              <1> 		;           |____________| 
    10                              <1> 		; 0000_7C00 |            | (  8K) ブート
    11                              <1> 		;           =            = 
    12                              <1> 		;           |____________| 
    13                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    14                              <1> 		;           =            = 
    15                              <1> 		;           |____________| 
    16                              <1> 		; 0000_BC00 |////////////| 
    17                              <1> 		;           =            = 
    18                              <1> 		;           |____________| 
    19                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    24                              <1> 		;           |            | 
    25                              <1> 		;           =            = 
    26                              <1> 		;           |____________| 
    27                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    28                              <1> 		;           |            | （各タスク1K）
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_5000 |            | Dir
    32                              <1> 		;      6000 |____________| Page
    33                              <1> 		; 0010_7000 |            | Dir
    34                              <1> 		;      8000 |____________| Page
    35                              <1> 		; 0010_9000 |////////////| 
    36                              <1> 		;           |            | 
    37                              <1> 
    38                              <1> 		BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    39                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    40                              <1> 
    41                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    42                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    43                              <1> 
    44                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    45                              <1> 
    46                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    47                              <1> 
    48                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    49                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    50                              <1> 
    51                              <1> 		E820_RECORD_SIZE	equ		20
    52                              <1> 
    53                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    54                              <1> 
    55                              <1> 
    56                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    57                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    58                              <1> 
    59                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    60                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    61                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    62                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    63                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    64                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    65                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    66                              <1> 
    67                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    68                              <1> 
    69                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    70                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    71                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    72                              <1> 
    73                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    74                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    75                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    76                              <1> 
    77                              <1> 
    78                              <1> ;************************************************************************
    79                              <1> ;	ディスクイメージ
    80                              <1> ;************************************************************************
    81                              <1> 		;(SECT/SUM)  file img                 
    82                              <1> 		;                       ____________  
    83                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    84                              <1> 		;                      =            = 
    85                              <1> 		;                      |____________| 
    86                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
    87                              <1> 		;                      =            = 
    88                              <1> 		;                      |____________| 
    89                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
    90                              <1> 		;                      |            | 
    91                              <1> 		;                      |            | 
    92                              <1> 		;                      =            = 
    93                              <1> 		;                      |____________| 
    94                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
    95                              <1> 		;                      |            | 
    96                              <1> 		;                      |            | 
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   100                              <1> 		;                      |            | (32セクタ/512エントリ)
   101                              <1> 		;                      =            = 
   102                              <1> 		;                      |____________| 
   103                              <1> 		;(   /576)   0004_8000 |            | データ領域
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |            | 
   107                              <1> 		;                      |____________| 
   108                              <1> 		;(   /640)   0005_0000 |////////////| 
   109                              <1> 		;                      |            | 
   110                              <1> 
   111                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   112                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   113                              <1> 
   114                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   115                              <1> 
   116                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   117                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   118                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   119                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   120                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   121                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   122                              <1> 
   123                              <1> 		; ファイル属性
   124                              <1> 		ATTR_READ_ONLY		equ		0x01
   125                              <1> 		ATTR_HIDDEN			equ		0x02
   126                              <1> 		ATTR_SYSTEM			equ		0x04
   127                              <1> 		ATTR_VOLUME_ID		equ		0x08
   128                              <1> 		ATTR_DIRECTORY		equ		0x10
   129                              <1> 		ATTR_ARCHIVE		equ		0x20
   130                              <1> 
    11                                  %include	"../include/macro.s"
     1                              <1> ;************************************************************************
     2                              <1> ; 関数呼び出し用マクロ
     3                              <1> ;
     4                              <1> ; 使い方：
     5                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
     6                              <1> ;
     7                              <1> ;************************************************************************
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1> 	%rep  %0 - 1
    11                              <1> 		push	%{-1:-1}
    12                              <1> 		%rotate -1
    13                              <1> 	%endrep 
    14                              <1> 	%rotate -1
    15                              <1> 
    16                              <1> 		call	%1
    17                              <1> 
    18                              <1> 	%if 1 < %0
    19                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1> 	%endif
    21                              <1> 
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> ;************************************************************************
    25                              <1> ; 割り込みベクタ設定用
    26                              <1> ;
    27                              <1> ; 使い方：
    28                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    29                              <1> ;
    30                              <1> ;************************************************************************
    31                              <1> %macro  set_vect 1-*.nolist
    32                              <1> 		push	eax
    33                              <1> 		push	edi
    34                              <1> 
    35                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    36                              <1> 		mov		eax, %2
    37                              <1> 
    38                              <1> 	%if 3 == %0
    39                              <1> 		mov		[edi + 4], %3					; フラグ
    40                              <1> 	%endif
    41                              <1> 
    42                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    43                              <1> 		shr		eax, 16							; 
    44                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    45                              <1> 
    46                              <1> 		pop		edi
    47                              <1> 		pop		eax
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ; ポート出力用
    52                              <1> ;
    53                              <1> ; 使い方：
    54                              <1> ;	outp	ポート番号, 出力値
    55                              <1> ;
    56                              <1> ;************************************************************************
    57                              <1> %macro  outp 2
    58                              <1> 		mov		al, %2
    59                              <1> 		out		%1, al
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> ;************************************************************************
    63                              <1> ; ディスクリプタの情報を設定
    64                              <1> ;
    65                              <1> ; 使い方：
    66                              <1> ;	set_desc	ディスクリプタ, ベース
    67                              <1> ;
    68                              <1> ;************************************************************************
    69                              <1> %macro  set_desc 2-* 
    70                              <1> 		push	eax
    71                              <1> 		push	edi
    72                              <1> 
    73                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    74                              <1> 		mov		eax, %2							; ベースアドレス
    75                              <1> 
    76                              <1> 	%if 3 == %0
    77                              <1> 		mov		[edi + 0], %3					; リミット
    78                              <1> 	%endif
    79                              <1> 
    80                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    81                              <1> 		shr		eax, 16							; 
    82                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    83                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    84                              <1> 
    85                              <1> 		pop		edi
    86                              <1> 		pop		eax
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;************************************************************************
    90                              <1> ; ゲートディスクリプタのオフセットを設定
    91                              <1> ;
    92                              <1> ; 使い方：
    93                              <1> ;	set_gate	ディスクリプタ, オフセット
    94                              <1> ;
    95                              <1> ;************************************************************************
    96                              <1> %macro  set_gate 2-* 
    97                              <1> 		push	eax
    98                              <1> 		push	edi
    99                              <1> 
   100                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   101                              <1> 		mov		eax, %2							; ベースアドレス
   102                              <1> 
   103                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   104                              <1> 		shr		eax, 16							; 
   105                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   106                              <1> 
   107                              <1> 		pop		edi
   108                              <1> 		pop		eax
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> ;************************************************************************
   112                              <1> ;	構造体
   113                              <1> ;************************************************************************
   114                              <1> 
   115                              <1> ;-----------------------------------------------
   116                              <1> ;	ドライブパラメータ
   117                              <1> ;-----------------------------------------------
   118                              <1> struc drive
   119 00000000 <res 00000002>      <1> 		.no				resw	1				; ドライブ番号
   120 00000002 <res 00000002>      <1> 		.cyln			resw	1				; C:シリンダ
   121 00000004 <res 00000002>      <1> 		.head			resw	1				; H:ヘッド
   122 00000006 <res 00000002>      <1> 		.sect			resw	1				; S:セクタ
   123                              <1> endstruc
   124                              <1> 
   125                              <1> ;-----------------------------------------------
   126                              <1> ;	リングバッファ
   127                              <1> ;-----------------------------------------------
   128                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   129                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   130                              <1> 
   131                              <1> struc ring_buff
   132 00000000 <res 00000004>      <1> 		.rp				resd	1				; RP:書き込み位置
   133 00000004 <res 00000004>      <1> 		.wp				resd	1				; WP:読み込み位置
   134 00000008 <res 00000010>      <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;-----------------------------------------------
   138                              <1> ;	バラ曲線描画パラメータ
   139                              <1> ;-----------------------------------------------
   140                              <1> struc rose
   141 00000000 <res 00000004>      <1> 		.x0				resd	1				; 左上座標：X0
   142 00000004 <res 00000004>      <1> 		.y0				resd	1				; 左上座標：Y0
   143 00000008 <res 00000004>      <1> 		.x1				resd	1				; 右下座標：X1
   144 0000000C <res 00000004>      <1> 		.y1				resd	1				; 右下座標：Y1
   145                              <1> 
   146 00000010 <res 00000004>      <1> 		.n				resd	1				; 変数：n
   147 00000014 <res 00000004>      <1> 		.d				resd	1				; 変数：d
   148                              <1> 
   149 00000018 <res 00000004>      <1> 		.color_x		resd	1				; 描画色：X軸
   150 0000001C <res 00000004>      <1> 		.color_y		resd	1				; 描画色：Y軸
   151 00000020 <res 00000004>      <1> 		.color_z		resd	1				; 描画色：枠
   152 00000024 <res 00000004>      <1> 		.color_s		resd	1				; 描画色：文字
   153 00000028 <res 00000004>      <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   154 0000002C <res 00000004>      <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   155                              <1> 
   156 00000030 <res 00000010>      <1> 		.title			resb	16				; タイトル
   157                              <1> endstruc
   158                              <1> 
    12                                  
    13                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    14                                  
    15                                  [BITS 32]
    16                                  ;************************************************************************
    17                                  ;	エントリポイント
    18                                  ;************************************************************************
    19                                  kernel:
    20                                  		;---------------------------------------
    21                                  		; フォントアドレスを取得
    22                                  		;---------------------------------------
    23 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    24 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    25 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    26 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    27 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    28 00000011 A3[90000000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    29                                  
    30                                  		;---------------------------------------
    31                                  		; フォントの一覧表示
    32                                  		;---------------------------------------
    33 00000016 6A0D6A3FE8F0010000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
    33 0000001F 6683C408           
    34 00000023 6A046A3FE871020000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
    34 0000002C 6683C408           
    35                                  
    36                                  		;---------------------------------------
    37                                  		; 文字列の表示
    38                                  		;---------------------------------------
    39 00000030 68[7E000000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
    39 00000038 00006A0E6A19E81102-
    39 00000041 00006683C410       
    40                                  
    41                                  		;---------------------------------------
    42                                  		; 割り込み処理の呼び出し
    43                                  		;---------------------------------------
    44 00000047 6844332211              		push	0x11223344						; （ダミー）
    45 0000004C 9C                      		pushf									; EFLAGSの保存
    46 0000004D 9A[53060000]0800        		call	0x0008:int_default				; デフォルト割り込み処理の呼び出し
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 時刻の表示
    50                                  		;---------------------------------------
    51                                  .10L:											; do
    52                                  												; {
    53 00000054 68[94000000]E81D05-     		cdecl	rtc_get_time, RTC_TIME			;   EAX = get_time(&RTC_TIME);
    53 0000005C 00006683C404       
    55 00000062 FF35[94000000]6800-     		cdecl	draw_time, 72, 0, 0x0700,									dword [RTC_TIME]
    55 0000006A 0700006A006A48E846-
    55 00000073 0500006683C410     
    56 0000007A EBD8                    		jmp		.10L							; } while (1);
    57                                  
    58                                  		;---------------------------------------
    59                                  		; 処理の終了
    60                                  		;---------------------------------------
    61 0000007C EBFE                    		jmp		$								; while (1) ; // 無限ループ
    62                                  
    63 0000007E 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
    63 00000087 65726E656C212000   
    64                                  
    65 0000008F 00                      ALIGN 4, db 0
    66 00000090 00000000                FONT_ADR:	dd	0
    67 00000094 00000000                RTC_TIME:	dd	0
    68                                  
    69                                  ;************************************************************************
    70                                  ;	モジュール
    71                                  ;************************************************************************
    72                                  %include	"../modules/protect/vga.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	読み込みプレーンの選択
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void vga_set_read_plane(plane);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	plane	: 読み込みプレーン
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> vga_set_read_plane:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| プレーン（インデックス）
    16                              <1> 												; ------+----------------
    17 00000098 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 00000099 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000009B 50                  <1> 		push	eax
    25 0000009C 52                  <1> 		push	edx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 読み込みプレーンの選択
    29                              <1> 		;---------------------------------------
    30 0000009D 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    31 000000A0 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    32 000000A3 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    33 000000A5 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    34 000000A9 66EF                <1> 		out		dx, ax							; // ポート出力
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの復帰】
    38                              <1> 		;---------------------------------------
    39 000000AB 5A                  <1> 		pop		edx
    40 000000AC 58                  <1> 		pop		eax
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 【スタックフレームの破棄】
    44                              <1> 		;---------------------------------------
    45 000000AD 89EC                <1> 		mov		esp, ebp
    46 000000AF 5D                  <1> 		pop		ebp
    47                              <1> 
    48 000000B0 C3                  <1> 		ret
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ;	書き込みプレーンを選択
    52                              <1> ;========================================================================
    53                              <1> ;■書式		: void vga_set_write_plane(plane);
    54                              <1> ;
    55                              <1> ;■引数
    56                              <1> ;	plane	: 書き込みプレーン
    57                              <1> ;
    58                              <1> ;■戻り値	: 無し
    59                              <1> ;************************************************************************
    60                              <1> vga_set_write_plane:
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 【スタックフレームの構築】
    63                              <1> 		;---------------------------------------
    64                              <1> 												; EBP+ 8| プレーン（ビット指定）
    65                              <1> 												; ------+----------------
    66 000000B1 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    67 000000B2 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    68                              <1> 												; ------+----------------
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【レジスタの保存】
    72                              <1> 		;---------------------------------------
    73 000000B4 50                  <1> 		push	eax
    74 000000B5 52                  <1> 		push	edx
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 書き込みプレーンの選択
    78                              <1> 		;---------------------------------------
    79 000000B6 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
    80 000000B9 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
    81 000000BC B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
    82 000000BE 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
    83 000000C2 66EF                <1> 		out		dx, ax							; // ポート出力
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの復帰】
    87                              <1> 		;---------------------------------------
    88 000000C4 5A                  <1> 		pop		edx
    89 000000C5 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 000000C6 89EC                <1> 		mov		esp, ebp
    95 000000C8 5D                  <1> 		pop		ebp
    96                              <1> 
    97 000000C9 C3                  <1> 		ret
    98                              <1> 
    99                              <1> ;************************************************************************
   100                              <1> ;	フォントの書き込み
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	font	: FONTアドレス
   106                              <1> ;	vram	: VRAMアドレス
   107                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vram_font_copy:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+20| 色（背景/前景色）
   117                              <1> 												; EBP+16| プレーン（ビット指定）
   118                              <1> 												; EBP+12| VRAMアドレス
   119                              <1> 												; EBP+ 8| FONTアドレス
   120                              <1> 												; ------+----------------
   121 000000CA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 000000CB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 000000CD 50                  <1> 		push	eax
   129 000000CE 53                  <1> 		push	ebx
   130 000000CF 51                  <1> 		push	ecx
   131 000000D0 52                  <1> 		push	edx
   132 000000D1 56                  <1> 		push	esi
   133 000000D2 57                  <1> 		push	edi
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 000000D3 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   139 000000D6 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   140 000000D9 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   141 000000DD 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   142                              <1> 
   143 000000E1 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   144 000000E3 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   145 000000E6 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   146                              <1> 
   147 000000E8 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   148 000000EA 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   149 000000ED FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 16ドットフォントのコピー
   153                              <1> 		;---------------------------------------
   154 000000EF FC                  <1> 		cld										; DF  = 0; // アドレス加算
   155                              <1> 
   156 000000F0 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159                              <1> 		;---------------------------------------
   160                              <1> 		; フォントマスクの作成
   161                              <1> 		;---------------------------------------
   162 000000F5 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   163 000000F6 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   164 000000F8 F6D4                <1> 		not		ah								;   
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 前景色
   168                              <1> 		;---------------------------------------
   169 000000FA 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 背景色
   173                              <1> 		;---------------------------------------
   174 000000FC F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   175 00000102 7404                <1> 		jz		.11F							;   {
   176 00000104 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   177 00000106 EB02                <1> 		jmp		.11E							;   }
   178                              <1> .11F:											;   else
   179                              <1> 												;   {
   180 00000108 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   181                              <1> .11E:											;   }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 前景色と背景色を合成
   185                              <1> 		;---------------------------------------
   186 0000010A 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 新しい値を出力
   190                              <1> 		;---------------------------------------
   191 0000010C 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   192                              <1> 
   193 0000010E 83C750              <1> 		add		edi, 80							;   EDI += 80;
   194 00000111 E2E2                <1> 		loop	.10L							; } while (--ECX);
   195                              <1> .10E:											; 
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000113 5F                  <1> 		pop		edi
   201 00000114 5E                  <1> 		pop		esi
   202 00000115 5A                  <1> 		pop		edx
   203 00000116 59                  <1> 		pop		ecx
   204 00000117 5B                  <1> 		pop		ebx
   205 00000118 58                  <1> 		pop		eax
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 00000119 89EC                <1> 		mov		esp, ebp
   211 0000011B 5D                  <1> 		pop		ebp
   212                              <1> 
   213 0000011C C3                  <1> 		ret
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	ビットパターンの書き込み
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	bit		: 出力ビットパターン
   222                              <1> ;	vram	: VRAMアドレス
   223                              <1> ;	flag	: 1:セット, 0:クリア
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vram_bit_copy:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+20| 色（背景/前景色）
   232                              <1> 												; EBP+16| プレーン（ビット指定）
   233                              <1> 												; EBP+12| VRAMアドレス
   234                              <1> 												; EBP+ 8| 出力ビットパターン
   235                              <1> 												; ------+----------------
   236 0000011D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 0000011E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 00000120 50                  <1> 		push	eax
   244 00000121 53                  <1> 		push	ebx
   245 00000122 57                  <1> 		push	edi
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【処理の開始】
   249                              <1> 		;---------------------------------------
   250 00000123 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   251 00000126 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   252 0000012A 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   253                              <1> 
   254 0000012E 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   255 00000130 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   256 00000133 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; マスクデータの作成
   260                              <1> 		;---------------------------------------
   261 00000135 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   262 00000138 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   263 0000013A F6D4                <1> 		not		ah								; 
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 現在値の出力を取得
   267                              <1> 		;---------------------------------------
   268 0000013C 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   269 0000013E 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   270 00000140 08E0                <1> 		or		al, ah							; AL |= AH;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 新しい値を出力
   274                              <1> 		;---------------------------------------
   275 00000142 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【レジスタの復帰】
   279                              <1> 		;---------------------------------------
   280 00000144 5F                  <1> 		pop		edi
   281 00000145 5B                  <1> 		pop		ebx
   282 00000146 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 00000147 89EC                <1> 		mov		esp, ebp
   288 00000149 5D                  <1> 		pop		ebp
   289                              <1> 
   290 0000014A C3                  <1> 		ret
   291                              <1> 
    73                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+20| 文字
     7                              <1> 												; EBP+16| 色
     8                              <1> 												; EBP+12| Y（行）
     9                              <1> 												; EBP+ 8| X（列）
    10                              <1> 												; ------+----------------
    11 0000014B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    12 0000014C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    13                              <1> 												; ------+----------------
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 0000014E 50                  <1> 		push	eax
    19 0000014F 53                  <1> 		push	ebx
    20 00000150 51                  <1> 		push	ecx
    21 00000151 52                  <1> 		push	edx
    22 00000152 56                  <1> 		push	esi
    23 00000153 57                  <1> 		push	edi
    24                              <1> 		;---------------------------------------
    25                              <1> 		; テストアンドセット
    26                              <1> 		;---------------------------------------
    27                              <1> %ifdef	USE_TEST_AND_SET
    28                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    29                              <1> %endif
    30                              <1> 
    31                              <1>         ;コピー元のアドレスを取得
    32 00000154 0FB67514            <1>         movzx   esi, byte [ebp +20]
    33 00000158 C1E604              <1>         shl     esi, 4
    34 0000015B 0335[90000000]      <1>         add     esi, [FONT_ADR]
    35                              <1> 
    36                              <1>         ;コピー先のアドレスを取得
    37 00000161 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000164 C1E708              <1>         shl     edi, 8
    39 00000167 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]
    40 0000016E 037D08              <1>         add     edi, [ebp + 8]
    41                              <1> 
    42                              <1>         ;一文字分のフォントを出力
    43 00000171 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
    44                              <1> 
    45 00000175 6A03E81CFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
    45 0000017E C404                <1>
    46 00000180 6A08E82AFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
    46 00000189 C404                <1>
    47 0000018B 536A085756E835FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    47 00000194 FF6683C410          <1>
    48                              <1> 
    49 00000199 6A02E8F8FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
    49 000001A2 C404                <1>
    50 000001A4 6A04E806FFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
    50 000001AD C404                <1>
    51 000001AF 536A045756E811FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 000001B8 FF6683C410          <1>
    52                              <1> 
    53 000001BD 6A01E8D4FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
    53 000001C6 C404                <1>
    54 000001C8 6A02E8E2FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
    54 000001D1 C404                <1>
    55 000001D3 536A025756E8EDFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 000001DC FF6683C410          <1>
    56                              <1> 
    57 000001E1 6A00E8B0FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
    57 000001EA C404                <1>
    58 000001EC 6A01E8BEFEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
    58 000001F5 C404                <1>
    59 000001F7 536A015756E8C9FEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 00000200 FF6683C410          <1>
    60                              <1> 
    61                              <1> %ifdef	USE_TEST_AND_SET
    62                              <1> 		;---------------------------------------
    63                              <1> 		; テストアンドセット
    64                              <1> 		;---------------------------------------
    65                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    66                              <1> %endif
    67                              <1> 
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【レジスタの復帰】
    70                              <1> 		;---------------------------------------
    71 00000205 5F                  <1> 		pop		edi
    72 00000206 5E                  <1> 		pop		esi
    73 00000207 5A                  <1> 		pop		edx
    74 00000208 59                  <1> 		pop		ecx
    75 00000209 5B                  <1> 		pop		ebx
    76 0000020A 58                  <1> 		pop		eax
    77                              <1> 
    78                              <1> 		;---------------------------------------
    79                              <1> 		; 【スタックフレームの破棄】
    80                              <1> 		;---------------------------------------
    81 0000020B 89EC                <1> 		mov		esp, ebp
    82 0000020D 5D                  <1> 		pop		ebp
    83                              <1> 
    84 0000020E C3                  <1> 		ret
    85                              <1> 
    86                              <1> %ifdef USE_TEST_AND_SET
    87                              <1> ALIGN 4, db 0
    88                              <1> IN_USE:	dd	0
    89                              <1> %endif
    90                              <1> 
    74                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+12| Y（行）
     7                              <1> 												; EBP+ 8| X（列）
     8                              <1> 												; ---------------
     9 0000020F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    10 00000210 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    11                              <1> 												; ---------------
    12                              <1> 
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 00000212 50                  <1> 		push	eax
    17 00000213 53                  <1> 		push	ebx
    18 00000214 51                  <1> 		push	ecx
    19 00000215 52                  <1> 		push	edx
    20 00000216 56                  <1> 		push	esi
    21 00000217 57                  <1> 		push	edi
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 表示位置
    25                              <1> 		;---------------------------------------
    26 00000218 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    27 0000021B 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    28                              <1> 
    29 0000021E B900000000          <1>         mov     ecx, 0
    30 00000223 81F900010000        <1> .10L:   cmp     ecx, 256
    31 00000229 731F                <1>         jae     .10E
    32                              <1> 
    33 0000022B 89C8                <1>         mov     eax, ecx
    34 0000022D 83E00F              <1>         and     eax, 0x0F
    35 00000230 01F0                <1>         add     eax, esi            ;列 0 => 11110000 として端っこによるようにする
    36                              <1> 
    37 00000232 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    38 00000234 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
    39 00000237 01FB                <1> 		add		ebx, edi						;   EBX += Y;       ;行 １６で割ったときに商がいくつか
    40                              <1> 
    41 00000239 516A075350E808FFFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
    41 00000242 FF6683C410          <1>
    42                              <1> 
    43 00000247 41                  <1> 		inc		ecx								;   // for (... ECX++)
    44 00000248 EBD9                <1> 		jmp		.10L							; 
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 0000024A 5F                  <1> 		pop		edi
    51 0000024B 5E                  <1> 		pop		esi
    52 0000024C 5A                  <1> 		pop		edx
    53 0000024D 59                  <1> 		pop		ecx
    54 0000024E 5B                  <1> 		pop		ebx
    55 0000024F 58                  <1> 		pop		eax
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; 【スタックフレームの破棄】
    59                              <1> 		;---------------------------------------
    60 00000250 89EC                <1> 		mov		esp, ebp
    61 00000252 5D                  <1> 		pop		ebp
    62                              <1> 
    63 00000253 C3                  <1> 		ret
    64                              <1> 
    75                                  %include	"../modules/protect/draw_str.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	文字列の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_str(col, row, color, p);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	p		: 文字列のアドレス
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_str:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| *p（文字列のアドレス）
    20                              <1> 												; EBP+16| color（色）
    21                              <1> 												; EBP+12| row（行）
    22                              <1> 												; EBP+ 8| col（列）
    23                              <1> 												; ---------------
    24 00000254 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    25 00000255 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    26                              <1> 												; ---------------
    27                              <1> 
    28                              <1> 		;---------------------------------------
    29                              <1> 		; 【レジスタの保存】
    30                              <1> 		;---------------------------------------
    31 00000257 50                  <1> 		push	eax
    32 00000258 53                  <1> 		push	ebx
    33 00000259 51                  <1> 		push	ecx
    34 0000025A 52                  <1> 		push	edx
    35 0000025B 56                  <1> 		push	esi
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 文字列の表示
    39                              <1> 		;---------------------------------------
    40 0000025C 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    41 0000025F 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    42 00000262 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    43 00000266 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
    44                              <1> 
    45 00000269 FC                  <1> 		cld										; DF = 0; // アドレス加算
    46                              <1> .10L:											; do
    47                              <1> 												; {
    48 0000026A AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
    49 0000026B 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
    50 0000026D 7425                <1> 		je		.10E							;     break;
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 1文字表示
    54                              <1> 		;---------------------------------------
    55                              <1> %ifdef	USE_SYSTEM_CALL
    56                              <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
    57                              <1> %else
    58 0000026F 50535251E8D3FEFFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
    58 00000278 6683C410            <1>
    59                              <1> %endif
    60                              <1> 
    61                              <1> 		; 次の文字の位置を調整
    62 0000027C 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
    63 0000027D 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
    64 00000280 7C10                <1> 		jl		.12E							;   {
    65 00000282 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
    66 00000287 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
    67 00000288 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
    68 0000028B 7C05                <1> 		jl		.12E							;     {
    69 0000028D BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
    70                              <1> 												;     }
    71                              <1> .12E:											;   }
    72 00000292 EBD6                <1> 		jmp		.10L							;   
    73                              <1> .10E:											; } while (1);
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの復帰】
    77                              <1> 		;---------------------------------------
    78 00000294 5E                  <1> 		pop		esi
    79 00000295 5A                  <1> 		pop		edx
    80 00000296 59                  <1> 		pop		ecx
    81 00000297 5B                  <1> 		pop		ebx
    82 00000298 58                  <1> 		pop		eax
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの破棄】
    86                              <1> 		;---------------------------------------
    87 00000299 89EC                <1> 		mov		esp, ebp
    88 0000029B 5D                  <1> 		pop		ebp
    89                              <1> 
    90 0000029C C3                  <1> 		ret
    91                              <1> 
    76                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	カラーバーの表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_color_bar(col, row);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> draw_color_bar:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												; EBP+ 8| X（列）
    18                              <1> 												; EBP+12| Y（行）
    19                              <1> 												; ---------------
    20 0000029D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 0000029E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ---------------
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 【レジスタの保存】
    25                              <1> 		;---------------------------------------
    26 000002A0 50                  <1> 		push	eax
    27 000002A1 53                  <1> 		push	ebx
    28 000002A2 51                  <1> 		push	ecx
    29 000002A3 52                  <1> 		push	edx
    30 000002A4 56                  <1> 		push	esi
    31 000002A5 57                  <1> 		push	edi
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 表示位置
    35                              <1> 		;---------------------------------------
    36 000002A6 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    37 000002A9 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; カラーバーを表示
    41                              <1> 		;---------------------------------------
    42 000002AC B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
    43 000002B1 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
    44 000002B4 732E                <1> 		jae		.10E							; 
    45                              <1> 												;      ECX++)
    46                              <1> 												; {
    47                              <1> 												;   // 桁位置の計算
    48 000002B6 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
    49 000002B8 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
    50 000002BB C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
    51 000002BE 01F0                <1> 		add		eax, esi						;   EAX += X;
    52                              <1> 												;   
    53                              <1> 												;   // 行位置の計算
    54 000002C0 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    55 000002C2 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
    56 000002C4 01FB                <1> 		add		ebx, edi						;   EBX += Y;
    57                              <1> 												;   
    58                              <1> 												;   // 表示色の取得
    59 000002C6 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
    60 000002C8 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
    61 000002CA 8B92[F7020000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
    62                              <1> 
    63 000002D0 68[EE020000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
    63 000002D8 E877FFFFFF6683C410  <1>
    64                              <1> 
    65 000002E1 41                  <1> 		inc		ecx								;   // for (... ECX++)
    66 000002E2 EBCD                <1> 		jmp		.10L							; 
    67                              <1> .10E:											; }
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 【レジスタの復帰】
    71                              <1> 		;---------------------------------------
    72 000002E4 5F                  <1> 		pop		edi
    73 000002E5 5E                  <1> 		pop		esi
    74 000002E6 5A                  <1> 		pop		edx
    75 000002E7 59                  <1> 		pop		ecx
    76 000002E8 5B                  <1> 		pop		ebx
    77 000002E9 58                  <1> 		pop		eax
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 【スタックフレームの破棄】
    81                              <1> 		;---------------------------------------
    82 000002EA 89EC                <1> 		mov		esp, ebp
    83 000002EC 5D                  <1> 		pop		ebp
    84                              <1> 
    85 000002ED C3                  <1> 		ret
    86                              <1> 
    87 000002EE 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
    88                              <1> 
    89 000002F7 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
    90 000002FB 00010009            <1> 		dw	0x0100, 0x0900
    91 000002FF 0002000A            <1> 		dw	0x0200, 0x0A00
    92 00000303 0003000B            <1> 		dw	0x0300, 0x0B00
    93 00000307 0004000C            <1> 		dw	0x0400, 0x0C00
    94 0000030B 0005000D            <1> 		dw	0x0500, 0x0D00
    95 0000030F 0006000E            <1> 		dw	0x0600, 0x0E00
    96 00000313 0007000F            <1> 		dw	0x0700, 0x0F00
    97                              <1> 
    77                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ピクセルの描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_pixel(X, Y, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X		: X座標
     8                              <1> ;	Y		: Y座標
     9                              <1> ;	color	: 描画色
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> draw_pixel:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ------|--------
    18                              <1> 												; EBP+16| 色
    19                              <1> 												; EBP+12| Y
    20                              <1> 												; EBP+ 8| X
    21                              <1> 												; ------|--------
    22 00000317 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    23 00000318 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    24                              <1> 												; ------+--------
    25                              <1> 		;---------------------------------------
    26                              <1> 		; 【レジスタの保存】
    27                              <1> 		;---------------------------------------
    28 0000031A 50                  <1> 		push	eax
    29 0000031B 53                  <1> 		push	ebx
    30 0000031C 51                  <1> 		push	ecx
    31 0000031D 57                  <1> 		push	edi
    32                              <1>         
    33                              <1> 		;---------------------------------------
    34                              <1> 		; Y座標を80倍する（640/8）
    35                              <1> 		;---------------------------------------
    36                              <1> 
    37 0000031E 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000321 C1E704              <1>         shl     edi, 4
    39 00000324 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000]
    40                              <1> 
    41 0000032B 8B5D08              <1>         mov     ebx, [ebp + 8]
    42 0000032E 89D9                <1>         mov     ecx, ebx
    43 00000330 C1EB03              <1>         shr     ebx, 3
    44 00000333 01DF                <1>         add     edi, ebx
    45                              <1> 
    46 00000335 83E107              <1>         and     ecx, 0x07
    47 00000338 BB80000000          <1>         mov     ebx, 0x80
    48 0000033D D3EB                <1>         shr     ebx, cl
    49                              <1> 
    50 0000033F 8B4D10              <1>         mov     ecx, [ebp +16]
    51                              <1> 
    52                              <1> %ifdef	USE_TEST_AND_SET
    53                              <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    54                              <1> %endif
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; プレーン毎に出力
    58                              <1> 		;---------------------------------------
    59 00000342 6A03E84FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
    59 0000034B C404                <1>
    60 0000034D 6A08E85DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
    60 00000356 C404                <1>
    61 00000358 516A085753E8BBFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    61 00000361 FF6683C410          <1>
    62                              <1> 
    63 00000366 6A02E82BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
    63 0000036F C404                <1>
    64 00000371 6A04E839FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
    64 0000037A C404                <1>
    65 0000037C 516A045753E897FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    65 00000385 FF6683C410          <1>
    66                              <1> 
    67 0000038A 6A01E807FDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
    67 00000393 C404                <1>
    68 00000395 6A02E815FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
    68 0000039E C404                <1>
    69 000003A0 516A025753E873FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    69 000003A9 FF6683C410          <1>
    70                              <1> 
    71 000003AE 6A00E8E3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
    71 000003B7 C404                <1>
    72 000003B9 6A01E8F1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
    72 000003C2 C404                <1>
    73 000003C4 516A015753E84FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    73 000003CD FF6683C410          <1>
    74                              <1> 
    75                              <1> 
    76                              <1> %ifdef	USE_TEST_AND_SET
    77                              <1> 		;---------------------------------------
    78                              <1> 		; テストアンドセット
    79                              <1> 		;---------------------------------------
    80                              <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    81                              <1> %endif
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【レジスタの復帰】
    85                              <1> 		;---------------------------------------
    86 000003D2 5F                  <1> 		pop		edi
    87 000003D3 59                  <1> 		pop		ecx
    88 000003D4 5B                  <1> 		pop		ebx
    89 000003D5 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 000003D6 89EC                <1> 		mov		esp, ebp
    95 000003D8 5D                  <1> 		pop		ebp
    96                              <1> 
    97 000003D9 C3                  <1> 		ret
    98                              <1> 
    78                                  %include	"../modules/protect/draw_line.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	直線の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_line:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ---------------
    20                              <1> 												;    +24| 色
    21                              <1> 												;    +20| Y1
    22                              <1> 												;    +16| X1
    23                              <1> 												;    +12| Y0
    24                              <1> 												;    + 8| X0
    25                              <1> 												; ---------------
    26 000003DA 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 000003DB 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ---------------
    29 000003DD 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
    30 000003DF 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
    31 000003E1 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
    32 000003E3 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
    33 000003E5 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
    34 000003E7 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
    35 000003E9 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
    36                              <1> 												; ------|--------
    37                              <1> 
    38                              <1> 		;---------------------------------------
    39                              <1> 		; 【レジスタの保存】
    40                              <1> 		;---------------------------------------
    41 000003EB 50                  <1> 		push	eax
    42 000003EC 53                  <1> 		push	ebx
    43 000003ED 51                  <1> 		push	ecx
    44 000003EE 52                  <1> 		push	edx
    45 000003EF 56                  <1> 		push	esi
    46 000003F0 57                  <1> 		push	edi
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 幅を計算（X軸）
    50                              <1> 		;---------------------------------------
    51 000003F1 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    52 000003F4 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
    53 000003F7 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
    54 000003F9 7D09                <1> 		jge		.10F							; if (幅 < 0)
    55                              <1> 												; {
    56 000003FB F7DB                <1> 		neg		ebx								;   幅   *= -1;
    57 000003FD BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
    58 00000402 EB05                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61 00000404 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
    62                              <1> .10E:											; }
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 高さを計算（Y軸）
    66                              <1> 		;---------------------------------------
    67 00000409 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
    68 0000040C 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
    69 0000040F 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
    70 00000411 7D09                <1> 		jge		.20F							; if (高さ < 0)
    71                              <1> 												; {
    72 00000413 F7DA                <1> 		neg		edx								;   高さ *= -1;
    73 00000415 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
    74 0000041A EB05                <1> 		jmp		.20E							; }
    75                              <1> .20F:											; else
    76                              <1> 												; {
    77 0000041C BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
    78                              <1> .20E:											; }
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; X軸
    82                              <1> 		;---------------------------------------
    83 00000421 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
    84 00000424 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
    85 00000427 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; Y軸
    89                              <1> 		;---------------------------------------
    90 0000042A 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
    91 0000042D 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
    92 00000430 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 基準軸を決める
    96                              <1> 		;---------------------------------------
    97 00000433 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
    98 00000435 7F08                <1> 		jg		.22F							; {
    99                              <1> 												;   
   100 00000437 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   101 0000043A 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   102                              <1> 												;   
   103 0000043D EB06                <1> 		jmp		.22E							; }
   104                              <1> .22F:											; else
   105                              <1> 												; {
   106 0000043F 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   107 00000442 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   108                              <1> .22E:											; }
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 繰り返し回数(基準軸のドット数)
   112                              <1> 		;---------------------------------------
   113 00000445 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   114 00000448 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   115 0000044B 7505                <1> 		jnz		.30E							; {
   116 0000044D B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   117                              <1> .30E:											; }
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 線を描画
   121                              <1> 		;---------------------------------------
   122                              <1> .50L:											; do
   123                              <1> 												; {
   124                              <1> %ifdef	USE_SYSTEM_CALL
   125                              <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   126                              <1> 
   127                              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   128                              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   129                              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   130                              <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   131                              <1> 
   132                              <1> 		mov		ecx, eax
   133                              <1> %else
   136 00000452 FF7518FF75ECFF75F8- <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   136 0000045B E8B7FEFFFF6683C40C  <1>
   137                              <1> %endif
   138                              <1> 												;   // 基準軸を更新(1ドット分)
   139 00000464 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   140 00000467 0106                <1> 		add		[esi - 0], eax					;   
   141                              <1> 
   142                              <1> 												;   // 相対軸を更新
   143 00000469 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   144 0000046C 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   145 0000046F 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   146                              <1> 
   147 00000472 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   148 00000474 7C07                <1> 		jl		.52E							;   {
   149 00000476 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   150                              <1> 												;     
   151                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   152 00000478 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   153 0000047B 011F                <1> 		add		[edi - 0], ebx					;     
   154                              <1> .52E:											;   }
   155 0000047D 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   156                              <1> 												;   
   157 00000480 E2D0                <1> 		loop	.50L							;   
   158                              <1> .50E:											; } while (ループ回数--);
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【レジスタの復帰】
   162                              <1> 		;---------------------------------------
   163 00000482 5F                  <1> 		pop		edi
   164 00000483 5E                  <1> 		pop		esi
   165 00000484 5A                  <1> 		pop		edx
   166 00000485 59                  <1> 		pop		ecx
   167 00000486 5B                  <1> 		pop		ebx
   168 00000487 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 00000488 89EC                <1> 		mov		esp, ebp
   174 0000048A 5D                  <1> 		pop		ebp
   175                              <1> 
   176 0000048B C3                  <1> 		ret
   177                              <1> 
    79                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	矩形の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_rect:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ------|--------
    20                              <1> 												; EBP+24| 色
    21                              <1> 												; EBP+20| Y1
    22                              <1> 												; EBP+16| X1
    23                              <1> 												; EBP+12| Y0
    24                              <1> 												; EBP+ 8| X0
    25                              <1> 												; ---------------
    26 0000048C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 0000048D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ------|--------
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; 【レジスタの保存】
    32                              <1> 		;---------------------------------------
    33 0000048F 50                  <1> 		push		eax
    34 00000490 53                  <1> 		push		ebx
    35 00000491 51                  <1> 		push		ecx
    36 00000492 52                  <1> 		push		edx
    37 00000493 56                  <1> 		push		esi
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; 矩形を描画
    41                              <1> 		;---------------------------------------
    42 00000494 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    43 00000497 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
    44 0000049A 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
    45 0000049D 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
    46 000004A0 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 座標軸の大小を確定
    50                              <1> 		;---------------------------------------
    51 000004A3 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
    52 000004A5 7C01                <1> 		jl		.10E							; {
    53 000004A7 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
    54                              <1> .10E:											; }
    55                              <1> 
    56 000004A8 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
    57 000004AA 7C02                <1> 		jl		.20E							; {
    58 000004AC 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
    59                              <1> .20E:											; }
    60                              <1> 
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 矩形を描画
    63                              <1> 		;---------------------------------------
    64 000004AE 5653515350E822FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
    64 000004B7 FF6683C414          <1>
    65 000004BC 5652505350E814FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
    65 000004C5 FF6683C414          <1>
    66                              <1> 
    67 000004CA 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
    68 000004CB 5652515250E805FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
    68 000004D4 FF6683C414          <1>
    69 000004D9 42                  <1> 		inc		edx
    70                              <1> 
    71 000004DA 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
    72 000004DB 5652515351E8F5FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
    72 000004E4 FF6683C414          <1>
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 000004E9 5E                  <1> 		pop		esi
    78 000004EA 5A                  <1> 		pop		edx
    79 000004EB 59                  <1> 		pop		ecx
    80 000004EC 5B                  <1> 		pop		ebx
    81 000004ED 58                  <1> 		pop		eax
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの破棄】
    85                              <1> 		;---------------------------------------
    86 000004EE 89EC                <1> 		mov		esp, ebp
    87 000004F0 5D                  <1> 		pop		ebp
    88                              <1> 
    89 000004F1 C3                  <1> 		ret
    90                              <1> 
    80                                  %include	"../modules/protect/itoa.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	数値を文字に変換
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	num		: 変換する数値
     8                              <1> ;	buff	: 保存先バッファアドレス
     9                              <1> ;	size	: 保存先バッファサイズ
    10                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    11                              <1> ;	flags	: フラグ
    12                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    13                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    14                              <1> ;			:   B1 : 1=＋/-符号を表示する
    15                              <1> ;			:      : 0=＋/-符号を表示しない
    16                              <1> ;			:   B0 : 1=符号付き正数として扱う
    17                              <1> ;			:      : 0=符号無し正数として扱う
    18                              <1> ;
    19                              <1> ;■戻り値	: 無し
    20                              <1> ;************************************************************************
    21                              <1> itoa:
    22                              <1> 		;---------------------------------------
    23                              <1> 		; 【スタックフレームの構築】
    24                              <1> 		;---------------------------------------
    25                              <1> 												; ------|--------
    26                              <1> 												;    +24| フラグ
    27                              <1> 												;    +20| 基数
    28                              <1> 												;    +16| バッファサイズ
    29                              <1> 												;    +12| バッファアドレス
    30                              <1> 												;    + 8| 数値
    31                              <1> 												; ------|--------
    32                              <1> 												;    + 4| EIP（戻り番地）
    33 000004F2 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    34 000004F3 89E5                <1> 		mov		ebp, esp						; ------+--------
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの保存】
    38                              <1> 		;---------------------------------------
    39 000004F5 50                  <1> 		push	eax
    40 000004F6 53                  <1> 		push	ebx
    41 000004F7 51                  <1> 		push	ecx
    42 000004F8 52                  <1> 		push	edx
    43 000004F9 56                  <1> 		push	esi
    44 000004FA 57                  <1> 		push	edi
    45                              <1> 
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 引数を取得
    48                              <1> 		;---------------------------------------
    49 000004FB 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
    50 000004FE 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
    51 00000501 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
    52                              <1> 
    53 00000504 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
    54 00000506 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
    55 00000508 4F                  <1> 		dec		edi								; 
    56                              <1> 
    57 00000509 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
    58                              <1> 
    59                              <1> 		;---------------------------------------
    60                              <1> 		; 符号付き判定
    61                              <1> 		;---------------------------------------
    62 0000050C F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
    63 00000512 7408                <1> .10Q:	je		.10E							; {
    64 00000514 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    65 00000517 7D03                <1> .12Q:	jge		.12E							;   {
    66 00000519 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
    67                              <1> .12E:											;   }
    68                              <1> .10E:											; }
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 符号出力判定
    72                              <1> 		;---------------------------------------
    73 0000051C F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
    74 00000522 7410                <1> .20Q:	je		.20E							; {
    75 00000524 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    76 00000527 7D07                <1> .22Q:	jge		.22F							;   {
    77 00000529 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
    78 0000052B C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
    79 0000052E EB03                <1> 		jmp		.22E							;   }
    80                              <1> .22F:											;   else
    81                              <1> 												;   {
    82 00000530 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
    83                              <1> .22E:											;   }
    84 00000533 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
    85                              <1> .20E:											; }
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; ASCII変換
    89                              <1> 		;---------------------------------------
    90 00000534 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
    91                              <1> .30L:											; do
    92                              <1> 												; {
    93 00000537 BA00000000          <1> 		mov		edx, 0							;   
    94 0000053C F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
    95                              <1> 												;   AX = DX:AX / 基数;
    96                              <1> 												;   
    97 0000053E 89D6                <1> 		mov		esi, edx						;   // テーブル参照
    98 00000540 8A96[6B050000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
    99                              <1> 												;   
   100 00000546 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   101 00000548 4F                  <1> 		dec		edi								;   dst--;
   102                              <1> 												;   
   103 00000549 83F800              <1> 		cmp		eax, 0							;   
   104 0000054C E0E9                <1> 		loopnz	.30L							; } while (AX);
   105                              <1> .30E:
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 空欄を埋める
   109                              <1> 		;---------------------------------------
   110 0000054E 83F900              <1> 		cmp		ecx, 0							; if (size)
   111 00000551 740E                <1> .40Q:	je		.40E							; {
   112 00000553 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   113 00000555 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   114 0000055A 7502                <1> .42Q:	jne		.42E							;   {
   115 0000055C B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   116                              <1> .42E:											;   }
   117 0000055E FD                  <1> 		std										;   // DF = 1（-方向）
   118 0000055F F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   119                              <1> .40E:											; }
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの復帰】
   123                              <1> 		;---------------------------------------
   124 00000561 5F                  <1> 		pop		edi
   125 00000562 5E                  <1> 		pop		esi
   126 00000563 5A                  <1> 		pop		edx
   127 00000564 59                  <1> 		pop		ecx
   128 00000565 5B                  <1> 		pop		ebx
   129 00000566 58                  <1> 		pop		eax
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの破棄】
   133                              <1> 		;---------------------------------------
   134 00000567 89EC                <1> 		mov		esp, ebp
   135 00000569 5D                  <1> 		pop		ebp
   136                              <1> 
   137 0000056A C3                  <1> 		ret
   138                              <1> 
   139 0000056B 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   139 00000574 39414243444546      <1>
   140                              <1> 
    81                                  %include	"../modules/protect/rtc.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD rtc_get_time(dst);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	dst		: 保存先アドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    10                              <1> ;************************************************************************
    11                              <1> rtc_get_time:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; ------|--------
    16                              <1> 												; EBP+ 8| 保存先アドレス
    17                              <1> 												; ---------------
    18 0000057B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    19 0000057C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    20                              <1> 												; ---------------
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000057E 53                  <1> 		push	ebx
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; RTCから時刻を取得
    28                              <1> 		;---------------------------------------
    29 0000057F B00A                <1> 		mov		al, 0x0A						; // レジスタA
    30 00000581 E670                <1> 		out		0x70, al						; outp(0x70, AL);
    31 00000583 E471                <1> 		in		al, 0x71						; AL = レジスタA;
    32 00000585 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
    33 00000587 7407                <1> 		je		.10F							; {
    34 00000589 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
    35 0000058E EB27                <1> 		jmp		.10E							; }
    36                              <1> .10F:											; else
    37                              <1> 												; {
    38                              <1> 												;   // RAM[0x04]:時
    39 00000590 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
    40 00000592 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    41 00000594 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
    42                              <1> 												;   
    43 00000596 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    44                              <1> 												;   
    45                              <1> 												;   // RAM[0x02]:分
    46 00000599 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
    47 0000059B E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    48 0000059D E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
    49                              <1> 												;   
    50 0000059F C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    51                              <1> 												;   
    52                              <1> 												;   // RAM[0x00]:秒
    53 000005A2 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
    54 000005A4 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    55 000005A6 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
    56                              <1> 												;   
    57 000005A8 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
    58                              <1> 												;   
    59 000005AD 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
    60 000005B0 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
    61                              <1> 												;   
    62 000005B2 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
    63                              <1> .10E:											; }
    64                              <1> 
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 【レジスタの復帰】
    67                              <1> 		;---------------------------------------
    68 000005B7 5B                  <1> 		pop		ebx
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【スタックフレームの破棄】
    72                              <1> 		;---------------------------------------
    73 000005B8 89EC                <1> 		mov		esp, ebp
    74 000005BA 5D                  <1> 		pop		ebp
    75                              <1> 
    76 000005BB C3                  <1> 		ret
    77                              <1> 
    82                                  %include	"../modules/protect/draw_time.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	時刻の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_time(col, row, color, time);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	time	: 時刻データ
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_time:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| 時刻データ
    20                              <1> 												; EBP+16| 色
    21                              <1> 												; EBP+12| Y（行）
    22                              <1> 												; EBP+ 8| X（列）
    23                              <1> 												; ---------------
    24 000005BC 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    25 000005BD 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
    26                              <1> 												; ---------------
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの保存】
    29                              <1> 		;---------------------------------------
    30 000005BF 50                  <1> 		push	eax
    31 000005C0 53                  <1> 		push	ebx
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 
    35                              <1> 		;---------------------------------------
    36 000005C1 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
    37 000005C4 3B05[42060000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
    38 000005CA 7467                <1> 		je		.10E							; {
    39                              <1> 												;   
    40 000005CC A3[42060000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
    41                              <1> 												;   
    42 000005D1 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
    43 000005D6 88C3                <1> 		mov		bl, al							;   EBX = 秒;
    44 000005D8 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
    44 000005DF [50060000]53E809FF- <1>
    44 000005E7 FFFF6683C414        <1>
    45                              <1> 
    46 000005ED 88E3                <1> 		mov		bl, ah							;   EBX = 分;
    47 000005EF 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
    47 000005F6 [4D060000]53E8F2FE- <1>
    47 000005FE FFFF6683C414        <1>
    48                              <1> 
    49 00000604 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
    50 00000607 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
    50 0000060E [4A060000]50E8DAFE- <1>
    50 00000616 FFFF6683C414        <1>
    51                              <1> 
    52                              <1> 												;   // 時刻を表示
    53 0000061C 68[4A060000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    53 00000624 FF750CFF7508E825FC- <1>
    53 0000062D FFFF6683C410        <1>
    54                              <1> 												;     
    55                              <1> 												;   }
    56                              <1> .10E:											; }
    57                              <1> 
    58                              <1> 		;---------------------------------------
    59                              <1> 		; 【レジスタの復帰】
    60                              <1> 		;---------------------------------------
    61 00000633 5B                  <1> 		pop		ebx
    62 00000634 58                  <1> 		pop		eax
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 【スタックフレームの破棄】
    66                              <1> 		;---------------------------------------
    67 00000635 89EC                <1> 		mov		esp, ebp
    68 00000637 5D                  <1> 		pop		ebp
    69                              <1> 
    70 00000638 C3                  <1> 		ret
    71                              <1> 
    72 00000639 00                  <1> ALIGN 2, db 0
    73 0000063A 0000000000000000    <1> .temp:	dq	0
    74 00000642 0000000000000000    <1> .last:	dq	0
    75 0000064A 5A5A3A              <1> .hour:	db	"ZZ:"
    76 0000064D 5A5A3A              <1> .min:	db	"ZZ:"
    77 00000650 5A5A00              <1> .sec:	db	"ZZ", 0
    83                                  %include	"modules/interrupt.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込み処理：デフォルトの処理
     3                              <1> ;************************************************************************
     4                              <1> int_default:
     5 00000653 9C                  <1> 		pushf									; // EFLAGS(IF==0)
     6 00000654 0E                  <1> 		push	cs								; // CS
     7 00000655 68[71060000]        <1> 		push	int_stop						; // スタック表示処理
     8                              <1> 
     9 0000065A B8[60060000]        <1> 		mov		eax, .s0						; // 割り込み種別
    10 0000065F CF                  <1> 		iret
    11                              <1> 
    12 00000660 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
    12 00000669 50202020203E2000    <1>
    13                              <1> 
    14                              <1> ;************************************************************************
    15                              <1> ;	スタックの内容を表示して無限ループを実行
    16                              <1> ;************************************************************************
    17                              <1> int_stop:
    18                              <1> 		;---------------------------------------
    19                              <1> 		; EAXで示される文字列を表示
    20                              <1> 		;---------------------------------------
    21 00000671 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
    21 0000067A 19E8D4FBFFFF6683C4- <1>
    21 00000683 10                  <1>
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; スタックのデータを文字列に変換
    25                              <1> 		;---------------------------------------
    26 00000684 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
    27 00000687 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    27 0000068E [4C070000]50E85AFE- <1>
    27 00000696 FFFF6683C414        <1>
    28                              <1> 
    29 0000069C 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
    30 000006A0 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    30 000006A7 [5D070000]50E841FE- <1>
    30 000006AF FFFF6683C414        <1>
    31                              <1> 
    32 000006B5 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
    33 000006B9 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    33 000006C0 [6E070000]50E828FE- <1>
    33 000006C8 FFFF6683C414        <1>
    34                              <1> 
    35 000006CE 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
    36 000006D2 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    36 000006D9 [7F070000]50E80FFE- <1>
    36 000006E1 FFFF6683C414        <1>
    37                              <1> 
    38                              <1> 		;---------------------------------------
    39                              <1> 		; 文字列の表示
    40                              <1> 		;---------------------------------------
    41 000006E7 68[45070000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
    41 000006EF 00006A106A19E85AFB- <1>
    41 000006F8 FFFF6683C410        <1>
    42 000006FE 68[56070000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
    42 00000706 00006A116A19E843FB- <1>
    42 0000070F FFFF6683C410        <1>
    43 00000715 68[67070000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
    43 0000071D 00006A126A19E82CFB- <1>
    43 00000726 FFFF6683C410        <1>
    44 0000072C 68[78070000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
    44 00000734 00006A136A19E815FB- <1>
    44 0000073D FFFF6683C410        <1>
    45                              <1> 
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 無限ループ
    48                              <1> 		;---------------------------------------
    49 00000743 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
    50                              <1> 
    51 00000745 4553502B20303A      <1> .s1		db	"ESP+ 0:"
    52 0000074C 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
    52 00000755 00                  <1>
    53 00000756 2020202B20343A      <1> .s2		db	"   + 4:"
    54 0000075D 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
    54 00000766 00                  <1>
    55 00000767 2020202B20383A      <1> .s3		db	"   + 8:"
    56 0000076E 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
    56 00000777 00                  <1>
    57 00000778 2020202B31323A      <1> .s4		db	"   +12:"
    58 0000077F 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
    58 00000788 00                  <1>
    59                              <1> 
    84                                  
    85                                  ;************************************************************************
    86                                  ;	パディング
    87                                  ;************************************************************************
    88 00000789 00<rept>                		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
    89                                  
