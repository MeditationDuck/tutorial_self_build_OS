     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	メモリイメージ
     3                              <1> ;************************************************************************
     4                              <1> 
     5                              <1> 		;---------------------------------------
     6                              <1> 		;           |            | 
     7                              <1> 		;           |____________| 
     8                              <1> 		; 0000_7A00 |            | ( 512) スタック
     9                              <1> 		;           |____________| 
    10                              <1> 		; 0000_7C00 |            | (  8K) ブート
    11                              <1> 		;           =            = 
    12                              <1> 		;           |____________| 
    13                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    14                              <1> 		;           =            = 
    15                              <1> 		;           |____________| 
    16                              <1> 		; 0000_BC00 |////////////| 
    17                              <1> 		;           =            = 
    18                              <1> 		;           |____________| 
    19                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    24                              <1> 		;           |            | 
    25                              <1> 		;           =            = 
    26                              <1> 		;           |____________| 
    27                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    28                              <1> 		;           |            | （各タスク1K）
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_5000 |            | Dir
    32                              <1> 		;      6000 |____________| Page
    33                              <1> 		; 0010_7000 |            | Dir
    34                              <1> 		;      8000 |____________| Page
    35                              <1> 		; 0010_9000 |////////////| 
    36                              <1> 		;           |            | 
    37                              <1> 
    38                              <1> 		BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    39                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    40                              <1> 
    41                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    42                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    43                              <1> 
    44                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    45                              <1> 
    46                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    47                              <1> 
    48                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    49                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    50                              <1> 
    51                              <1> 		E820_RECORD_SIZE	equ		20
    52                              <1> 
    53                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    54                              <1> 
    55                              <1> 
    56                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    57                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    58                              <1> 
    59                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    60                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    61                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    62                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    63                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    64                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    65                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    66                              <1> 
    67                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    68                              <1> 
    69                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    70                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    71                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    72                              <1> 
    73                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    74                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    75                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    76                              <1> 
    77                              <1> 
    78                              <1> ;************************************************************************
    79                              <1> ;	ディスクイメージ
    80                              <1> ;************************************************************************
    81                              <1> 		;(SECT/SUM)  file img                 
    82                              <1> 		;                       ____________  
    83                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    84                              <1> 		;                      =            = 
    85                              <1> 		;                      |____________| 
    86                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
    87                              <1> 		;                      =            = 
    88                              <1> 		;                      |____________| 
    89                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
    90                              <1> 		;                      |            | 
    91                              <1> 		;                      |            | 
    92                              <1> 		;                      =            = 
    93                              <1> 		;                      |____________| 
    94                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
    95                              <1> 		;                      |            | 
    96                              <1> 		;                      |            | 
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   100                              <1> 		;                      |            | (32セクタ/512エントリ)
   101                              <1> 		;                      =            = 
   102                              <1> 		;                      |____________| 
   103                              <1> 		;(   /576)   0004_8000 |            | データ領域
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |            | 
   107                              <1> 		;                      |____________| 
   108                              <1> 		;(   /640)   0005_0000 |////////////| 
   109                              <1> 		;                      |            | 
   110                              <1> 
   111                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   112                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   113                              <1> 
   114                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   115                              <1> 
   116                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   117                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   118                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   119                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   120                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   121                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   122                              <1> 
   123                              <1> 		; ファイル属性
   124                              <1> 		ATTR_READ_ONLY		equ		0x01
   125                              <1> 		ATTR_HIDDEN			equ		0x02
   126                              <1> 		ATTR_SYSTEM			equ		0x04
   127                              <1> 		ATTR_VOLUME_ID		equ		0x08
   128                              <1> 		ATTR_DIRECTORY		equ		0x10
   129                              <1> 		ATTR_ARCHIVE		equ		0x20
   130                              <1> 
    13                                  %include	"../include/macro.s"
     1                              <1> ;************************************************************************
     2                              <1> ; 関数呼び出し用マクロ
     3                              <1> ;
     4                              <1> ; 使い方：
     5                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
     6                              <1> ;
     7                              <1> ;************************************************************************
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1> 	%rep  %0 - 1
    11                              <1> 		push	%{-1:-1}
    12                              <1> 		%rotate -1
    13                              <1> 	%endrep 
    14                              <1> 	%rotate -1
    15                              <1> 
    16                              <1> 		call	%1
    17                              <1> 
    18                              <1> 	%if 1 < %0
    19                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1> 	%endif
    21                              <1> 
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> ;************************************************************************
    25                              <1> ; 割り込みベクタ設定用
    26                              <1> ;
    27                              <1> ; 使い方：
    28                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    29                              <1> ;
    30                              <1> ;************************************************************************
    31                              <1> %macro  set_vect 1-*.nolist
    32                              <1> 		push	eax
    33                              <1> 		push	edi
    34                              <1> 
    35                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    36                              <1> 		mov		eax, %2
    37                              <1> 
    38                              <1> 	%if 3 == %0
    39                              <1> 		mov		[edi + 4], %3					; フラグ
    40                              <1> 	%endif
    41                              <1> 
    42                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    43                              <1> 		shr		eax, 16							; 
    44                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    45                              <1> 
    46                              <1> 		pop		edi
    47                              <1> 		pop		eax
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ; ポート出力用
    52                              <1> ;
    53                              <1> ; 使い方：
    54                              <1> ;	outp	ポート番号, 出力値
    55                              <1> ;
    56                              <1> ;************************************************************************
    57                              <1> %macro  outp 2
    58                              <1> 		mov		al, %2
    59                              <1> 		out		%1, al
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> ;************************************************************************
    63                              <1> ; ディスクリプタの情報を設定
    64                              <1> ;
    65                              <1> ; 使い方：
    66                              <1> ;	set_desc	ディスクリプタ, ベース
    67                              <1> ;
    68                              <1> ;************************************************************************
    69                              <1> %macro  set_desc 2-* 
    70                              <1> 		push	eax
    71                              <1> 		push	edi
    72                              <1> 
    73                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    74                              <1> 		mov		eax, %2							; ベースアドレス
    75                              <1> 
    76                              <1> 	%if 3 == %0
    77                              <1> 		mov		[edi + 0], %3					; リミット
    78                              <1> 	%endif
    79                              <1> 
    80                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    81                              <1> 		shr		eax, 16							; 
    82                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    83                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    84                              <1> 
    85                              <1> 		pop		edi
    86                              <1> 		pop		eax
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;************************************************************************
    90                              <1> ; ゲートディスクリプタのオフセットを設定
    91                              <1> ;
    92                              <1> ; 使い方：
    93                              <1> ;	set_gate	ディスクリプタ, オフセット
    94                              <1> ;
    95                              <1> ;************************************************************************
    96                              <1> %macro  set_gate 2-* 
    97                              <1> 		push	eax
    98                              <1> 		push	edi
    99                              <1> 
   100                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   101                              <1> 		mov		eax, %2							; ベースアドレス
   102                              <1> 
   103                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   104                              <1> 		shr		eax, 16							; 
   105                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   106                              <1> 
   107                              <1> 		pop		edi
   108                              <1> 		pop		eax
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> ;************************************************************************
   112                              <1> ;	構造体
   113                              <1> ;************************************************************************
   114                              <1> 
   115                              <1> ;-----------------------------------------------
   116                              <1> ;	ドライブパラメータ
   117                              <1> ;-----------------------------------------------
   118                              <1> struc drive
   119 00000000 <res 00000002>      <1> 		.no				resw	1				; ドライブ番号
   120 00000002 <res 00000002>      <1> 		.cyln			resw	1				; C:シリンダ
   121 00000004 <res 00000002>      <1> 		.head			resw	1				; H:ヘッド
   122 00000006 <res 00000002>      <1> 		.sect			resw	1				; S:セクタ
   123                              <1> endstruc
   124                              <1> 
   125                              <1> ;-----------------------------------------------
   126                              <1> ;	リングバッファ
   127                              <1> ;-----------------------------------------------
   128                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   129                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   130                              <1> 
   131                              <1> struc ring_buff
   132 00000000 <res 00000004>      <1> 		.rp				resd	1				; RP:書き込み位置
   133 00000004 <res 00000004>      <1> 		.wp				resd	1				; WP:読み込み位置
   134 00000008 <res 00000010>      <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;-----------------------------------------------
   138                              <1> ;	バラ曲線描画パラメータ
   139                              <1> ;-----------------------------------------------
   140                              <1> struc rose
   141 00000000 <res 00000004>      <1> 		.x0				resd	1				; 左上座標：X0
   142 00000004 <res 00000004>      <1> 		.y0				resd	1				; 左上座標：Y0
   143 00000008 <res 00000004>      <1> 		.x1				resd	1				; 右下座標：X1
   144 0000000C <res 00000004>      <1> 		.y1				resd	1				; 右下座標：Y1
   145                              <1> 
   146 00000010 <res 00000004>      <1> 		.n				resd	1				; 変数：n
   147 00000014 <res 00000004>      <1> 		.d				resd	1				; 変数：d
   148                              <1> 
   149 00000018 <res 00000004>      <1> 		.color_x		resd	1				; 描画色：X軸
   150 0000001C <res 00000004>      <1> 		.color_y		resd	1				; 描画色：Y軸
   151 00000020 <res 00000004>      <1> 		.color_z		resd	1				; 描画色：枠
   152 00000024 <res 00000004>      <1> 		.color_s		resd	1				; 描画色：文字
   153 00000028 <res 00000004>      <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   154 0000002C <res 00000004>      <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   155                              <1> 
   156 00000030 <res 00000010>      <1> 		.title			resb	16				; タイトル
   157                              <1> endstruc
   158                              <1> 
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB58                    		jmp		ipl								; IPLへジャンプ
    25 00000002 90<rept>                		times	90 - ($ - $$) db 0x90			; 
    26                                  
    27                                  		;---------------------------------------
    28                                  		; IPL(Initial Program Loader)
    29                                  		;---------------------------------------
    30                                  ipl:
    31 0000005A FA                      		cli										; // 割り込み禁止
    32                                  
    33 0000005B B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    34 0000005E 8ED8                    		mov		ds, ax							; DS = 0x0000;
    35 00000060 8EC0                    		mov		es, ax							; ES = 0x0000;
    36 00000062 8ED0                    		mov		ss, ax							; SS = 0x0000;
    37 00000064 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    38                                  
    39 00000067 FB                      		sti										; // 割り込み許可
    40                                  
    41 00000068 8816[B800]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    42                                  
    43                                  		;---------------------------------------
    44                                  		; 文字列を表示
    45                                  		;---------------------------------------
    46 0000006C 68[9900]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    46 00000074 02                 
    47                                  
    48                                  		;---------------------------------------
    49                                  		; 残りのセクタを全て読み込む
    50                                  		;---------------------------------------
    51 00000075 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    52 00000078 B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    53                                  
    54 0000007B 515368[B800]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    54 00000083 83C406             
    55                                  
    56 00000086 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    57 00000088 740C                    .10Q:	jz		.10E							; {
    58 0000008A 68[A600]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    58 00000092 02                 
    59 00000093 E84900                  		call	reboot							;   reboot(); // 再起動
    60                                  .10E:											; }
    61                                  
    62                                  		;---------------------------------------
    63                                  		; 次のステージへ移行
    64                                  		;---------------------------------------
    65 00000096 E94F05                  		jmp		stage_2							; ブート処理の第2ステージ
    66                                  
    67                                  		;---------------------------------------
    68                                  		; データ
    69                                  		;---------------------------------------
    70 00000099 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    70 000000A2 2E0A0D00           
    71 000000A6 4572726F723A736563-     .e0		db	"Error:sector read", 0
    71 000000AF 746F72207265616400 
    72                                  
    73                                  ;************************************************************************
    74                                  ;	ブートドライブに関する情報
    75                                  ;************************************************************************
    76                                  ALIGN 2, db 0
    77                                  BOOT:											; ブートドライブに関する情報
    78                                  	istruc	drive
    79 000000B8 0000                    		at	drive.no,		dw	0				; ドライブ番号
    80 000000BA 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
    81 000000BC 0000                    		at	drive.head,		dw	0				; H:ヘッド
    82 000000BE 0200                    		at	drive.sect,		dw	2				; S:セクタ
    83                                  	iend
    84                                  
    85                                  ;************************************************************************
    86                                  ;	モジュール
    87                                  ;************************************************************************
    88                                  %include	"../modules/real/puts.s"
     1                              <1> puts:
     2 000000C0 55                  <1>         push    bp
     3 000000C1 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 000000C3 50                  <1>         push    ax
     6 000000C4 53                  <1>         push    bx
     7 000000C5 56                  <1>         push    si
     8                              <1> 
     9 000000C6 8B7604              <1>         mov     si, [bp + 4]
    10                              <1> 
    11 000000C9 B40E                <1>         mov     ah, 0x0e
    12 000000CB BB0000              <1>         mov     bx, 0x0000
    13 000000CE FC                  <1>         cld
    14                              <1> .10L:
    15                              <1> 
    16 000000CF AC                  <1>         lodsb
    17                              <1> 
    18 000000D0 3C00                <1>         cmp     al, 0
    19 000000D2 7404                <1>         je      .10E
    20                              <1> 
    21 000000D4 CD10                <1>         int     0x10
    22 000000D6 EBF7                <1>         jmp     .10L
    23                              <1> .10E:
    24                              <1> 
    25 000000D8 5E                  <1>         pop     si
    26 000000D9 5B                  <1>         pop     bx
    27 000000DA 58                  <1>         pop     ax
    28                              <1> 
    29 000000DB 89EC                <1>         mov     sp, bp
    30 000000DD 5D                  <1>         pop     bp
    31                              <1> 
    32 000000DE C3                  <1>         ret
    89                                  %include	"../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3 000000DF 68[FB00]E8DBFF83C4- <1>         cdecl   puts, .s0   ;メッセージの表示
     3 000000E7 02                  <1>
     4                              <1> 
     5                              <1> ; キー入力待ち
     6                              <1> 
     7                              <1> .10L:
     8 000000E8 B410                <1>         mov     ah, 0x10
     9 000000EA CD16                <1>         int     0x16
    10                              <1> 
    11 000000EC 3C20                <1>         cmp     al, ' '
    12 000000EE 75F8                <1>         jne     .10L
    13                              <1> 
    14                              <1> ;改行を出力
    15 000000F0 68[1901]E8CAFF83C4- <1>         cdecl   puts, .s1
    15 000000F8 02                  <1>
    16                              <1> 
    17                              <1> ;再起動
    18 000000F9 CD19                <1>         int     0x19    ; BIOS(0x19)
    19                              <1> 
    20                              <1> ;文字列データ
    21 000000FB 0A0D50757368205350- <1> .s0     db      0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 00000104 414345206B65792074- <1>
    21 0000010D 6F207265626F6F742E- <1>
    21 00000116 2E2E00              <1>
    22 00000119 0A0D0A0D00          <1> .s1     db      0x0A, 0x0D, 0x0A, 0x0D, 0
    90                                  %include	"../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>                             
     3 0000011E 55                  <1>         push    bp
     4 0000011F 89E5                <1>         mov     bp, sp
     5 00000121 6A03                <1>         push    3           ; リトライ回数
     6 00000123 6A00                <1>         push    0           ; 読み込みセクタ数
     7                              <1> 
     8 00000125 53                  <1>         push    bx
     9 00000126 51                  <1>         push    cx
    10 00000127 52                  <1>         push    dx
    11 00000128 06                  <1>         push    es
    12 00000129 56                  <1>         push    si
    13                              <1> 
    14 0000012A 8B7604              <1>         mov     si, [bp + 4]    ;si = srcバッファ
    15                              <1> 
    16                              <1> ; cxレジスタの設定
    17                              <1> 
    18 0000012D 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]   ; ch = シリンダ番号（上位バイト）
    19 00000130 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]   ; cl = シリンダ番号（下位バイト）
    20 00000133 C0E106              <1>         shl     cl, 6                       ; cl <<=6 最上位２ビットにシフト
    21 00000136 0A4C06              <1>         or      cl, [si + drive.sect]       ;セクタ番号
    22                              <1> 
    23                              <1> ; セクタ読み込み
    24 00000139 8A7404              <1>         mov     dh, [si + drive.head]       ;dh = ヘッド番号
    25 0000013C 8A14                <1>         mov     dl, [si + 0]                ;dl = ドライブ番号
    26 0000013E B80000              <1>         mov     ax, 0x0000                  
    27 00000141 8EC0                <1>         mov     es, ax
    28 00000143 8B5E08              <1>         mov     bx, [bp + 8]                ; コピー先
    29                              <1> .10L:
    30                              <1> 
    31 00000146 B402                <1>         mov     ah, 0x02                    ; セクタ読み込み
    32 00000148 8A4606              <1>         mov     al, [bp + 6]                ; セクタ数
    33                              <1> 
    34 0000014B CD13                <1>         int     0x13           
    35 0000014D 7304                <1>         jnc     .11E
    36                              <1> 
    37 0000014F B000                <1>         mov     al, 0                       
    38 00000151 EB0C                <1>         jmp     .10E
    39                              <1> 
    40                              <1> .11E:                                           ; うまく行かなかったときのループ
    41                              <1> 
    42 00000153 3C00                <1>         cmp     al, 0   
    43 00000155 7508                <1>         jne     .10E
    44                              <1> 
    45 00000157 B80000              <1>         mov     ax, 0
    46 0000015A FF4EFE              <1>         dec     word [bp - 2]                   ;リトライ回数を１引く
    47 0000015D 75E7                <1>         jnz     .10L
    48                              <1> 
    49                              <1> .10E:    
    50 0000015F B400                <1>         mov     ah, 0                          
    51                              <1> 
    52                              <1> 
    53 00000161 5E                  <1>         pop     si
    54 00000162 07                  <1>         pop     es
    55 00000163 5A                  <1>         pop     dx
    56 00000164 59                  <1>         pop     cx
    57 00000165 5B                  <1>         pop     bx
    58                              <1> 
    59 00000166 89EC                <1>         mov     sp, bp
    60 00000168 5D                  <1>         pop     bp
    61                              <1> 
    62 00000169 C3                  <1>         ret
    91                                  
    92                                  ;************************************************************************
    93                                  ;	ブートフラグ（先頭512バイトの終了）
    94                                  ;************************************************************************
    95 0000016A 00<rept>                		times	510 - ($ - $$) db 0x00
    96 000001FE 55AA                    		db	0x55, 0xAA
    97                                  
    98                                  ;************************************************************************
    99                                  ;	リアルモード時に取得した情報
   100                                  ;************************************************************************
   101                                  FONT:											; フォント
   102 00000200 0000                    .seg:	dw	0
   103 00000202 0000                    .off:	dw	0
   104                                  ACPI_DATA:										; ACPI data
   105 00000204 00000000                .adr:	dd	0									; ACPI data address
   106 00000208 00000000                .len:	dd	0									; ACPI data length
   107                                  
   108                                  ;************************************************************************
   109                                  ;	モジュール（先頭512バイト以降に配置）
   110                                  ;************************************************************************
   111                                  %include	"../modules/real/itoa.s"
     1                              <1> itoa:
     2 0000020C 55                  <1>         push    bp
     3 0000020D 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 0000020F 50                  <1>         push    ax
     6 00000210 53                  <1>         push    bx
     7 00000211 51                  <1>         push    cx
     8 00000212 52                  <1>         push    dx
     9 00000213 56                  <1>         push    si
    10 00000214 57                  <1>         push    di
    11                              <1> 
    12                              <1> ;引数を取得
    13                              <1> 
    14 00000215 8B4604              <1>         mov     ax, [bp + 4]        ; 数値
    15 00000218 8B7606              <1>         mov     si, [bp + 6]        ; バッファアドレス
    16 0000021B 8B4E08              <1>         mov     cx, [bp + 8]        ;バッファサイズ
    17                              <1> 
    18 0000021E 89F7                <1>         mov     di, si
    19 00000220 01CF                <1>         add     di, cx
    20 00000222 4F                  <1>         dec     di      ;バッファの最後尾
    21                              <1> 
    22 00000223 8B5E0C              <1>         mov     bx, word[bp + 12] ;flags = オプション
    23                              <1> 
    24                              <1> ;符号付き判定
    25                              <1> 
    26 00000226 F7C30100            <1>         test    bx, 0b001
    27 0000022A 7408                <1> .10Q:   je      .10E
    28 0000022C 83F800              <1>         cmp     ax, 0
    29 0000022F 7D03                <1> .12Q:   jge     .12E
    30 00000231 83CB02              <1>         or      bx, 0b0010
    31                              <1> .12E:
    32                              <1> .10E:
    33                              <1> 
    34                              <1> ;符号出力判定
    35                              <1> 
    36 00000234 F7C30200            <1>         test    bx, 0b0010
    37 00000238 7410                <1> .20Q:   je      .20E
    38 0000023A 83F800              <1>         cmp     ax, 0
    39 0000023D 7D07                <1> .22Q:   jge     .22F
    40 0000023F F7D8                <1>         neg     ax
    41 00000241 C6042D              <1>         mov     [si], byte '-'   ;先頭にマイナスを表示
    42 00000244 EB03                <1>         jmp     .22E
    43                              <1> .22F:   
    44                              <1> 
    45 00000246 C6042B              <1>         mov     [si], byte '+'  ;先頭にプラスを表示
    46                              <1> 
    47                              <1> .22E:   
    48 00000249 49                  <1>         dec     cx
    49                              <1> 
    50                              <1> .20E:
    51                              <1> 
    52                              <1> ; ASCII変換
    53 0000024A 8B5E0A              <1>         mov bx, [bp + 10]        ;基数
    54                              <1> 
    55                              <1> .30L:
    56 0000024D BA0000              <1>         mov     dx, 0                   ;基数で割ることによって基数に合わせた数値にする
    57 00000250 F7F3                <1>         div     bx                     ; dx = dx:ax % bx
    58                              <1> 
    59 00000252 89D6                <1>         mov     si, dx                              
    60 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]
    61                              <1> 
    62 00000258 8815                <1>         mov     [di], dl                ;diは一番うしろの数値のアドレス
    63 0000025A 4F                  <1>         dec     di
    64                              <1> 
    65 0000025B 83F800              <1>         cmp     ax, 0
    66 0000025E E0ED                <1>         loopnz  .30L
    67                              <1> .30E:
    68                              <1> 
    69                              <1> ;空欄を埋める
    70                              <1> 
    71 00000260 83F900              <1>         cmp     cx, 0
    72 00000263 740D                <1> .40Q:   je      .40E
    73 00000265 B020                <1>         mov     al, ' '
    74 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100             ;フラグ
    75 0000026B 7502                <1> .42Q:   jne     .42E
    76 0000026D B030                <1>         mov     al, '0'
    77                              <1> .42E:
    78 0000026F FD                  <1>         std
    79 00000270 F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1> ;レジスタ復帰とスタックフレームの廃棄
    83                              <1> 
    84 00000272 5F                  <1>         pop     di
    85 00000273 5E                  <1>         pop     si
    86 00000274 5A                  <1>         pop     dx 
    87 00000275 59                  <1>         pop     cx
    88 00000276 5B                  <1>         pop     bx
    89 00000277 58                  <1>         pop     ax
    90                              <1> 
    91 00000278 89EC                <1>         mov     sp, bp
    92 0000027A 5D                  <1>         pop     bp
    93                              <1> 
    94 0000027B C3                  <1>         ret
    95                              <1> 
    96 0000027C 303132333435363738- <1> .ascii:  db      "0123456789ABCDEF"          ;変換テーブル
    96 00000285 39414243444546      <1>
   112                                  %include	"../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         
     3 0000028C 55                  <1>         push    bp
     4 0000028D 89E5                <1>         mov     bp, sp
     5                              <1> 
     6 0000028F 53                  <1>         push    bx
     7 00000290 51                  <1>         push    cx
     8 00000291 06                  <1>         push    es
     9 00000292 56                  <1>         push    si
    10 00000293 57                  <1>         push    di
    11                              <1> 
    12 00000294 8B7604              <1>         mov     si, [bp + 4]
    13 00000297 B80000              <1>         mov     ax, 0
    14 0000029A 8EC0                <1>         mov     es, ax
    15 0000029C 89C7                <1>         mov     di, ax
    16                              <1> 
    17 0000029E B408                <1>         mov     ah, 8                   ;get drive parameters
    18 000002A0 8A14                <1>         mov     dl, [si + drive.no]     ;dl = ドライブ番号
    19 000002A2 CD13                <1>         int     0x13                    ;cf = bios(0x13, 8)
    20 000002A4 721B                <1> .10Q:   jc      .10F
    21                              <1> .10T:   
    22 000002A6 88C8                <1>         mov     al, cl                  ;ax = セクタ数
    23 000002A8 25F300              <1>         and     ax, 0xF3                ;下位6ビットのみ有効
    24                              <1> 
    25 000002AB C0E906              <1>         shr     cl, 6                   ; cx = シリンダ数
    26 000002AE C1C908              <1>         ror     cx, 8                   ;
    27 000002B1 41                  <1>         inc     cx
    28                              <1> 
    29 000002B2 0FB6DE              <1>         movzx   bx, dh
    30 000002B5 43                  <1>         inc     bx
    31                              <1> 
    32 000002B6 894C02              <1>         mov     [si + drive.cyln], cx    ; drive.syln シリンダ数
    33 000002B9 895C04              <1>         mov     [si + drive.head], bx    ; drive.head ヘッド数
    34 000002BC 894406              <1>         mov     [si + drive.sect], ax    ; drive.sect セクタ数
    35                              <1> 
    36 000002BF EB03                <1>         jmp     .10E
    37                              <1> 
    38                              <1> .10F:   
    39 000002C1 B80000              <1>         mov     ax, 0
    40                              <1> .10E:
    41                              <1> 
    42 000002C4 5F                  <1>         pop     di
    43 000002C5 5E                  <1>         pop     si
    44 000002C6 07                  <1>         pop     es
    45 000002C7 59                  <1>         pop     cx
    46 000002C8 5B                  <1>         pop     bx
    47                              <1> 
    48 000002C9 89EC                <1>         mov     sp, bp
    49 000002CB 5D                  <1>         pop     bp
    50                              <1> 
    51 000002CC C3                  <1>         ret
   113                                  %include	"../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:     
     2                              <1>                             ;    +4|  フォントアドレス格納場所        
     3 000002CD 55                  <1>         push    bp          ;    +2|   IP戻り値
     4 000002CE 89E5                <1>         mov     bp, sp      ;  BP+0|   BP
     5                              <1> 
     6                              <1> 
     7 000002D0 50                  <1>         push    ax
     8 000002D1 53                  <1>         push    bx
     9 000002D2 56                  <1>         push    si
    10 000002D3 06                  <1>         push    es
    11 000002D4 55                  <1>         push    bp
    12                              <1> 
    13 000002D5 8B7604              <1>         mov     si, [bp + 4]        ;引数であるフォントアドレス格納場所を取得
    14                              <1>         
    15 000002D8 B83011              <1>         mov     ax, 0x1130       ;BIOS から フォントアドレスを取得するためのもの
    16 000002DB B706                <1>         mov     bh, 0x06           ;サイズの指定 8x16 font (vga/mcga)
    17 000002DD CD10                <1>         int     10h
    18                              <1> 
    19 000002DF 8C04                <1>         mov     [si + 0], es      ;dst[0] = セグメント
    20 000002E1 896C02              <1>         mov     [si + 2], bp      ;dst[1] = オフセット
    21                              <1> 
    22 000002E4 5D                  <1>         pop     bp 
    23 000002E5 07                  <1>         pop     es
    24 000002E6 5E                  <1>         pop     si
    25 000002E7 5B                  <1>         pop     bx
    26 000002E8 58                  <1>         pop     ax
    27                              <1> 
    28 000002E9 89EC                <1>         mov     sp, bp
    29 000002EB 5D                  <1>         pop     bp
    30                              <1> 
    31 000002EC C3                  <1>         ret
   114                                  %include	"../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 
     3 000002ED 6650                <1>         push    eax
     4 000002EF 6653                <1>         push    ebx
     5 000002F1 6651                <1>         push    ecx
     6 000002F3 6652                <1>         push    edx
     7 000002F5 56                  <1>         push    si
     8 000002F6 57                  <1>         push    di
     9 000002F7 55                  <1>         push    bp
    10                              <1> 
    11 000002F8 BD0000              <1>         mov     bp, 0                   ; lines = 0 //行数
    12 000002FB 66BB00000000        <1>         mov     ebx, 0                  ; index = 0
    13                              <1> .10L:
    14                              <1> 
    15 00000301 66B820E80000        <1>         mov    eax, 0x0000E820          ; EAX = 0xE820
    16                              <1> 
    17 00000307 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE   ;ebx = インデックス
    18 0000030D 66BA50414D53        <1>         mov     edx, 'PAMS'             ; ecx = サイズ
    19 00000313 BF[9203]            <1>         mov     di, .b0                 ; edx = 'SMAP'
    20 00000316 CD15                <1>         int     0x15                    ; es:di = バッファ
    21                              <1> 
    22 00000318 663D50414D53        <1>         cmp     eax, 'PAMS'
    23 0000031E 7402                <1>         je      .12E
    24 00000320 EB4E                <1>         jmp     .10E
    25                              <1> .12E:
    26 00000322 7302                <1>         jnc     .14E
    27 00000324 EB4A                <1>         jmp     .10E
    28                              <1> 
    29                              <1> .14E:
    30 00000326 57E87C0083C402      <1>         cdecl   put_mem_info, di       ; 1レコード分のメモリ情報を表示
    31                              <1> 
    32                              <1>         ; acpi data のアドレスを取得
    33                              <1> 
    34 0000032D 668B4510            <1>         mov     eax, [di + 16]          ; eax = レコードタイプ
    35 00000331 66B803000000        <1>         mov     eax, 3                  ; 3 の時 acpiデータが有る
    36 00000337 750F                <1>         jne     .15E
    37                              <1> 
    38 00000339 668B05              <1>         mov     eax, [di + 0]
    39 0000033C 66A3[0402]          <1>         mov     [ACPI_DATA.adr], eax         
    40                              <1> 
    41 00000340 668B4508            <1>         mov     eax, [di + 8]
    42 00000344 66A3[0802]          <1>         mov     [ACPI_DATA.len], eax 
    43                              <1> .15E:
    44 00000348 6683FB00            <1>         cmp     ebx, 0              ;   if(ebx != 0) // 最終レコードを取得するとebx に0が入る
    45 0000034C 741C                <1>         jz      .16E
    46                              <1> 
    47 0000034E 45                  <1>         inc     bp                  ;line++
    48 0000034F 83E507              <1>         and     bp, 0x07            ;lines &= 0x07
    49 00000352 7516                <1>         jnz     .16E                ;if lines==0
    50                              <1> 
    51 00000354 68[7C03]E866FD83C4- <1>         cdecl   puts, .s2
    51 0000035C 02                  <1>
    52                              <1> 
    53 0000035D B410                <1>         mov     ah, 0x10            ; al = bios(0x16, 0x10) キー入力待ち
    54 0000035F CD16                <1>         int     0x16
    55                              <1> 
    56 00000361 68[8603]E859FD83C4- <1>         cdecl   puts, .s3
    56 00000369 02                  <1>
    57                              <1> .16E:
    58 0000036A 6683FB00            <1>         cmp     ebx, 0
    59 0000036E 7591                <1>         jne     .10L
    60                              <1> .10E:
    61 00000370 5D                  <1> 	pop	bp
    62 00000371 5F                  <1> 	pop	di
    63 00000372 5E                  <1> 	pop	si
    64 00000373 665A                <1> 	pop	edx
    65 00000375 6659                <1> 	pop	ecx
    66 00000377 665B                <1> 	pop	ebx
    67 00000379 6658                <1> 	pop	eax
    68                              <1> 
    69 0000037B C3                  <1> 	ret
    70                              <1> 
    71                              <1> 
    72 0000037C 3C6D6F72652E2E2E3E- <1> .s2:    db "<more...>", 0
    72 00000385 00                  <1>
    73 00000386 0D2020202020202020- <1> .s3:    db 0x0D, "         ", 0x0D, 0
    73 0000038F 200D00              <1>
    74                              <1> 
    75                              <1> 
    76 00000392 00<rept>            <1> .b0:	times E820_RECORD_SIZE db 0
    77                              <1> 
    78                              <1> put_mem_info:
    79                              <1>         
    80 000003A6 55                  <1>         push    bp
    81 000003A7 89E5                <1>         mov     bp, sp
    82                              <1> 
    83 000003A9 53                  <1>         push    bx
    84 000003AA 56                  <1>         push    si
    85                              <1> 
    86 000003AB 8B7604              <1>         mov     si, [bp + 4]
    87                              <1> 
    88 000003AE 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    88 000003B5 [8504]FF7406E84FFE- <1>
    88 000003BD 83C40A              <1>
    89 000003C0 6A046A106A0468-     <1>         cdecl   itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
    89 000003C7 [8904]FF7404E83DFE- <1>
    89 000003CF 83C40A              <1>
    90 000003D2 6A046A106A0468-     <1>         cdecl   itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
    90 000003D9 [8E04]FF7402E82BFE- <1>
    90 000003E1 83C40A              <1>
    91 000003E4 6A046A106A0468-     <1>         cdecl   itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
    91 000003EB [9204]FF34E81AFE83- <1>
    91 000003F3 C40A                <1>
    92                              <1> 
    93 000003F5 6A046A106A0468-     <1>         cdecl   itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
    93 000003FC [9704]FF740EE808FE- <1>
    93 00000404 83C40A              <1>
    94 00000407 6A046A106A0468-     <1>         cdecl   itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
    94 0000040E [9B04]FF740CE8F6FD- <1>
    94 00000416 83C40A              <1>
    95 00000419 6A046A106A0468-     <1>         cdecl   itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
    95 00000420 [A004]FF740AE8E4FD- <1>
    95 00000428 83C40A              <1>
    96 0000042B 6A046A106A0468-     <1>         cdecl   itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
    96 00000432 [A404]FF7408E8D2FD- <1>
    96 0000043A 83C40A              <1>
    97                              <1> 
    98 0000043D 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    98 00000444 [8504]FF7406E8C0FD- <1>
    98 0000044C 83C40A              <1>
    99 0000044F 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    99 00000456 [8504]FF7406E8AEFD- <1>
    99 0000045E 83C40A              <1>
   100                              <1> 
   101 00000461 68[8404]E859FC83C4- <1>         cdecl   puts, .s1
   101 00000469 02                  <1>
   102                              <1> 
   103 0000046A 8B5C10              <1>         mov     bx, [si + 16]   ;Type文字列を表示したい
   104 0000046D 83E307              <1>         and     bx, 0x07                
   105 00000470 D1E3                <1>         shl     bx, 1
   106 00000472 81C3[0605]          <1>         add     bx, .t0         ;テーブルの先頭アドレスを加算
   107 00000476 FF37E845FC83C402    <1>         cdecl   puts, word[bx]
   108                              <1> 
   109 0000047E 5E                  <1>         pop     si
   110 0000047F 5B                  <1> 	pop	bx
   111                              <1> 
   112 00000480 89EC                <1> 	mov	sp, bp
   113 00000482 5D                  <1> 	pop	bp
   114                              <1> 
   115 00000483 C3                  <1> 	ret
   116                              <1> 
   117                              <1> 
   118                              <1> 
   119 00000484 20                  <1> .s1:	db " "
   120 00000485 5A5A5A5A5A5A5A5A5F  <1> .p2:	db "ZZZZZZZZ_"
   121 0000048E 5A5A5A5A5A5A5A5A20  <1> .p3:	db "ZZZZZZZZ "
   122 00000497 5A5A5A5A5A5A5A5A5F  <1> .p4:	db "ZZZZZZZZ_"
   123 000004A0 5A5A5A5A5A5A5A5A20  <1> .p5:	db "ZZZZZZZZ "
   124 000004A9 5A5A5A5A5A5A5A5A00  <1> .p6:	db "ZZZZZZZZ", 0
   125                              <1> 
   126 000004B2 2028556E6B6E6F776E- <1> .s4:	db " (Unknown)", 0x0A, 0x0D, 0
   126 000004BB 290A0D00            <1>
   127 000004BF 2028757361626C6529- <1> .s5:	db " (usable)", 0x0A, 0x0D, 0
   127 000004C8 0A0D00              <1>
   128 000004CB 202872657365727665- <1> .s6:	db " (reserved)", 0x0A, 0x0D, 0
   128 000004D4 64290A0D00          <1>
   129 000004D9 202841435049206461- <1> .s7:	db " (ACPI data)", 0x0A, 0x0D, 0
   129 000004E2 7461290A0D00        <1>
   130 000004E8 202841435049204E56- <1> .s8:	db " (ACPI NVS)", 0x0A, 0x0D, 0
   130 000004F1 53290A0D00          <1>
   131 000004F6 2028626164206D656D- <1> .s9:	db " (bad memory)", 0x0A, 0x0D, 0
   131 000004FF 6F7279290A0D00      <1>
   132                              <1> 
   133 00000506 [B204][BF04][CB04]- <1> .t0:	dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   133 0000050C [D904][E804][F604]- <1>
   133 00000512 [B204][B204]        <1>
   134                              <1> 
   135                              <1>         
   115                                  %include	"../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2 00000516 55                  <1>         push    bp
     3 00000517 89E5                <1>         mov     bp, sp
     4 00000519 51                  <1>         push    cx
     5                              <1> 
     6 0000051A B90000              <1>         mov     cx, 0
     7                              <1> .10L:
     8 0000051D E464                <1>         in      al, 0x64        ; AL = inp(0x64) KBCステータス
     9 0000051F A802                <1>         test    al, 0x02        ; ZF = AL & 0x02  書き込み可能か？
    10 00000521 E0FA                <1>         loopnz  .10L
    11                              <1> 
    12 00000523 83F900              <1>         cmp     cx, 0
    13 00000526 7405                <1>         jz     .20E
    14                              <1> 
    15 00000528 8A4604              <1>         mov     al, [bp + 4]    ; AL = データ
    16 0000052B E660                <1>         out     0x60, al        ; outp(0x60, AL) 60番ポートつまりデータとしてpcが解釈
    17                              <1> .20E:
    18 0000052D 89C8                <1>         mov     ax, cx
    19                              <1>         
    20 0000052F 59                  <1>         pop     cx
    21 00000530 89EC                <1>         mov     sp, bp
    22 00000532 5D                  <1>         pop     bp
    23 00000533 C3                  <1>         ret                     ;うまくいくとゼロ以外が帰る
    24                              <1> 
    25                              <1> KBC_Data_Read:
    26 00000534 55                  <1>         push    bp
    27 00000535 89E5                <1>         mov     bp, sp
    28 00000537 51                  <1>         push    cx
    29 00000538 57                  <1>         push    di
    30                              <1> 
    31 00000539 B90000              <1>         mov     cx, 0
    32                              <1> .10L:
    33 0000053C E464                <1>         in      al, 0x64        ; AL = inp(0x64) KBCステータス
    34 0000053E A801                <1>         test    al, 0x01        ; ZF = AL & 0x01  読み込み可能か？
    35 00000540 E1FA                <1>         loopz  .10L
    36                              <1> 
    37 00000542 83F900              <1>         cmp     cx, 0
    38 00000545 7409                <1>         jz     .20E
    39                              <1> 
    40 00000547 B400                <1>         mov     ah, 0x00        ; ah = 0x00
    41 00000549 E460                <1>         in      al, 0x60        ; al = inp(0x60)
    42                              <1> 
    43 0000054B 8B7E04              <1>         mov     di, [bp + 4]    ; di = ptr
    44 0000054E 8905                <1>         mov     [di + 0], ax    ; 
    45                              <1> .20E:
    46 00000550 89C8                <1>         mov     ax, cx
    47                              <1>         
    48 00000552 5F                  <1>         pop     di
    49 00000553 59                  <1>         pop     cx
    50 00000554 89EC                <1>         mov     sp, bp
    51 00000556 5D                  <1>         pop     bp
    52 00000557 C3                  <1>         ret
    53                              <1> 
    54                              <1> KBC_Cmd_Write:         ; KBC_Data_Writeとほぼ同じ
    55 00000558 55                  <1>         push    bp
    56 00000559 89E5                <1>         mov     bp, sp
    57 0000055B 51                  <1>         push    cx
    58                              <1> 
    59 0000055C B90000              <1>         mov     cx, 0
    60                              <1> .10L:
    61 0000055F E464                <1>         in      al, 0x64        
    62 00000561 A802                <1>         test    al, 0x02        
    63 00000563 E0FA                <1>         loopnz  .10L
    64                              <1> 
    65 00000565 83F900              <1>         cmp     cx, 0
    66 00000568 7405                <1>         jz     .20E
    67                              <1> 
    68 0000056A 8A4604              <1>         mov     al, [bp + 4]   
    69 0000056D E664                <1>         out     0x64, al        ; outp(0x64, AL)  64ポート つまり コマンド書き込みとしてPCが解釈
    70                              <1> .20E:
    71 0000056F 89C8                <1>         mov     ax, cx
    72                              <1>         
    73 00000571 59                  <1>         pop     cx
    74 00000572 89EC                <1>         mov     sp, bp
    75 00000574 5D                  <1>         pop     bp
    76 00000575 C3                  <1>         ret
   116                                  %include	"../modules/real/lba_chs.s"
     1                              <1> lba_chs:
     2                              <1> ;■書式		: void lba_chs(drive, drv_chs, lba);
     3                              <1> ;
     4                              <1> ;■引数
     5                              <1> ;	drive	: drive構造体のアドレス
     6                              <1> ;			:（ドライブパラメータが格納されている）
     7                              <1> ;	drv_chs	: drive構造体のアドレス
     8                              <1> ;			:（変換後のシリンダ番号、ヘッド番号そしてセクタ番号を保存する）
     9                              <1> ;	lba		: LBA
    10                              <1> ;
    11                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    12                              <1> 
    13 00000576 55                  <1>         push    bp
    14 00000577 89E5                <1>         mov     bp, sp
    15                              <1> 
    16 00000579 50                  <1>         push    ax
    17 0000057A 53                  <1>         push    bx 
    18 0000057B 52                  <1>         push    dx
    19 0000057C 56                  <1>         push    si
    20 0000057D 57                  <1>         push    di
    21                              <1> 
    22 0000057E 8B7604              <1>         mov     si, [bp + 4]
    23 00000581 8B7E06              <1>         mov     di, [bp + 6]
    24                              <1> 
    25 00000584 8A4404              <1>         mov     al, [si + drive.head]       ;最大ヘッド数
    26 00000587 F66406              <1>         mul     byte [si + drive.sect]      ; 上 * 最大シリンダ数 
    27 0000058A 89C3                <1>         mov     bx, ax
    28 0000058C BA0000              <1>         mov     dx, 0                       ;LBA上位2バイト
    29 0000058F 8B4608              <1>         mov     ax, [bp + 8]                ; 下位バイト
    30 00000592 F7F3                <1>         div     bx                          ; dx:ax % bx ; 残り
    31                              <1>                                             ; dx:ax / bx ; シリンダ番号
    32 00000594 894502              <1>         mov     [di + drive.cyln], ax       ; シリンダ番号
    33                              <1> 
    34 00000597 89D0                <1>         mov     ax, dx
    35 00000599 F67406              <1>         div     byte [si + drive.sect]      ; ah = ax % 最大セクタ数
    36                              <1> 
    37 0000059C 0FB6D4              <1>         movzx   dx, ah                      ; dx = セクタ番号
    38 0000059F 42                  <1>         inc     dx                              ; 自然数にするため
    39                              <1> 
    40 000005A0 B400                <1>         mov     ah, 0x00                    ; AX = ヘッド位置
    41                              <1> 
    42 000005A2 894504              <1>         mov     [di + drive.head], ax       ;  ヘッダ番号
    43 000005A5 895506              <1>         mov     [di + drive.sect], dx       ; drv_chs.sect = セクタ番号
    44                              <1> 
    45 000005A8 5F                  <1>         pop     di
    46 000005A9 5E                  <1>         pop     si
    47 000005AA 5A                  <1>         pop     dx
    48 000005AB 5B                  <1>         pop     bx
    49 000005AC 58                  <1>         pop     ax
    50                              <1> 
    51 000005AD 89EC                <1>         mov     sp, bp
    52 000005AF 5D                  <1>         pop     bp
    53                              <1> 
    54 000005B0 C3                  <1>         ret
   117                                  %include	"../modules/real/read_lba.s"
     1                              <1> read_lba:
     2                              <1> 
     3 000005B1 55                  <1>         push    bp
     4 000005B2 89E5                <1>         mov     bp, sp
     5 000005B4 56                  <1>         push    si
     6                              <1> 
     7 000005B5 8B7604              <1>         mov     si, [bp + 4]        ; ドライブ情報
     8                              <1> 
     9 000005B8 8B4606              <1>         mov     ax, [bp + 6]        ; LBA
    10 000005BB 5068[E005]56E8B3FF- <1>         cdecl   lba_chs, si, .chs, ax; lba_chs(drive, .chs, ax);
    10 000005C3 83C406              <1>
    11                              <1> 
    12 000005C6 8A04                <1>         mov     al, [si + drive.no]
    13 000005C8 A2[E005]            <1>         mov     [.chs + drive.no], al; ドライブ番号
    14                              <1> 
    15 000005CB FF760AFF760868-     <1>         cdecl   read_chs, .chs, word [bp + 8], word [bp + 10] ; ax = read_chs(.chs, セクタ数, ofs)
    15 000005D2 [E005]E847FB83C406  <1>
    16                              <1> 
    17 000005DA 5E                  <1>         pop     si
    18 000005DB 89EC                <1>         mov     sp, bp
    19 000005DD 5D                  <1>         pop     bp
    20                              <1> 
    21 000005DE C3                  <1>         ret
    22                              <1> 
    23 000005DF 90                  <1> ALIGN 2
    24 000005E0 00<rept>            <1> .chs:   times drive_size        db  0
   118                                  
   119                                  ;************************************************************************
   120                                  ;	ブート処理の第2ステージ
   121                                  ;************************************************************************
   122                                  stage_2:
   123                                  		;---------------------------------------
   124                                  		; 文字列を表示
   125                                  		;---------------------------------------
   126 000005E8 68[6206]E8D2FA83C4-     		cdecl	puts, .s0						; puts(.s0);
   126 000005F0 02                 
   127                                  
   128                                  		;---------------------------------------
   129                                  		; ドライブ情報を取得
   130                                  		;---------------------------------------
   131 000005F1 68[B800]E895FC83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   131 000005F9 02                 
   132 000005FA 83F800                  		cmp		ax, 0							; if (0 == AX)
   133 000005FD 750C                    .10Q:	jne		.10E							; {
   134 000005FF 68[9906]E8BBFA83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   134 00000607 02                 
   135 00000608 E8D4FA                  		call	reboot							;   reboot(); // 再起動
   136                                  .10E:											; }
   137                                  
   138                                  		;---------------------------------------
   139                                  		; ドライブ情報を表示
   140                                  		;---------------------------------------
   141 0000060B A1[B800]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   142 0000060E 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   142 00000615 [7A06]50E8F1FB83C4-
   142 0000061D 0A                 
   143 0000061E A1[BA00]                		mov		ax, [BOOT + drive.cyln]			; 
   144 00000621 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   144 00000628 [8206]50E8DEFB83C4-
   144 00000630 0A                 
   145 00000631 A1[BC00]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   146 00000634 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   146 0000063B [8C06]50E8CBFB83C4-
   146 00000643 0A                 
   147 00000644 A1[BE00]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   148 00000647 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   148 0000064E [9406]50E8B8FB83C4-
   148 00000656 0A                 
   149 00000657 68[7106]E863FA83C4-     		cdecl	puts, .s1
   149 0000065F 02                 
   150                                  
   151                                  		;---------------------------------------
   152                                  		; 次のステージへ移行
   153                                  		;---------------------------------------
   154 00000660 EB52                    		jmp		stage_3rd						; 次のステージへ移行
   155                                  
   156                                  		;---------------------------------------
   157                                  		; データ
   158                                  		;---------------------------------------
   159 00000662 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   159 0000066B 2E2E2E0A0D00       
   160                                  
   161 00000671 2044726976653A3078      .s1		db	" Drive:0x"
   162 0000067A 20202C20433A3078        .p1		db	"  , C:0x"
   163 00000682 202020202C20483A30-     .p2		db	"    , H:0x"
   163 0000068B 78                 
   164 0000068C 20202C20533A3078        .p3		db	"  , S:0x"
   165 00000694 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   166                                  
   167 00000699 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   167 000006A2 206472697665207061-
   167 000006AB 72616D657465722E00 
   168                                  
   169                                  ;************************************************************************
   170                                  ;	ブート処理の第3ステージ
   171                                  ;************************************************************************
   172                                  stage_3rd:
   173                                  		;---------------------------------------
   174                                  		; 文字列を表示
   175                                  		;---------------------------------------
   176 000006B4 68[3107]E806FA83C4-     		cdecl	puts, .s0
   176 000006BC 02                 
   177                                  
   178                                  		;---------------------------------------
   179                                  		; プロテクトモードで使用するフォントは、
   180                                  		; BIOSに内蔵されたものを流用する
   181                                  		;---------------------------------------
   182 000006BD 68[0002]E80AFC83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   182 000006C5 02                 
   183                                  
   184                                  		;---------------------------------------
   185                                  		; フォントアドレスの表示
   186                                  		;---------------------------------------
   187 000006C6 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   187 000006CD [4E07]FF36[0002]E8-
   187 000006D4 36FB83C40A         
   188 000006D9 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   188 000006E0 [5307]FF36[0202]E8-
   188 000006E7 23FB83C40A         
   189 000006EC 68[4007]E8CEF983C4-     		cdecl	puts, .s1
   189 000006F4 02                 
   190                                  
   191                                  		;---------------------------------------
   192                                  		; メモリ情報の取得と表示
   193                                  		;---------------------------------------
   194 000006F5 E8F5FB                  		cdecl	get_mem_info					; get_mem_info();
   195                                  
   196 000006F8 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   197 000006FC 6683F800                		cmp		eax, 0							; if (EAX)
   198 00000700 742D                    		je		.10E							; {
   199                                  
   200 00000702 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   200 00000709 [6C07]50E8FDFA83C4-
   200 00000711 0A                 
   201 00000712 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   202 00000716 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   202 0000071D [6807]50E8E9FA83C4-
   202 00000725 0A                 
   203                                  
   204 00000726 68[5D07]E894F983C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   204 0000072E 02                 
   205                                  .10E:											; }
   206                                  
   207                                  		;---------------------------------------
   208                                  		; 次のステージへ移行
   209                                  		;---------------------------------------
   210 0000072F EB42                    		jmp		stage_4							; 次のステージへ移行
   211                                  
   212                                  		;---------------------------------------
   213                                  		; データ
   214                                  		;---------------------------------------
   215 00000731 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   215 0000073A 2E2E2E0A0D00       
   216                                  
   217 00000740 20466F6E7420416464-     .s1:	db	" Font Address="
   217 00000749 726573733D         
   218 0000074E 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   219 00000753 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   220 0000075A 0A0D00                  		db	0x0A, 0x0D, 0
   221                                  
   222 0000075D 204143504920646174-     .s2:	db	" ACPI data="
   222 00000766 613D               
   223 00000768 5A5A5A5A                .p3:	db	"ZZZZ"
   224 0000076C 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   225                                  
   226                                  ;************************************************************************
   227                                  ;	ブート処理の第4ステージ
   228                                  ;************************************************************************
   229                                  stage_4:
   230                                  		;---------------------------------------
   231                                  		; 文字列を表示
   232                                  		;---------------------------------------
   233 00000773 68[4708]E847F983C4-     		cdecl	puts, .s0
   233 0000077B 02                 
   234                                  
   235                                  		;---------------------------------------
   236                                  		; A20ゲートの有効化
   237                                  		;---------------------------------------
   238 0000077C FA                      		cli										;   // 割り込み禁止
   239                                  												;   
   240 0000077D 68AD00E8D5FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   241                                  												;   
   242 00000786 68D000E8CCFD83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   243 0000078F 68[9008]E89FFD83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   243 00000797 02                 
   244                                  												;   
   245 00000798 8A1E[9008]              		mov		bl, [.key]						;   BL  = key;
   246 0000079C 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   247                                  												;   
   248 0000079F 68D100E8B3FD83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   249 000007A8 53E86AFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   250                                  												;   
   251 000007AF 68AE00E8A3FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   252                                  												;   
   253 000007B8 FB                      		sti										;   // 割り込み許可
   254                                  
   255                                  		;---------------------------------------
   256                                  		; 文字列を表示
   257                                  		;---------------------------------------
   258 000007B9 68[5608]E801F983C4-     		cdecl	puts, .s1
   258 000007C1 02                 
   259                                  
   260                                  		;---------------------------------------
   261                                  		; キーボードLEDのテスト
   262                                  		;---------------------------------------
   263 000007C2 68[6B08]E8F8F883C4-     		cdecl	puts, .s2						; 
   263 000007CA 02                 
   264                                  
   265 000007CB BB0000                  		mov		bx, 0							; CX = LEDの初期値;
   266                                  .10L:											; do
   267                                  												; {
   268 000007CE B400                    		mov		ah, 0x00						;   // キー入力待ち
   269 000007D0 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   270                                  												;   
   271 000007D2 3C31                    		cmp		al, '1'							;   if (AL < '1')
   272 000007D4 7266                    		jb		.10E							;     break;
   273                                  												;   
   274 000007D6 3C33                    		cmp		al, '3'							;   if ('3' < AL)
   275 000007D8 7762                    		ja		.10E							;     break;
   276                                  												;   
   277 000007DA 88C1                    		mov		cl, al							;   CL   = キー入力;
   278 000007DC FEC9                    		dec		cl								;   CL  -= 1;       // 1減算
   279 000007DE 80E103                  		and		cl, 0x03						;   CL  &= 0x03;    // 0～2に制限
   280 000007E1 B80100                  		mov		ax, 0x0001						;   AX   = 0x0001;  // ビット変換用
   281 000007E4 D3E0                    		shl		ax, cl							;   AX <<= CL;      // 0～2ビット左シフト
   282 000007E6 31C3                    		xor		bx, ax							;   BX  ^= AX;      // ビット反転
   283                                  
   284                                  		;---------------------------------------
   285                                  		; LEDコマンドの送信
   286                                  		;---------------------------------------
   287 000007E8 FA                      		cli										;   // 割り込み禁止
   288                                  												;   
   289 000007E9 68AD00E869FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   290                                  												;   
   291 000007F2 68ED00E81EFD83C402      		cdecl	KBC_Data_Write, 0xED			;   // LEDコマンド
   292 000007FB 68[9008]E833FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 受信応答
   292 00000803 02                 
   293                                  												;   
   294 00000804 803E[9008]FA            		cmp		[.key], byte 0xFA				;   if (0xFA == key)
   295 00000809 7509                    		jne		.11F							;   {
   296                                  												;     
   297 0000080B 53E807FD83C402          		cdecl	KBC_Data_Write, bx				;     // LEDデータ出力
   298                                  												;   }
   299 00000812 EB1C                    		jmp		.11E							;   else
   300                                  .11F:											;   {
   301 00000814 6A046A106A0268-         		cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   301 0000081B [8C08]FF36[9008]E8-
   301 00000822 E8F983C40A         
   302 00000827 68[8B08]E893F883C4-     		cdecl	puts, .e0						;     // 受信コードを表示
   302 0000082F 02                 
   303                                  .11E:											;   }
   304                                  												;   
   305 00000830 68AE00E822FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   306                                  												;   
   307 00000839 FB                      		sti										;   // 割り込み許可
   308                                  												;   
   309 0000083A EB92                    		jmp		.10L							; } while (1);
   310                                  .10E:
   311                                  
   312                                  		;---------------------------------------
   313                                  		; 文字列を表示
   314                                  		;---------------------------------------
   315 0000083C 68[8108]E87EF883C4-     		cdecl	puts, .s3
   315 00000844 02                 
   316                                  
   317                                  		;---------------------------------------
   318                                  		; 次のステージへ移行
   319                                  		;---------------------------------------
   320 00000845 EB4B                    		jmp		stage_5							; 次のステージへ移行
   321                                  
   322 00000847 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   322 00000850 2E2E2E0A0D00       
   323 00000856 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   323 0000085F 20456E61626C65642E-
   323 00000868 0A0D00             
   324 0000086B 204B6579626F617264-     .s2:	db	" Keyboard LED Test...", 0
   324 00000874 204C45442054657374-
   324 0000087D 2E2E2E00           
   325 00000881 2028646F6E65290A0D-     .s3:	db	" (done)", 0x0A, 0x0D, 0
   325 0000088A 00                 
   326 0000088B 5B                      .e0:	db	"["
   327 0000088C 5A5A5D00                .e1:	db	"ZZ]", 0
   328                                  
   329 00000890 0000                    .key:	dw	0
   330                                  
   331                                  ;************************************************************************
   332                                  ;	ブート処理の第5ステージ
   333                                  ;************************************************************************
   334                                  stage_5:
   335                                  		;---------------------------------------
   336                                  		; 文字列を表示
   337                                  		;---------------------------------------
   338 00000892 68[BE08]E828F883C4-     		cdecl	puts, .s0
   338 0000089A 02                 
   339                                  
   340                                  		;---------------------------------------
   341                                  		; カーネルを読み込む
   342                                  		;---------------------------------------
   343 0000089B 68009C6A106A1068-       		cdecl	read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   343 000008A3 [B800]E809FD83C408 
   344                                  												; AX = read_lba(.lba, ...);
   345 000008AB 83F810                  		cmp		ax, KERNEL_SECT					; if (AX != CX)
   346 000008AE 740C                    .10Q:	jz		.10E							; {
   347 000008B0 68[CD08]E80AF883C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   347 000008B8 02                 
   348 000008B9 E823F8                  		call	reboot							;   reboot(); // 再起動
   349                                  .10E:											; }
   350                                  												; 
   351                                  
   352                                  		;---------------------------------------
   353                                  		; 次のステージへ移行
   354                                  		;---------------------------------------
   355 000008BC EB29                    		jmp		stage_6							; 次のステージへ移行
   356                                  
   357 000008BE 357468207374616765-     .s0		db	"5th stage...", 0x0A, 0x0D, 0
   357 000008C7 2E2E2E0A0D00       
   358 000008CD 204661696C75726520-     .e0		db	" Failure load kernel...", 0x0A, 0x0D, 0
   358 000008D6 6C6F6164206B65726E-
   358 000008DF 656C2E2E2E0A0D00   
   359                                  
   360                                  ;************************************************************************
   361                                  ;	ブート処理の第6ステージ
   362                                  ;************************************************************************
   363                                  stage_6:
   364                                  		;---------------------------------------
   365                                  		; 文字列を表示
   366                                  		;---------------------------------------
   367 000008E7 68[FF08]E8D3F783C4-     		cdecl	puts, .s0
   367 000008EF 02                 
   368                                  
   369                                  		;---------------------------------------
   370                                  		; ユーザーからの入力待ち
   371                                  		;---------------------------------------
   372                                  .10L:											; do
   373                                  												; {
   374 000008F0 B400                    		mov		ah, 0x00						;   // キー入力待ち
   375 000008F2 CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   376 000008F4 3C20                    		cmp		al, ' '							;   ZF = AL == ' ';
   377 000008F6 75F8                    		jne		.10L							; } while (!ZF);
   378                                  												; 
   379                                  
   380                                  		;---------------------------------------
   381                                  		; ビデオモードの設定
   382                                  		;---------------------------------------
   383 000008F8 B81200                  		mov		ax, 0x0012						; VGA 640x480
   384 000008FB CD10                    		int		0x10							; BIOS(0x10, 0x12); // ビデオモードの設定
   385                                  
   386                                  		;---------------------------------------
   387                                  		; 次のステージへ移行
   388                                  		;---------------------------------------
   389 000008FD EB5D                    		jmp		stage_7							; 次のステージへ移行
   390                                  
   391 000008FF 367468207374616765-     .s0		db	"6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   391 00000908 2E2E2E0A0D0A0D     
   392 0000090F 205B50757368205350-     		db	" [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   392 00000918 414345206B65792074-
   392 00000921 6F2070726F74656374-
   392 0000092A 206D6F64652E2E2E5D-
   392 00000933 0A0D00             
   393                                  
   394                                  ;************************************************************************
   395                                  ;	GLOBAL DESCRIPTOR TABLE
   396                                  ;	(セグメントディスクリプタの配列)
   397                                  ;************************************************************************
   398                                  ;
   399                                  ;   セグメントディスクリプタ
   400                                  ;
   401                                  ;        +--------+-----------------: Base (0xBBbbbbbb)
   402                                  ;        |   +----|--------+--------: Limit(0x000Lllll)
   403                                  ;        |   |    |        |
   404                                  ;       +--+--+--+--+--+--+--+--+
   405                                  ;       |B |FL|f |b       |l    |
   406                                  ;       +--+--+--+--+--+--+--+--+
   407                                  ;           |  |                         76543210
   408                                  ;           |  +--------------------: f:PDDSTTTA
   409                                  ;           |                          P:Exist
   410                                  ;           |                          D:DPL(特権)
   411                                  ;           |                          S:(DT)0=システムorゲート, 1=データセグメント
   412                                  ;           |                          T:Type
   413                                  ;           |                            000(0)=R/- DATA
   414                                  ;           |                            001(1)=R/W DATA
   415                                  ;           |                            010(2)=R/- STACK
   416                                  ;           |                            011(3)=R/W STACK
   417                                  ;           |                            100(4)=R/- CODE
   418                                  ;           |                            101(5)=R/W CODE
   419                                  ;           |                            110(6)=R/- CONFORM
   420                                  ;           |                            111(7)=R/W CONFORM
   421                                  ;           |                          A:Accessed
   422                                  ;           |                       
   423                                  ;           +-----------------------: F:GD0ALLLL
   424                                  ;                                      G:Limit Scale(0=1, 1=4K)
   425                                  ;                                      D:Data/BandDown(0=16, 1=32Bit セグメント)
   426                                  ;                                      A:any
   427                                  ;                                      L:Limit[19:16]
   428 00000936 00<rept>                ALIGN 4, db 0
   429                                  ;					  B_ F L f T b_____ l___
   430 00000938 0000000000000000        GDT:			dq	0x00_0_0_0_0_000000_0000	; NULL
   431 00000940 FFFF0000009ACF00        .cs:			dq	0x00_C_F_9_A_000000_FFFF	; CODE 4G
   432 00000948 FFFF00000092CF00        .ds:			dq	0x00_C_F_9_2_000000_FFFF	; DATA 4G
   433                                  .gdt_end:
   434                                  
   435                                  ;===============================================
   436                                  ;	セレクタ
   437                                  ;===============================================
   438                                  SEL_CODE	equ	.cs - GDT						; コード用セレクタ
   439                                  SEL_DATA	equ	.ds - GDT						; データ用セレクタ
   440                                  
   441                                  ;===============================================
   442                                  ;	GDT
   443                                  ;===============================================
   444 00000950 1700                    GDTR:	dw 		GDT.gdt_end - GDT - 1			; ディスクリプタテーブルのリミット
   445 00000952 [38090000]              		dd 		GDT								; ディスクリプタテーブルのアドレス
   446                                  
   447                                  ;===============================================
   448                                  ;	IDT（疑似：割り込み禁止にする為）
   449                                  ;===============================================
   450 00000956 0000                    IDTR:	dw 		0								; idt_limit
   451 00000958 00000000                		dd 		0								; idt location
   452                                  
   453                                  ;************************************************************************
   454                                  ;	ブート処理の第7ステージ
   455                                  ;************************************************************************
   456                                  stage_7:
   457 0000095C FA                      		cli										; // 割り込み禁止
   458                                  
   459                                  		;---------------------------------------
   460                                  		; GDTロード
   461                                  		;---------------------------------------
   462 0000095D 0F0116[5009]            		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
   463 00000962 0F011E[5609]            		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   464                                  
   465                                  		;---------------------------------------
   466                                  		; プロテクトモードへ移行
   467                                  		;---------------------------------------
   468 00000967 0F20C0                  		mov		eax,cr0							; // PEビットをセット
   469 0000096A 83C801                  		or		ax, 1							; CR0 |= 1;
   470 0000096D 0F22C0                  		mov		cr0,eax							; 
   471                                  
   472 00000970 EB00                    		jmp		$ + 2							; 先読みをクリア
   473                                  
   474                                  		;---------------------------------------
   475                                  		; セグメント間ジャンプ
   476                                  		;---------------------------------------
   477                                  [BITS 32]
   478 00000972 66                      		DB		0x66							; オペランドサイズオーバーライドプレフィックス
   479 00000973 EA[7A090000]0800        		jmp		SEL_CODE:CODE_32
   480                                  
   481                                  ;************************************************************************
   482                                  ;	32ビットコード開始
   483                                  ;************************************************************************
   484                                  CODE_32:
   485                                  
   486                                  		;---------------------------------------
   487                                  		; セレクタを初期化
   488                                  		;---------------------------------------
   489 0000097A 66B81000                		mov		ax, SEL_DATA					;
   490 0000097E 8ED8                    		mov		ds, ax							;
   491 00000980 8EC0                    		mov		es, ax							;
   492 00000982 8EE0                    		mov		fs, ax							;
   493 00000984 8EE8                    		mov		gs, ax							;
   494 00000986 8ED0                     		mov		ss, ax							;
   495                                  
   496                                  		;---------------------------------------
   497                                  		; カーネル部をコピー
   498                                  		;---------------------------------------
   499 00000988 B900080000              		mov		ecx, (KERNEL_SIZE) / 4			; ECX = 4バイト単位でコピー;
   500 0000098D BE009C0000              		mov		esi, BOOT_END					; ESI = 0x0000_9C00; // カーネル部
   501 00000992 BF00101000              		mov		edi, KERNEL_LOAD				; EDI = 0x0010_1000; // 上位メモリ
   502 00000997 FC                      		cld										; // DFクリア（+方向）
   503 00000998 F3A5                    		rep movsd								; while (--ECX) *EDI++ = *ESI++;
   504                                  
   505                                  		;---------------------------------------
   506                                  		; カーネル処理に移行
   507                                  		;---------------------------------------
   508 0000099A E9(00101000)            		jmp		KERNEL_LOAD						; カーネルの先頭にジャンプ
   509                                  
   510                                  
   511                                  ;************************************************************************
   512                                  ;	パディング
   513                                  ;************************************************************************
   514 0000099F 00<rept>                		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   515                                  
