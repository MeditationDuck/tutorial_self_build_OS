     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	メモリイメージ
     3                              <1> ;************************************************************************
     4                              <1> 
     5                              <1> 		;---------------------------------------
     6                              <1> 		;           |            | 
     7                              <1> 		;           |____________| 
     8                              <1> 		; 0000_7A00 |            | ( 512) スタック
     9                              <1> 		;           |____________| 
    10                              <1> 		; 0000_7C00 |            | (  8K) ブート
    11                              <1> 		;           =            = 
    12                              <1> 		;           |____________| 
    13                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    14                              <1> 		;           =            = 
    15                              <1> 		;           |____________| 
    16                              <1> 		; 0000_BC00 |////////////| 
    17                              <1> 		;           =            = 
    18                              <1> 		;           |____________| 
    19                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    24                              <1> 		;           |            | 
    25                              <1> 		;           =            = 
    26                              <1> 		;           |____________| 
    27                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    28                              <1> 		;           |            | （各タスク1K）
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_5000 |            | Dir
    32                              <1> 		;      6000 |____________| Page
    33                              <1> 		; 0010_7000 |            | Dir
    34                              <1> 		;      8000 |____________| Page
    35                              <1> 		; 0010_9000 |////////////| 
    36                              <1> 		;           |            | 
    37                              <1> 
    38                              <1> 		BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    39                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    40                              <1> 
    41                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    42                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    43                              <1> 
    44                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    45                              <1> 
    46                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    47                              <1> 
    48                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    49                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    50                              <1> 
    51                              <1> 		E820_RECORD_SIZE	equ		20
    52                              <1> 
    53                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    54                              <1> 
    55                              <1> 
    56                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    57                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    58                              <1> 
    59                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    60                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    61                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    62                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    63                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    64                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    65                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    66                              <1> 
    67                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    68                              <1> 
    69                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    70                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    71                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    72                              <1> 
    73                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    74                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    75                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    76                              <1> 
    77                              <1> 
    78                              <1> ;************************************************************************
    79                              <1> ;	ディスクイメージ
    80                              <1> ;************************************************************************
    81                              <1> 		;(SECT/SUM)  file img                 
    82                              <1> 		;                       ____________  
    83                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    84                              <1> 		;                      =            = 
    85                              <1> 		;                      |____________| 
    86                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
    87                              <1> 		;                      =            = 
    88                              <1> 		;                      |____________| 
    89                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
    90                              <1> 		;                      |            | 
    91                              <1> 		;                      |            | 
    92                              <1> 		;                      =            = 
    93                              <1> 		;                      |____________| 
    94                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
    95                              <1> 		;                      |            | 
    96                              <1> 		;                      |            | 
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   100                              <1> 		;                      |            | (32セクタ/512エントリ)
   101                              <1> 		;                      =            = 
   102                              <1> 		;                      |____________| 
   103                              <1> 		;(   /576)   0004_8000 |            | データ領域
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |            | 
   107                              <1> 		;                      |____________| 
   108                              <1> 		;(   /640)   0005_0000 |////////////| 
   109                              <1> 		;                      |            | 
   110                              <1> 
   111                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   112                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   113                              <1> 
   114                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   115                              <1> 
   116                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   117                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   118                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   119                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   120                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   121                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   122                              <1> 
   123                              <1> 		; ファイル属性
   124                              <1> 		ATTR_READ_ONLY		equ		0x01
   125                              <1> 		ATTR_HIDDEN			equ		0x02
   126                              <1> 		ATTR_SYSTEM			equ		0x04
   127                              <1> 		ATTR_VOLUME_ID		equ		0x08
   128                              <1> 		ATTR_DIRECTORY		equ		0x10
   129                              <1> 		ATTR_ARCHIVE		equ		0x20
   130                              <1> 
    14                                  %include	"../include/macro.s"
     1                              <1> ;************************************************************************
     2                              <1> ; 関数呼び出し用マクロ
     3                              <1> ;
     4                              <1> ; 使い方：
     5                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
     6                              <1> ;
     7                              <1> ;************************************************************************
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1> 	%rep  %0 - 1
    11                              <1> 		push	%{-1:-1}
    12                              <1> 		%rotate -1
    13                              <1> 	%endrep 
    14                              <1> 	%rotate -1
    15                              <1> 
    16                              <1> 		call	%1
    17                              <1> 
    18                              <1> 	%if 1 < %0
    19                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1> 	%endif
    21                              <1> 
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> ;************************************************************************
    25                              <1> ; 割り込みベクタ設定用
    26                              <1> ;
    27                              <1> ; 使い方：
    28                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    29                              <1> ;
    30                              <1> ;************************************************************************
    31                              <1> %macro  set_vect 1-*.nolist
    32                              <1> 		push	eax
    33                              <1> 		push	edi
    34                              <1> 
    35                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    36                              <1> 		mov		eax, %2
    37                              <1> 
    38                              <1> 	%if 3 == %0
    39                              <1> 		mov		[edi + 4], %3					; フラグ
    40                              <1> 	%endif
    41                              <1> 
    42                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    43                              <1> 		shr		eax, 16							; 
    44                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    45                              <1> 
    46                              <1> 		pop		edi
    47                              <1> 		pop		eax
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ; ポート出力用
    52                              <1> ;
    53                              <1> ; 使い方：
    54                              <1> ;	outp	ポート番号, 出力値
    55                              <1> ;
    56                              <1> ;************************************************************************
    57                              <1> %macro  outp 2
    58                              <1> 		mov		al, %2
    59                              <1> 		out		%1, al
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> ;************************************************************************
    63                              <1> ; ディスクリプタの情報を設定
    64                              <1> ;
    65                              <1> ; 使い方：
    66                              <1> ;	set_desc	ディスクリプタ, ベース
    67                              <1> ;
    68                              <1> ;************************************************************************
    69                              <1> %macro  set_desc 2-* 
    70                              <1> 		push	eax
    71                              <1> 		push	edi
    72                              <1> 
    73                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    74                              <1> 		mov		eax, %2							; ベースアドレス
    75                              <1> 
    76                              <1> 	%if 3 == %0
    77                              <1> 		mov		[edi + 0], %3					; リミット
    78                              <1> 	%endif
    79                              <1> 
    80                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    81                              <1> 		shr		eax, 16							; 
    82                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    83                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    84                              <1> 
    85                              <1> 		pop		edi
    86                              <1> 		pop		eax
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;************************************************************************
    90                              <1> ; ゲートディスクリプタのオフセットを設定
    91                              <1> ;
    92                              <1> ; 使い方：
    93                              <1> ;	set_gate	ディスクリプタ, オフセット
    94                              <1> ;
    95                              <1> ;************************************************************************
    96                              <1> %macro  set_gate 2-* 
    97                              <1> 		push	eax
    98                              <1> 		push	edi
    99                              <1> 
   100                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   101                              <1> 		mov		eax, %2							; ベースアドレス
   102                              <1> 
   103                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   104                              <1> 		shr		eax, 16							; 
   105                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   106                              <1> 
   107                              <1> 		pop		edi
   108                              <1> 		pop		eax
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> ;************************************************************************
   112                              <1> ;	構造体
   113                              <1> ;************************************************************************
   114                              <1> 
   115                              <1> ;-----------------------------------------------
   116                              <1> ;	ドライブパラメータ
   117                              <1> ;-----------------------------------------------
   118                              <1> struc drive
   119 00000000 <res 00000002>      <1> 		.no				resw	1				; ドライブ番号
   120 00000002 <res 00000002>      <1> 		.cyln			resw	1				; C:シリンダ
   121 00000004 <res 00000002>      <1> 		.head			resw	1				; H:ヘッド
   122 00000006 <res 00000002>      <1> 		.sect			resw	1				; S:セクタ
   123                              <1> endstruc
   124                              <1> 
   125                              <1> ;-----------------------------------------------
   126                              <1> ;	リングバッファ
   127                              <1> ;-----------------------------------------------
   128                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   129                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   130                              <1> 
   131                              <1> struc ring_buff
   132 00000000 <res 00000004>      <1> 		.rp				resd	1				; RP:書き込み位置
   133 00000004 <res 00000004>      <1> 		.wp				resd	1				; WP:読み込み位置
   134 00000008 <res 00000010>      <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;-----------------------------------------------
   138                              <1> ;	バラ曲線描画パラメータ
   139                              <1> ;-----------------------------------------------
   140                              <1> struc rose
   141 00000000 <res 00000004>      <1> 		.x0				resd	1				; 左上座標：X0
   142 00000004 <res 00000004>      <1> 		.y0				resd	1				; 左上座標：Y0
   143 00000008 <res 00000004>      <1> 		.x1				resd	1				; 右下座標：X1
   144 0000000C <res 00000004>      <1> 		.y1				resd	1				; 右下座標：Y1
   145                              <1> 
   146 00000010 <res 00000004>      <1> 		.n				resd	1				; 変数：n
   147 00000014 <res 00000004>      <1> 		.d				resd	1				; 変数：d
   148                              <1> 
   149 00000018 <res 00000004>      <1> 		.color_x		resd	1				; 描画色：X軸
   150 0000001C <res 00000004>      <1> 		.color_y		resd	1				; 描画色：Y軸
   151 00000020 <res 00000004>      <1> 		.color_z		resd	1				; 描画色：枠
   152 00000024 <res 00000004>      <1> 		.color_s		resd	1				; 描画色：文字
   153 00000028 <res 00000004>      <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   154 0000002C <res 00000004>      <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   155                              <1> 
   156 00000030 <res 00000010>      <1> 		.title			resb	16				; タイトル
   157                              <1> endstruc
   158                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[1C020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    36 00000016 50                  <1>  push eax
    36 00000017 57                  <1>  push edi
    36                              <1> 
    36 00000018 BF[A4050000]        <1>  mov edi, %1
    36 0000001D B8[24020000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 00000022 66894702            <1>  mov [edi + 2], ax
    36 00000026 C1E810              <1>  shr eax, 16
    36 00000029 884704              <1>  mov [edi + 4], al
    36 0000002C 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000002F 5F                  <1>  pop edi
    36 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    37 00000031 50                  <1>  push eax
    37 00000032 57                  <1>  push edi
    37                              <1> 
    37 00000033 BF[AC050000]        <1>  mov edi, %1
    37 00000038 B8[FC020000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000003D 66894702            <1>  mov [edi + 2], ax
    37 00000041 C1E810              <1>  shr eax, 16
    37 00000044 884704              <1>  mov [edi + 4], al
    37 00000047 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 0000004A 5F                  <1>  pop edi
    37 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    38 0000004C 50                  <1>  push eax
    38 0000004D 57                  <1>  push edi
    38                              <1> 
    38 0000004E BF[B4050000]        <1>  mov edi, %1
    38 00000053 B8[D4030000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if 3 == %0
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 00000058 66894702            <1>  mov [edi + 2], ax
    38 0000005C C1E810              <1>  shr eax, 16
    38 0000005F 884704              <1>  mov [edi + 4], al
    38 00000062 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 00000065 5F                  <1>  pop edi
    38 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    39 00000067 50                  <1>  push eax
    39 00000068 57                  <1>  push edi
    39                              <1> 
    39 00000069 BF[BC050000]        <1>  mov edi, %1
    39 0000006E B8[AC040000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if 3 == %0
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 00000073 66894702            <1>  mov [edi + 2], ax
    39 00000077 C1E810              <1>  shr eax, 16
    39 0000007A 884704              <1>  mov [edi + 4], al
    39 0000007D 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 00000080 5F                  <1>  pop edi
    39 00000081 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; コールゲートの設定
    43                                  		;---------------------------------------
    44                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
    44 00000082 50                  <1>  push eax
    44 00000083 57                  <1>  push edi
    44                              <1> 
    44 00000084 BF[C4050000]        <1>  mov edi, %1
    44 00000089 B8[20120000]        <1>  mov eax, %2
    44                              <1> 
    44 0000008E 668907              <1>  mov [edi + 0], ax
    44 00000091 C1E810              <1>  shr eax, 16
    44 00000094 66894706            <1>  mov [edi + 6], ax
    44                              <1> 
    44 00000098 5F                  <1>  pop edi
    44 00000099 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; LDTの設定
    48                                  		;---------------------------------------
    49                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    49 0000009A 50                  <1>  push eax
    49 0000009B 57                  <1>  push edi
    49                              <1> 
    49 0000009C BF[9C050000]        <1>  mov edi, %1
    49 000000A1 B8[D2050000]        <1>  mov eax, %2
    49                              <1> 
    49                              <1>  %if 3 == %0
    49 000000A6 66C7074700          <1>  mov [edi + 0], %3
    49                              <1>  %endif
    49                              <1> 
    49 000000AB 66894702            <1>  mov [edi + 2], ax
    49 000000AF C1E810              <1>  shr eax, 16
    49 000000B2 884704              <1>  mov [edi + 4], al
    49 000000B5 886707              <1>  mov [edi + 7], ah
    49                              <1> 
    49 000000B8 5F                  <1>  pop edi
    49 000000B9 58                  <1>  pop eax
    50                                  
    51                                  		;---------------------------------------
    52                                  		; GDTをロード（再設定）
    53                                  		;---------------------------------------
    54 000000BA 0F0115[CC050000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    55                                  
    56                                  		;---------------------------------------
    57                                  		; スタックの設定
    58                                  		;---------------------------------------
    59 000000C1 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    60                                  
    61                                  		;---------------------------------------
    62                                  		; タスクレジスタの初期化
    63                                  		;---------------------------------------
    64 000000C6 66B82000                		mov		ax, SS_TASK_0
    65 000000CA 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    66                                  
    67                                  		;---------------------------------------
    68                                  		; 初期化
    69                                  		;---------------------------------------
    70 000000CD E8240E0000              		cdecl	init_int						; // 割り込みベクタの初期化
    71 000000D2 E8A50F0000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    72                                  
    73 000000D7 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    73 000000DF [5E100000]668907C1-
    73 000000E7 E810668947065F58   
    74 000000EF 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    74 000000F7 [8B120000]668907C1-
    74 000000FF E810668947065F58   
    75 00000107 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    75 0000010F [1A060000]668907C1-
    75 00000117 E810668947065F58   
    76 0000011F 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    76 00000127 [E6100000]668907C1-
    76 0000012F E810668947065F58   
    77 00000137 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    77 0000013F [BB100000]668907C1-
    77 00000147 E810668947065F58   
    78 0000014F 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    78 00000157 [50120000]66C74704-
    78 0000015F 00EF668907C1E81066-
    78 00000168 8947065F58         
    79 0000016D 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    79 00000175 [5E120000]66C74704-
    79 0000017D 00EF668907C1E81066-
    79 00000186 8947065F58         
    80                                  
    81                                  		;---------------------------------------
    82                                  		; デバイスの割り込み許可
    83                                  		;---------------------------------------
    84 0000018B 6A10E8150F00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    84 00000194 C404               
    85 00000196 E83D100000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    86                                  
    87                                  		;---------------------------------------
    88                                  		; IMR(割り込みマスクレジスタ)の設定
    89                                  		;---------------------------------------
    90                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    90 0000019B B0F8                <1>  mov al, %2
    90 0000019D E621                <1>  out %1, al
    91                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    91 0000019F B0FE                <1>  mov al, %2
    91 000001A1 E6A1                <1>  out %1, al
    92                                  
    93                                  		;---------------------------------------
    94                                  		; CPUの割り込み許可
    95                                  		;---------------------------------------
    96 000001A3 FB                      		sti										; // 割り込み許可
    97                                  
    98                                  		;---------------------------------------
    99                                  		; フォントの一覧表示
   100                                  		;---------------------------------------
   101 000001A4 6A0D6A3FE8F3080000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   101 000001AD 6683C408           
   102 000001B1 6A046A3FE869090000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   102 000001BA 6683C408           
   103                                  
   104                                  		;---------------------------------------
   105                                  		; 文字列の表示
   106                                  		;---------------------------------------
   107 000001BE 68[06020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   107 000001C6 00006A0E6A19E81409-
   107 000001CF 00006683C410       
   108                                  
   109                                  .10L:											; while (;;)
   110                                  												; {
   111                                  		;---------------------------------------
   112                                  		; 回転する棒を表示
   113                                  		;---------------------------------------
   114 000001D5 E80D100000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   115                                  
   116                                  		;---------------------------------------
   117                                  		; キーコードの取得
   118                                  		;---------------------------------------
   119 000001DA 68[18020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   119 000001E0 [0C110000]E83B0F00-
   119 000001E8 006683C408         
   120 000001ED 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   121 000001F0 7412                    		je		.10E							;   {
   122                                  												;   
   123                                  		;---------------------------------------
   124                                  		; キーコードの表示
   125                                  		;---------------------------------------
   126 000001F2 68[0C110000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   126 000001FA 02E8850F00006683C4-
   126 00000203 0C                 
   127                                  .10E:											;   }
   128 00000204 EBCF                    		jmp		.10L							; }
   129                                  
   130 00000206 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   130 0000020F 65726E656C212000   
   131                                  
   132 00000217 00                      ALIGN 4, db 0
   133 00000218 00000000                .int_key:	dd	0
   134                                  
   135                                  ALIGN 4, db 0
   136 0000021C 00000000                FONT_ADR:	dd	0
   137 00000220 00000000                RTC_TIME:	dd	0
   138                                  
   139                                  ;************************************************************************
   140                                  ;	タスク
   141                                  ;************************************************************************
   142                                  %include	"descriptor.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TSS
     3                              <1> ;************************************************************************
     4                              <1> TSS_0:
     5 00000224 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
     6 00000228 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
     7 0000022C 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
     8 00000230 00000000            <1> .esp1:			dd	0							;* 12:ESP1
     9 00000234 00000000            <1> .ss1:			dd	0							;* 16:
    10 00000238 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    11 0000023C 00000000            <1> .ss2:			dd	0							;* 24:
    12 00000240 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
    13 00000244 00000000            <1> .eip:			dd	0							;  32:EIP
    14 00000248 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
    15 0000024C 00000000            <1> .eax:			dd	0							;  40:EAX
    16 00000250 00000000            <1> .ecx:			dd	0							;  44:ECX
    17 00000254 00000000            <1> .edx:			dd	0							;  48:EDX
    18 00000258 00000000            <1> .ebx:			dd	0							;  52:EBX
    19 0000025C 00000000            <1> .esp:			dd	0							;  56:ESP
    20 00000260 00000000            <1> .ebp:			dd	0							;  60:EBP
    21 00000264 00000000            <1> .esi:			dd	0							;  64:ESI
    22 00000268 00000000            <1> .edi:			dd	0							;  68:EDI
    23 0000026C 00000000            <1> .es:			dd	0							;  72:ES
    24 00000270 00000000            <1> .cs:			dd	0							;  76:CS
    25 00000274 00000000            <1> .ss:			dd	0							;  80:SS
    26 00000278 00000000            <1> .ds:			dd	0							;  84:DS
    27 0000027C 00000000            <1> .fs:			dd	0							;  88:FS
    28 00000280 00000000            <1> .gs:			dd	0							;  92:GS
    29 00000284 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
    30 00000288 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    31 0000028C 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 000002FC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    35 00000300 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
    36 00000304 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    37 00000308 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    38 0000030C 00000000            <1> .ss1:			dd	0							;* 16:
    39 00000310 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    40 00000314 00000000            <1> .ss2:			dd	0							;* 24:
    41 00000318 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
    42 0000031C [74060000]          <1> .eip:			dd	task_1						;  32:EIP
    43 00000320 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
    44 00000324 00000000            <1> .eax:			dd	0							;  40:EAX
    45 00000328 00000000            <1> .ecx:			dd	0							;  44:ECX
    46 0000032C 00000000            <1> .edx:			dd	0							;  48:EDX
    47 00000330 00000000            <1> .ebx:			dd	0							;  52:EBX
    48 00000334 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
    49 00000338 00000000            <1> .ebp:			dd	0							;  60:EBP
    50 0000033C 00000000            <1> .esi:			dd	0							;  64:ESI
    51 00000340 00000000            <1> .edi:			dd	0							;  68:EDI
    52 00000344 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
    53 00000348 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
    54 0000034C 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
    55 00000350 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
    56 00000354 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
    57 00000358 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
    58 0000035C 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
    59 00000360 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    60 00000364 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 000003D4 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    64 000003D8 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
    65 000003DC 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    66 000003E0 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    67 000003E4 00000000            <1> .ss1:			dd	0							;* 16:
    68 000003E8 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    69 000003EC 00000000            <1> .ss2:			dd	0							;* 24:
    70 000003F0 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
    71 000003F4 [A9060000]          <1> .eip:			dd	task_2						;  32:EIP
    72 000003F8 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
    73 000003FC 00000000            <1> .eax:			dd	0							;  40:EAX
    74 00000400 00000000            <1> .ecx:			dd	0							;  44:ECX
    75 00000404 00000000            <1> .edx:			dd	0							;  48:EDX
    76 00000408 00000000            <1> .ebx:			dd	0							;  52:EBX
    77 0000040C 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
    78 00000410 00000000            <1> .ebp:			dd	0							;  60:EBP
    79 00000414 00000000            <1> .esi:			dd	0							;  64:ESI
    80 00000418 00000000            <1> .edi:			dd	0							;  68:EDI
    81 0000041C 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
    82 00000420 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
    83 00000424 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
    84 00000428 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
    85 0000042C 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
    86 00000430 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
    87 00000434 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
    88 00000438 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    89 0000043C 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 000004AC 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    93 000004B0 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
    94 000004B4 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    95 000004B8 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    96 000004BC 00000000            <1> .ss1:			dd	0							;* 16:
    97 000004C0 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    98 000004C4 00000000            <1> .ss2:			dd	0							;* 24:
    99 000004C8 00000000            <1> .cr3:			dd	0							;  28:CR3(PDBR)
   100 000004CC [84070000]          <1> .eip:			dd	task_3						;  32:EIP
   101 000004D0 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   102 000004D4 00000000            <1> .eax:			dd	0							;  40:EAX
   103 000004D8 00000000            <1> .ecx:			dd	0							;  44:ECX
   104 000004DC 00000000            <1> .edx:			dd	0							;  48:EDX
   105 000004E0 00000000            <1> .ebx:			dd	0							;  52:EBX
   106 000004E4 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   107 000004E8 00000000            <1> .ebp:			dd	0							;  60:EBP
   108 000004EC 00000000            <1> .esi:			dd	0							;  64:ESI
   109 000004F0 00000000            <1> .edi:			dd	0							;  68:EDI
   110 000004F4 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   111 000004F8 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   112 000004FC 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   113 00000500 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   114 00000504 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   115 00000508 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   116 0000050C 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   117 00000510 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   118 00000514 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> 
   121                              <1> ;************************************************************************
   122                              <1> ;	グローバルディスクリプタテーブル
   123                              <1> ;************************************************************************
   124 00000584 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   125 0000058C FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   126 00000594 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   127 0000059C 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   128 000005A4 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   129 000005AC 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   130 000005B4 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   131 000005BC 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   132 000005C4 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   133                              <1> .end:
   134                              <1> 
   135                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   136                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   137                              <1> SS_LDT			equ	.ldt		- GDT
   138                              <1> SS_TASK_0		equ	.tss_0		- GDT
   139                              <1> SS_TASK_1		equ	.tss_1		- GDT
   140                              <1> SS_TASK_2		equ	.tss_2		- GDT
   141                              <1> SS_TASK_3		equ	.tss_3		- GDT
   142                              <1> SS_GATE_0		equ	.call_gate	- GDT
   143                              <1> 
   144 000005CC 4700                <1> GDTR:	dw 		GDT.end - GDT - 1
   145 000005CE [84050000]          <1> 		dd 		GDT
   146                              <1> 
   147                              <1> 
   148                              <1> ;************************************************************************
   149                              <1> ;	ローカルディスクリプタテーブル
   150                              <1> ;************************************************************************
   151 000005D2 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   152 000005DA FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   153 000005E2 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   154 000005EA FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   155 000005F2 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   156 000005FA FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   157 00000602 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   158 0000060A FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   159 00000612 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   160                              <1> .end:
   161                              <1> 
   162                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   163                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   164                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   165                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   166                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   167                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   168                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   169                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   170                              <1> 
   171                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   172                              <1> 
   173                              <1> 
   143                                  %include	"modules/int_timer.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	例外:タイマー
     3                              <1> ;************************************************************************
     4                              <1> int_timer:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【レジスタの保存】
     7                              <1> 		;---------------------------------------
     8 0000061A 60                  <1> 		pusha
     9 0000061B 1E                  <1> 		push	ds
    10 0000061C 06                  <1> 		push	es
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; データ用セグメントの設定
    14                              <1> 		;---------------------------------------
    15 0000061D 66B81000            <1> 		mov		ax, 0x0010						; 
    16 00000621 8ED8                <1> 		mov		ds, ax							; 
    17 00000623 8EC0                <1> 		mov		es, ax							; 
    18                              <1> 
    19                              <1> 		;---------------------------------------
    20                              <1> 		; TICK
    21                              <1> 		;---------------------------------------
    22 00000625 FF05[70060000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 割り込みフラグをクリア(EOI)
    26                              <1> 		;---------------------------------------
    27                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    27 0000062B B020                <2>  mov al, %2
    27 0000062D E620                <2>  out %1, al
    28                              <1> 
    29                              <1> 		;---------------------------------------
    30                              <1> 		; タスクの切り替え
    31                              <1> 		;---------------------------------------
    32 0000062F 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
    33 00000633 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
    34 00000637 7415                <1> 		je		.11L							; {
    35 00000639 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
    36 0000063D 7418                <1> 		je		.12L							;   
    37 0000063F 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
    38 00000643 741B                <1> 		je		.13L							;   
    39                              <1> 												;   default:
    40 00000645 EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
    41 0000064C EB1B                <1> 		jmp		.10E							;     break;
    42                              <1> 												;     
    43                              <1> .11L:											;   case SS_TASK_0:
    44 0000064E EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
    45 00000655 EB12                <1> 		jmp		.10E							;     break;
    46                              <1> 												;     
    47                              <1> .12L:											;   case SS_TASK_1:
    48 00000657 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
    49 0000065E EB09                <1> 		jmp		.10E							;     break;
    50                              <1> 												;     
    51                              <1> .13L:											;   case SS_TASK_2:
    52 00000660 EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
    53 00000667 EB00                <1> 		jmp		.10E							;     break;
    54                              <1> .10E:											; }
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; 【レジスタの復帰】
    58                              <1> 		;---------------------------------------
    59 00000669 07                  <1> 		pop		es								; 
    60 0000066A 1F                  <1> 		pop		ds								; 
    61 0000066B 61                  <1> 		popa
    62                              <1> 
    63 0000066C CF                  <1> 		iret
    64                              <1> 
    65 0000066D 00<rept>            <1> ALIGN 4, db 0
    66 00000670 00000000            <1> TIMER_COUNT:	dd	0
    67                              <1> 
   144                                  %include	"tasks/task_1.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TASK-1
     3                              <1> ;************************************************************************
     4                              <1> task_1:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 文字列の表示
     7                              <1> 		;---------------------------------------
     8 00000674 68[A2060000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0	; draw_str();
     8 0000067C 006A3FE86104000066- <1>
     8 00000685 83C410              <1>
     9                              <1> 
    10                              <1> .10L:											; while (;;)
    11                              <1> 												; {
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 時刻の表示
    14                              <1> 		;---------------------------------------
    15 00000688 A1[20020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
    16 0000068D 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
    16 00000696 48E8BB0700006683C4- <1>
    16 0000069F 10                  <1>
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		; タスクの呼び出し
    20                              <1> 		;---------------------------------------
    21                              <1> ;		jmp		SS_TASK_0:0						;   // タスク0へのジャンプ
    22                              <1> 
    23 000006A0 EBE6                <1> 		jmp		.10L							; }
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; データ
    27                              <1> 		;---------------------------------------
    28 000006A2 5461736B2D3100      <1> .s0		db	"Task-1", 0
    29                              <1> 
   145                                  %include	"tasks/task_2.s"
     1                              <1> 
     2                              <1> ;************************************************************************
     3                              <1> ;	TASK
     4                              <1> ;************************************************************************
     5                              <1> task_2:
     6                              <1> 		;---------------------------------------
     7                              <1> 		; 文字列の表示
     8                              <1> 		;---------------------------------------
     9 000006A9 68[76070000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
     9 000006B1 016A3FE82C04000066- <1>
     9 000006BA 83C410              <1>
    10                              <1> 
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 初期化
    13                              <1> 		;---------------------------------------
    14                              <1> 												; ---------+---------+---------|---------|---------|---------|
    15                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
    16                              <1> 												; ---------+---------+---------|---------|---------|---------|
    17 000006BD DB05[64070000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    18 000006C3 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    19 000006C5 DA35[68070000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    20 000006CB D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    21 000006CD DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    22 000006CF D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    23                              <1> 												; ---------+---------+---------|---------|---------|---------|
    24                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    25                              <1> 												; ---------+---------+---------|---------|---------|---------|
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; メインループ
    29                              <1> 		;---------------------------------------
    30                              <1> .10L:											; for ( ; ; )
    31                              <1> 												; {
    32                              <1> 		;---------------------------------------
    33                              <1> 		; sin(t)
    34                              <1> 		;---------------------------------------
    35                              <1> 												; ---------+---------+---------|---------|---------|---------|
    36                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
    37                              <1> 												; ---------+---------+---------|---------|---------|---------|
    38                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    39                              <1> 												; ---------+---------+---------|---------|---------|---------|
    40 000006D1 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    41 000006D3 D9F8                <1> 		fprem									;   MOD(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    42 000006D5 D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    43 000006D7 D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    44 000006D9 D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    45                              <1> 												; ---------+---------+---------|---------|---------|---------|
    46 000006DB DF35[6C070000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    47                              <1> 												; ---------+---------+---------|---------|---------|---------|
    48                              <1> 
    49 000006E1 A1[6C070000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
    50 000006E6 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
    51                              <1> 
    52 000006E8 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
    53 000006ED 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
    54                              <1> 
    55 000006F2 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
    56 000006F5 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
    57 000006FB 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
    58                              <1> 
    59 00000701 883D[7E070000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
    60 00000707 8825[80070000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
    61 0000070D 881D[81070000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
    62 00000713 A2[82070000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
    63                              <1> 
    64 00000718 B807000000          <1> 		mov		eax, 7							;   // 符号の表示
    65 0000071D 0FA305[75070000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
    66 00000724 7209                <1> 		jc		.10F							;   if (CF)
    67                              <1> 												;   {
    68 00000726 C605[7D070000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
    69 0000072D EB07                <1> 		jmp		.10E							;   }
    70                              <1> .10F:											;   else
    71                              <1> 												;   {
    72 0000072F C605[7D070000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
    73                              <1> .10E:											;   }
    74                              <1> 
    75 00000736 68[7D070000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
    75 0000073E 016A48E89F03000066- <1>
    75 00000747 83C410              <1>
    76                              <1> 
    77                              <1> 		;---------------------------------------
    78                              <1> 		; ウェイト
    79                              <1> 		;---------------------------------------
    80 0000074A B914000000          <1> 		mov		ecx, 20							;   ECX = 20
    81                              <1> 												;   do
    82                              <1> 												;   {
    83 0000074F A1[70060000]        <1> .20L:	mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    84 00000754 3905[70060000]      <1> .21L:	cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    85 0000075A 74F8                <1> 		je		.21L							;       ;
    86 0000075C E2F1                <1> 		loop	.20L							;   } while (--ECX);
    87                              <1> 
    88 0000075E E96EFFFFFF          <1> 		jmp		.10L							; }
    89                              <1> 
    90                              <1> 
    91 00000763 00                  <1> ALIGN 4, db 0
    92 00000764 E8030000            <1> .c1000:		dd	1000
    93 00000768 B4000000            <1> .c180:		dd	180
    94                              <1> 
    95 0000076C 00<rept>            <1> .bcd:	times 10 db	0x00
    96                              <1> 
    97 00000776 5461736B2D3200      <1> .s0		db	"Task-2", 0
    98 0000077D 2D                  <1> .s1:	db	"-"
    99 0000077E 302E                <1> .s2:	db	"0."
   100 00000780 30303000            <1> .s3:	db	"000", 0
   101                              <1> 
   146                                  %include	"tasks/task_3.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TASK
     3                              <1> ;************************************************************************
     4                              <1> task_3:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【スタックフレームの構築】
     7                              <1> 		;---------------------------------------
     8 00000784 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
     9                              <1> 												; ---------------
    10 00000786 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
    11 00000788 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
    12 0000078A 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
    13 0000078C 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
    14 0000078E 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 初期化
    18                              <1> 		;---------------------------------------
    19 00000790 BE[84080000]        <1> 		mov		esi, DRAW_PARAM					; ESI = 描画パラメータ
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; タイトル表示
    23                              <1> 		;---------------------------------------
    24 00000795 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
    25 00000797 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
    26                              <1> 
    27 0000079A C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
    28 0000079D C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
    29 000007A0 4B                  <1> 		dec		ebx								; // 1文字分上に移動
    30 000007A1 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
    31 000007A4 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
    32                              <1> 
    33 000007A7 52515350E835030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
    33 000007B0 6683C410            <1>
    34                              <1> 
    35                              <1> 		;---------------------------------------
    36                              <1> 		; X軸の中点
    37                              <1> 		;---------------------------------------
    38 000007B4 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
    39 000007B6 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
    40 000007B9 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
    41 000007BB D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
    42 000007BD 01C3                <1> 		add		ebx, eax						; EBX += X0
    43 000007BF 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
    44                              <1> 
    45                              <1> 		;---------------------------------------
    46                              <1> 		; Y軸の中点
    47                              <1> 		;---------------------------------------
    48 000007C2 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
    49 000007C5 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
    50 000007C8 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
    51 000007CA D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
    52 000007CC 01C3                <1> 		add		ebx, eax						; EBX += Y0
    53 000007CE 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
    54                              <1> 
    55                              <1> 		;---------------------------------------
    56                              <1> 		; X軸の描画
    57                              <1> 		;---------------------------------------
    58 000007D1 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
    59 000007D3 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
    60 000007D6 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
    61                              <1> 
    62 000007D9 FF761853515350E893- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
    62 000007E2 0400006683C414      <1>
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; Y軸の描画
    66                              <1> 		;---------------------------------------
    67 000007E9 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
    68 000007EC 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
    69 000007EF 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
    70                              <1> 
    71 000007F2 FF761C51535053E87A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
    71 000007FB 0400006683C414      <1>
    72                              <1> 
    73                              <1> 		;---------------------------------------
    74                              <1> 		; 枠の描画
    75                              <1> 		;---------------------------------------
    76 00000802 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
    77 00000804 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
    78 00000807 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
    79 0000080A 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
    80                              <1> 
    81 0000080D FF762052515350E80E- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
    81 00000816 0500006683C414      <1>
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 振幅をX軸の約95%とする
    85                              <1> 		;---------------------------------------
    86 0000081D 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
    87 00000820 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
    88 00000822 D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
    89 00000824 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
    90 00000826 C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
    91 00000829 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; FPUの初期化(バラ曲線の初期化)
    95                              <1> 		;---------------------------------------
    99 0000082B FF7614FF761050E88D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
    99 00000834 0000006683C40C      <1>
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; メインループ
   103                              <1> 		;---------------------------------------
   104                              <1> .10L:											; for ( ; ; )
   105                              <1> 												; {
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 座標計算
   108                              <1> 		;---------------------------------------
   109 0000083B 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   110 0000083E 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   111 00000841 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   112                              <1> 
   116 00000844 505153E89200000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   116 0000084D 83C40C              <1>
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 角度更新(r = r % 36000)
   120                              <1> 		;---------------------------------------
   121 00000850 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   122 00000855 40                  <1> 		inc		eax								;   EAX++;
   123 00000856 BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   124 0000085B F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   125 0000085D 8955EC              <1> 		mov		[ebp -20], edx
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; ドット描画
   129                              <1> 		;---------------------------------------
   130 00000860 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   131 00000863 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   132                              <1> 
   133 00000866 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   134 00000869 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   135                              <1> 
   136 0000086C 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   137 0000086F CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; ウェイト
   141                              <1> 		;---------------------------------------
   142 00000871 6A02E8A20A00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   142 0000087A C404                <1>
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; ドット描画(消去)
   146                              <1> 		;---------------------------------------
   147 0000087C 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   148 0000087F CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   149                              <1> 
   150                              <1> 
   151 00000881 EBB8                <1>         jmp     .10L                            ; }
   152                              <1> 
   153                              <1> 
   154 00000883 00                  <1> ALIGN 4, db 0
   155                              <1> DRAW_PARAM:										; 描画パラメータ
   156                              <1> 	istruc	rose
   157 00000884 10000000            <1> 		at	rose.x0,		dd		 16			; 左上座標：X0
   158 00000888 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   159 0000088C A0010000            <1> 		at	rose.x1,		dd		416			; 右下座標：X1
   160 00000890 B0010000            <1> 		at	rose.y1,		dd		432			; 右下座標：Y1
   161                              <1> 
   162 00000894 02000000            <1> 		at	rose.n,			dd		2			; 変数：n
   163 00000898 01000000            <1> 		at	rose.d,			dd		1			; 変数：d
   164                              <1> 
   165 0000089C 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   166 000008A0 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   167 000008A4 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   168 000008A8 0F030000            <1> 		at	rose.color_s,	dd		0x030F		; 描画色：文字
   169 000008AC 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   170 000008B0 03000000            <1> 		at	rose.color_b,	dd		0x0003		; 描画色：グラフ消去色
   171                              <1> 
   172 000008B4 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   173                              <1> 
   174 000008BB 00<rept>            <1> 	iend
   175                              <1> 
   176                              <1> 
   177                              <1> ;************************************************************************
   178                              <1> ;	バラ曲線：初期化
   179                              <1> ;------------------------------------------------------------------------
   180                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   181                              <1> ;
   182                              <1> ;	Z = A * sin(nθ)
   183                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   184                              <1> ;
   185                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   186                              <1> ;
   187                              <1> ;	x = A * sin(nθ) * cos(θ)
   188                              <1> ;	y = A * sin(nθ) * sin(θ)
   189                              <1> ;
   190                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   191                              <1> ;	である事から、r = π / 180を先に計算しておく
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   194                              <1> ;
   195                              <1> ;■引数
   196                              <1> ;	DWORD	: A
   197                              <1> ;	DWORD	: n
   198                              <1> ;	DWORD	: d
   199                              <1> ;
   200                              <1> ;■戻り値	: 無し
   201                              <1> ;************************************************************************
   202                              <1> fpu_rose_init:
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【スタックフレームの構築】
   205                              <1> 		;---------------------------------------
   206                              <1> 												; ------|--------
   207                              <1> 												;    +16| d
   208                              <1> 												;    +12| n
   209                              <1> 												;    + 8| A
   210                              <1> 												; ---------------
   211 000008C4 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   212 000008C5 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   213                              <1> 												; ---------------
   214 000008C7 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; FPUを使った処理
   218                              <1> 		;
   219                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   220                              <1> 		; FPU内のレジスタにスタックしておく
   221                              <1> 		;---------------------------------------
   222                              <1> 												; ---------+---------+---------|---------|---------|---------|
   223                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   224                              <1> 												; ---------+---------+---------|---------|---------|---------|
   225 000008CC D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   226 000008CE DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   227 000008D1 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   228 000008D4 DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   229 000008D7 DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   230                              <1> 												; ---------+---------+---------|---------|---------|---------|
   231                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   232                              <1> 												; ---------+---------+---------|---------|---------|---------|
   233                              <1> 		;---------------------------------------
   234                              <1> 		; スタックフレームの破棄
   235                              <1> 		;---------------------------------------
   236 000008DA 89EC                <1> 		mov		esp, ebp
   237 000008DC 5D                  <1> 		pop		ebp
   238                              <1> 
   239 000008DD C3                  <1> 		ret
   240                              <1> 
   241                              <1> ;************************************************************************
   242                              <1> ;	バラ曲線：計算
   243                              <1> ;------------------------------------------------------------------------
   244                              <1> ;	角度を引数として受け取り、座標を計算する。
   245                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   246                              <1> ;========================================================================
   247                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   248                              <1> ;
   249                              <1> ;■引数
   250                              <1> ;	DWORD	: 角度[度]
   251                              <1> ;	DWORD	: Y座標へのポインタ
   252                              <1> ;	DWORD	: X座標へのポインタ
   253                              <1> ;
   254                              <1> ;■戻り値	: 無し
   255                              <1> ;************************************************************************
   256                              <1> fpu_rose_update:
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 【スタックフレームの構築】
   259                              <1> 		;---------------------------------------
   260                              <1> 												; ---------------
   261                              <1> 												; EBP+16| t(角度)
   262                              <1> 												; EBP+12| Y(float)
   263                              <1> 												; EBP+ 8| X(float)
   264                              <1> 												; ---------------
   265 000008DE 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   266 000008DF 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   267                              <1> 												; ------|--------
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 【レジスタの保存】
   271                              <1> 		;---------------------------------------
   272 000008E1 50                  <1> 		push	eax
   273 000008E2 53                  <1> 		push	ebx
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; X/Yの保存先を設定
   277                              <1> 		;---------------------------------------
   278 000008E3 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   279 000008E6 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; FPUを使った処理
   283                              <1> 		; 
   284                              <1> 		; 既にスタックしてある値を元に
   285                              <1> 		; t(角度)から座標を計算する
   286                              <1> 		;---------------------------------------
   287                              <1> 												; ---------+---------+---------|---------|---------|---------|
   288                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   289                              <1> 												; ---------+---------+---------|---------|---------|---------|
   290 000008E9 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   291 000008EC D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   292 000008EE D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   293                              <1> 												; ---------+---------+---------|---------|---------|---------|
   294                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   295                              <1> 												; ---------+---------+---------|---------|---------|---------|
   296 000008F0 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   297 000008F2 D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   298 000008F4 D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   299 000008F6 D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   300 000008F8 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   301                              <1> 												; ---------+---------+---------|---------|---------|---------|
   302                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   303                              <1> 												; ---------+---------+---------|---------|---------|---------|
   304                              <1> 		;---------------------------------------
   305                              <1> 		; x =  A * sin(kθ) * cos(θ);
   306                              <1> 		;---------------------------------------
   307                              <1> 												; ---------+---------+---------|---------|---------|---------|
   308                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   309                              <1> 												; ---------+---------+---------|---------|---------|---------|
   310                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   311 000008FA D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   312 000008FC D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   313 000008FE DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   314                              <1> 												; ---------+---------+---------|---------|---------|---------|
   315                              <1> 		;---------------------------------------
   316                              <1> 		; y = -A * sin(kθ) * sin(θ);
   317                              <1> 		;---------------------------------------
   318                              <1> 												; ---------+---------+---------|---------|---------|---------|
   319                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   320                              <1> 												; ---------+---------+---------|---------|---------|---------|
   321                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   322 00000900 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   323 00000902 D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   324 00000904 DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   325                              <1> 												; ---------+---------+---------|---------|---------|---------|
   326                              <1> 		;---------------------------------------
   327                              <1> 		; レジスタの復帰
   328                              <1> 		;---------------------------------------
   329 00000906 5B                  <1> 		pop		ebx
   330 00000907 58                  <1> 		pop		eax
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; スタックフレームの破棄
   334                              <1> 		;---------------------------------------
   335 00000908 89EC                <1> 		mov		esp, ebp
   336 0000090A 5D                  <1> 		pop		ebp
   337                              <1> 
   338 0000090B C3                  <1> 		ret
   339                              <1> 
   147                                  
   148                                  ;************************************************************************
   149                                  ;	モジュール
   150                                  ;************************************************************************
   151                                  %include	"../modules/protect/vga.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	読み込みプレーンの選択
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void vga_set_read_plane(plane);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	plane	: 読み込みプレーン
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> vga_set_read_plane:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| プレーン（インデックス）
    16                              <1> 												; ------+----------------
    17 0000090C 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 0000090D 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000090F 50                  <1> 		push	eax
    25 00000910 52                  <1> 		push	edx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 読み込みプレーンの選択
    29                              <1> 		;---------------------------------------
    30 00000911 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    31 00000914 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    32 00000917 B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    33 00000919 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    34 0000091D 66EF                <1> 		out		dx, ax							; // ポート出力
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの復帰】
    38                              <1> 		;---------------------------------------
    39 0000091F 5A                  <1> 		pop		edx
    40 00000920 58                  <1> 		pop		eax
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 【スタックフレームの破棄】
    44                              <1> 		;---------------------------------------
    45 00000921 89EC                <1> 		mov		esp, ebp
    46 00000923 5D                  <1> 		pop		ebp
    47                              <1> 
    48 00000924 C3                  <1> 		ret
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ;	書き込みプレーンを選択
    52                              <1> ;========================================================================
    53                              <1> ;■書式		: void vga_set_write_plane(plane);
    54                              <1> ;
    55                              <1> ;■引数
    56                              <1> ;	plane	: 書き込みプレーン
    57                              <1> ;
    58                              <1> ;■戻り値	: 無し
    59                              <1> ;************************************************************************
    60                              <1> vga_set_write_plane:
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 【スタックフレームの構築】
    63                              <1> 		;---------------------------------------
    64                              <1> 												; EBP+ 8| プレーン（ビット指定）
    65                              <1> 												; ------+----------------
    66 00000925 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    67 00000926 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    68                              <1> 												; ------+----------------
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【レジスタの保存】
    72                              <1> 		;---------------------------------------
    73 00000928 50                  <1> 		push	eax
    74 00000929 52                  <1> 		push	edx
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 書き込みプレーンの選択
    78                              <1> 		;---------------------------------------
    79 0000092A 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
    80 0000092D 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
    81 00000930 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
    82 00000932 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
    83 00000936 66EF                <1> 		out		dx, ax							; // ポート出力
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの復帰】
    87                              <1> 		;---------------------------------------
    88 00000938 5A                  <1> 		pop		edx
    89 00000939 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 0000093A 89EC                <1> 		mov		esp, ebp
    95 0000093C 5D                  <1> 		pop		ebp
    96                              <1> 
    97 0000093D C3                  <1> 		ret
    98                              <1> 
    99                              <1> ;************************************************************************
   100                              <1> ;	フォントの書き込み
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	font	: FONTアドレス
   106                              <1> ;	vram	: VRAMアドレス
   107                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vram_font_copy:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+20| 色（背景/前景色）
   117                              <1> 												; EBP+16| プレーン（ビット指定）
   118                              <1> 												; EBP+12| VRAMアドレス
   119                              <1> 												; EBP+ 8| FONTアドレス
   120                              <1> 												; ------+----------------
   121 0000093E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 0000093F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 00000941 50                  <1> 		push	eax
   129 00000942 53                  <1> 		push	ebx
   130 00000943 51                  <1> 		push	ecx
   131 00000944 52                  <1> 		push	edx
   132 00000945 56                  <1> 		push	esi
   133 00000946 57                  <1> 		push	edi
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 00000947 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   139 0000094A 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   140 0000094D 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   141 00000951 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   142                              <1> 
   143 00000955 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   144 00000957 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   145 0000095A FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   146                              <1> 
   147 0000095C 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   148 0000095E 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   149 00000961 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 16ドットフォントのコピー
   153                              <1> 		;---------------------------------------
   154 00000963 FC                  <1> 		cld										; DF  = 0; // アドレス加算
   155                              <1> 
   156 00000964 B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159                              <1> 		;---------------------------------------
   160                              <1> 		; フォントマスクの作成
   161                              <1> 		;---------------------------------------
   162 00000969 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   163 0000096A 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   164 0000096C F6D4                <1> 		not		ah								;   
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 前景色
   168                              <1> 		;---------------------------------------
   169 0000096E 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 背景色
   173                              <1> 		;---------------------------------------
   174 00000970 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   175 00000976 7404                <1> 		jz		.11F							;   {
   176 00000978 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   177 0000097A EB02                <1> 		jmp		.11E							;   }
   178                              <1> .11F:											;   else
   179                              <1> 												;   {
   180 0000097C 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   181                              <1> .11E:											;   }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 前景色と背景色を合成
   185                              <1> 		;---------------------------------------
   186 0000097E 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 新しい値を出力
   190                              <1> 		;---------------------------------------
   191 00000980 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   192                              <1> 
   193 00000982 83C750              <1> 		add		edi, 80							;   EDI += 80;
   194 00000985 E2E2                <1> 		loop	.10L							; } while (--ECX);
   195                              <1> .10E:											; 
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000987 5F                  <1> 		pop		edi
   201 00000988 5E                  <1> 		pop		esi
   202 00000989 5A                  <1> 		pop		edx
   203 0000098A 59                  <1> 		pop		ecx
   204 0000098B 5B                  <1> 		pop		ebx
   205 0000098C 58                  <1> 		pop		eax
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 0000098D 89EC                <1> 		mov		esp, ebp
   211 0000098F 5D                  <1> 		pop		ebp
   212                              <1> 
   213 00000990 C3                  <1> 		ret
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	ビットパターンの書き込み
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	bit		: 出力ビットパターン
   222                              <1> ;	vram	: VRAMアドレス
   223                              <1> ;	flag	: 1:セット, 0:クリア
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vram_bit_copy:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+20| 色（背景/前景色）
   232                              <1> 												; EBP+16| プレーン（ビット指定）
   233                              <1> 												; EBP+12| VRAMアドレス
   234                              <1> 												; EBP+ 8| 出力ビットパターン
   235                              <1> 												; ------+----------------
   236 00000991 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 00000992 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 00000994 50                  <1> 		push	eax
   244 00000995 53                  <1> 		push	ebx
   245 00000996 57                  <1> 		push	edi
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【処理の開始】
   249                              <1> 		;---------------------------------------
   250 00000997 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   251 0000099A 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   252 0000099E 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   253                              <1> 
   254 000009A2 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   255 000009A4 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   256 000009A7 FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; マスクデータの作成
   260                              <1> 		;---------------------------------------
   261 000009A9 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   262 000009AC 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   263 000009AE F6D4                <1> 		not		ah								; 
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 現在値の出力を取得
   267                              <1> 		;---------------------------------------
   268 000009B0 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   269 000009B2 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   270 000009B4 08E0                <1> 		or		al, ah							; AL |= AH;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 新しい値を出力
   274                              <1> 		;---------------------------------------
   275 000009B6 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【レジスタの復帰】
   279                              <1> 		;---------------------------------------
   280 000009B8 5F                  <1> 		pop		edi
   281 000009B9 5B                  <1> 		pop		ebx
   282 000009BA 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 000009BB 89EC                <1> 		mov		esp, ebp
   288 000009BD 5D                  <1> 		pop		ebp
   289                              <1> 
   290 000009BE C3                  <1> 		ret
   291                              <1> 
   152                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+20| 文字
     7                              <1> 												; EBP+16| 色
     8                              <1> 												; EBP+12| Y（行）
     9                              <1> 												; EBP+ 8| X（列）
    10                              <1> 												; ------+----------------
    11 000009BF 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    12 000009C0 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    13                              <1> 												; ------+----------------
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 000009C2 50                  <1> 		push	eax
    19 000009C3 53                  <1> 		push	ebx
    20 000009C4 51                  <1> 		push	ecx
    21 000009C5 52                  <1> 		push	edx
    22 000009C6 56                  <1> 		push	esi
    23 000009C7 57                  <1> 		push	edi
    24                              <1> 		;---------------------------------------
    25                              <1> 		; テストアンドセット
    26                              <1> 		;---------------------------------------
    27                              <1> %ifdef	USE_TEST_AND_SET
    28 000009C8 68[9C0A0000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    28 000009D0 00006683C404        <1>
    29                              <1> %endif
    30                              <1> 
    31                              <1>         ;コピー元のアドレスを取得
    32 000009D6 0FB67514            <1>         movzx   esi, byte [ebp +20]
    33 000009DA C1E604              <1>         shl     esi, 4
    34 000009DD 0335[1C020000]      <1>         add     esi, [FONT_ADR]
    35                              <1> 
    36                              <1>         ;コピー先のアドレスを取得
    37 000009E3 8B7D0C              <1>         mov     edi, [ebp +12]
    38 000009E6 C1E708              <1>         shl     edi, 8
    39 000009E9 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]
    40 000009F0 037D08              <1>         add     edi, [ebp + 8]
    41                              <1> 
    42                              <1>         ;一文字分のフォントを出力
    43 000009F3 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
    44                              <1> 
    45 000009F7 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
    45 00000A00 C404                <1>
    46 00000A02 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
    46 00000A0B C404                <1>
    47 00000A0D 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    47 00000A16 FF6683C410          <1>
    48                              <1> 
    49 00000A1B 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
    49 00000A24 C404                <1>
    50 00000A26 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
    50 00000A2F C404                <1>
    51 00000A31 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 00000A3A FF6683C410          <1>
    52                              <1> 
    53 00000A3F 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
    53 00000A48 C404                <1>
    54 00000A4A 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
    54 00000A53 C404                <1>
    55 00000A55 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 00000A5E FF6683C410          <1>
    56                              <1> 
    57 00000A63 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
    57 00000A6C C404                <1>
    58 00000A6E 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
    58 00000A77 C404                <1>
    59 00000A79 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 00000A82 FF6683C410          <1>
    60                              <1> 
    61                              <1> %ifdef	USE_TEST_AND_SET
    62                              <1> 		;---------------------------------------
    63                              <1> 		; テストアンドセット
    64                              <1> 		;---------------------------------------
    65 00000A87 C705[9C0A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    65 00000A8F 0000                <1>
    66                              <1> %endif
    67                              <1> 
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【レジスタの復帰】
    70                              <1> 		;---------------------------------------
    71 00000A91 5F                  <1> 		pop		edi
    72 00000A92 5E                  <1> 		pop		esi
    73 00000A93 5A                  <1> 		pop		edx
    74 00000A94 59                  <1> 		pop		ecx
    75 00000A95 5B                  <1> 		pop		ebx
    76 00000A96 58                  <1> 		pop		eax
    77                              <1> 
    78                              <1> 		;---------------------------------------
    79                              <1> 		; 【スタックフレームの破棄】
    80                              <1> 		;---------------------------------------
    81 00000A97 89EC                <1> 		mov		esp, ebp
    82 00000A99 5D                  <1> 		pop		ebp
    83                              <1> 
    84 00000A9A C3                  <1> 		ret
    85                              <1> 
    86                              <1> %ifdef USE_TEST_AND_SET
    87 00000A9B 00                  <1> ALIGN 4, db 0
    88 00000A9C 00000000            <1> IN_USE:	dd	0
    89                              <1> %endif
    90                              <1> 
   153                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+12| Y（行）
     7                              <1> 												; EBP+ 8| X（列）
     8                              <1> 												; ---------------
     9 00000AA0 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    10 00000AA1 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    11                              <1> 												; ---------------
    12                              <1> 
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 00000AA3 50                  <1> 		push	eax
    17 00000AA4 53                  <1> 		push	ebx
    18 00000AA5 51                  <1> 		push	ecx
    19 00000AA6 52                  <1> 		push	edx
    20 00000AA7 56                  <1> 		push	esi
    21 00000AA8 57                  <1> 		push	edi
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 表示位置
    25                              <1> 		;---------------------------------------
    26 00000AA9 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    27 00000AAC 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    28                              <1> 
    29 00000AAF B900000000          <1>         mov     ecx, 0
    30 00000AB4 81F900010000        <1> .10L:   cmp     ecx, 256
    31 00000ABA 731F                <1>         jae     .10E
    32                              <1> 
    33 00000ABC 89C8                <1>         mov     eax, ecx
    34 00000ABE 83E00F              <1>         and     eax, 0x0F
    35 00000AC1 01F0                <1>         add     eax, esi            ;列 0 => 11110000 として端っこによるようにする
    36                              <1> 
    37 00000AC3 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    38 00000AC5 C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
    39 00000AC8 01FB                <1> 		add		ebx, edi						;   EBX += Y;       ;行 １６で割ったときに商がいくつか
    40                              <1> 
    41 00000ACA 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
    41 00000AD3 FF6683C410          <1>
    42                              <1> 
    43 00000AD8 41                  <1> 		inc		ecx								;   // for (... ECX++)
    44 00000AD9 EBD9                <1> 		jmp		.10L							; 
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 00000ADB 5F                  <1> 		pop		edi
    51 00000ADC 5E                  <1> 		pop		esi
    52 00000ADD 5A                  <1> 		pop		edx
    53 00000ADE 59                  <1> 		pop		ecx
    54 00000ADF 5B                  <1> 		pop		ebx
    55 00000AE0 58                  <1> 		pop		eax
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; 【スタックフレームの破棄】
    59                              <1> 		;---------------------------------------
    60 00000AE1 89EC                <1> 		mov		esp, ebp
    61 00000AE3 5D                  <1> 		pop		ebp
    62                              <1> 
    63 00000AE4 C3                  <1> 		ret
    64                              <1> 
   154                                  %include	"../modules/protect/draw_str.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	文字列の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_str(col, row, color, p);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	p		: 文字列のアドレス
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_str:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| *p（文字列のアドレス）
    20                              <1> 												; EBP+16| color（色）
    21                              <1> 												; EBP+12| row（行）
    22                              <1> 												; EBP+ 8| col（列）
    23                              <1> 												; ---------------
    24 00000AE5 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    25 00000AE6 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    26                              <1> 												; ---------------
    27                              <1> 
    28                              <1> 		;---------------------------------------
    29                              <1> 		; 【レジスタの保存】
    30                              <1> 		;---------------------------------------
    31 00000AE8 50                  <1> 		push	eax
    32 00000AE9 53                  <1> 		push	ebx
    33 00000AEA 51                  <1> 		push	ecx
    34 00000AEB 52                  <1> 		push	edx
    35 00000AEC 56                  <1> 		push	esi
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 文字列の表示
    39                              <1> 		;---------------------------------------
    40 00000AED 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    41 00000AF0 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    42 00000AF3 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    43 00000AF7 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
    44                              <1> 
    45 00000AFA FC                  <1> 		cld										; DF = 0; // アドレス加算
    46                              <1> .10L:											; do
    47                              <1> 												; {
    48 00000AFB AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
    49 00000AFC 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
    50 00000AFE 741A                <1> 		je		.10E							;     break;
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 1文字表示
    54                              <1> 		;---------------------------------------
    55                              <1> %ifdef	USE_SYSTEM_CALL
    56 00000B00 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
    57                              <1> %else
    58                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
    59                              <1> %endif
    60                              <1> 
    61                              <1> 		; 次の文字の位置を調整
    62 00000B02 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
    63 00000B03 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
    64 00000B06 7C10                <1> 		jl		.12E							;   {
    65 00000B08 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
    66 00000B0D 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
    67 00000B0E 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
    68 00000B11 7C05                <1> 		jl		.12E							;     {
    69 00000B13 BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
    70                              <1> 												;     }
    71                              <1> .12E:											;   }
    72 00000B18 EBE1                <1> 		jmp		.10L							;   
    73                              <1> .10E:											; } while (1);
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの復帰】
    77                              <1> 		;---------------------------------------
    78 00000B1A 5E                  <1> 		pop		esi
    79 00000B1B 5A                  <1> 		pop		edx
    80 00000B1C 59                  <1> 		pop		ecx
    81 00000B1D 5B                  <1> 		pop		ebx
    82 00000B1E 58                  <1> 		pop		eax
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの破棄】
    86                              <1> 		;---------------------------------------
    87 00000B1F 89EC                <1> 		mov		esp, ebp
    88 00000B21 5D                  <1> 		pop		ebp
    89                              <1> 
    90 00000B22 C3                  <1> 		ret
    91                              <1> 
   155                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	カラーバーの表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_color_bar(col, row);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> draw_color_bar:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												; EBP+ 8| X（列）
    18                              <1> 												; EBP+12| Y（行）
    19                              <1> 												; ---------------
    20 00000B23 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 00000B24 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ---------------
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 【レジスタの保存】
    25                              <1> 		;---------------------------------------
    26 00000B26 50                  <1> 		push	eax
    27 00000B27 53                  <1> 		push	ebx
    28 00000B28 51                  <1> 		push	ecx
    29 00000B29 52                  <1> 		push	edx
    30 00000B2A 56                  <1> 		push	esi
    31 00000B2B 57                  <1> 		push	edi
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 表示位置
    35                              <1> 		;---------------------------------------
    36 00000B2C 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    37 00000B2F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; カラーバーを表示
    41                              <1> 		;---------------------------------------
    42 00000B32 B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
    43 00000B37 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
    44 00000B3A 732E                <1> 		jae		.10E							; 
    45                              <1> 												;      ECX++)
    46                              <1> 												; {
    47                              <1> 												;   // 桁位置の計算
    48 00000B3C 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
    49 00000B3E 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
    50 00000B41 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
    51 00000B44 01F0                <1> 		add		eax, esi						;   EAX += X;
    52                              <1> 												;   
    53                              <1> 												;   // 行位置の計算
    54 00000B46 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    55 00000B48 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
    56 00000B4A 01FB                <1> 		add		ebx, edi						;   EBX += Y;
    57                              <1> 												;   
    58                              <1> 												;   // 表示色の取得
    59 00000B4C 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
    60 00000B4E D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
    61 00000B50 8B92[7D0B0000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
    62                              <1> 
    63 00000B56 68[740B0000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
    63 00000B5E E882FFFFFF6683C410  <1>
    64                              <1> 
    65 00000B67 41                  <1> 		inc		ecx								;   // for (... ECX++)
    66 00000B68 EBCD                <1> 		jmp		.10L							; 
    67                              <1> .10E:											; }
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 【レジスタの復帰】
    71                              <1> 		;---------------------------------------
    72 00000B6A 5F                  <1> 		pop		edi
    73 00000B6B 5E                  <1> 		pop		esi
    74 00000B6C 5A                  <1> 		pop		edx
    75 00000B6D 59                  <1> 		pop		ecx
    76 00000B6E 5B                  <1> 		pop		ebx
    77 00000B6F 58                  <1> 		pop		eax
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 【スタックフレームの破棄】
    81                              <1> 		;---------------------------------------
    82 00000B70 89EC                <1> 		mov		esp, ebp
    83 00000B72 5D                  <1> 		pop		ebp
    84                              <1> 
    85 00000B73 C3                  <1> 		ret
    86                              <1> 
    87 00000B74 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
    88                              <1> 
    89 00000B7D 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
    90 00000B81 00010009            <1> 		dw	0x0100, 0x0900
    91 00000B85 0002000A            <1> 		dw	0x0200, 0x0A00
    92 00000B89 0003000B            <1> 		dw	0x0300, 0x0B00
    93 00000B8D 0004000C            <1> 		dw	0x0400, 0x0C00
    94 00000B91 0005000D            <1> 		dw	0x0500, 0x0D00
    95 00000B95 0006000E            <1> 		dw	0x0600, 0x0E00
    96 00000B99 0007000F            <1> 		dw	0x0700, 0x0F00
    97                              <1> 
   156                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ピクセルの描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_pixel(X, Y, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X		: X座標
     8                              <1> ;	Y		: Y座標
     9                              <1> ;	color	: 描画色
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> draw_pixel:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ------|--------
    18                              <1> 												; EBP+16| 色
    19                              <1> 												; EBP+12| Y
    20                              <1> 												; EBP+ 8| X
    21                              <1> 												; ------|--------
    22 00000B9D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    23 00000B9E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    24                              <1> 												; ------+--------
    25                              <1> 		;---------------------------------------
    26                              <1> 		; 【レジスタの保存】
    27                              <1> 		;---------------------------------------
    28 00000BA0 50                  <1> 		push	eax
    29 00000BA1 53                  <1> 		push	ebx
    30 00000BA2 51                  <1> 		push	ecx
    31 00000BA3 57                  <1> 		push	edi
    32                              <1>         
    33                              <1> 		;---------------------------------------
    34                              <1> 		; Y座標を80倍する（640/8）
    35                              <1> 		;---------------------------------------
    36                              <1> 
    37 00000BA4 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000BA7 C1E704              <1>         shl     edi, 4
    39 00000BAA 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000]
    40                              <1> 
    41 00000BB1 8B5D08              <1>         mov     ebx, [ebp + 8]
    42 00000BB4 89D9                <1>         mov     ecx, ebx
    43 00000BB6 C1EB03              <1>         shr     ebx, 3
    44 00000BB9 01DF                <1>         add     edi, ebx
    45                              <1> 
    46 00000BBB 83E107              <1>         and     ecx, 0x07
    47 00000BBE BB80000000          <1>         mov     ebx, 0x80
    48 00000BC3 D3EB                <1>         shr     ebx, cl
    49                              <1> 
    50 00000BC5 8B4D10              <1>         mov     ecx, [ebp +16]
    51                              <1> 
    52                              <1> %ifdef	USE_TEST_AND_SET
    53 00000BC8 68[9C0A0000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    53 00000BD0 00006683C404        <1>
    54                              <1> %endif
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; プレーン毎に出力
    58                              <1> 		;---------------------------------------
    59 00000BD6 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
    59 00000BDF C404                <1>
    60 00000BE1 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
    60 00000BEA C404                <1>
    61 00000BEC 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    61 00000BF5 FF6683C410          <1>
    62                              <1> 
    63 00000BFA 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
    63 00000C03 C404                <1>
    64 00000C05 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
    64 00000C0E C404                <1>
    65 00000C10 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    65 00000C19 FF6683C410          <1>
    66                              <1> 
    67 00000C1E 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
    67 00000C27 C404                <1>
    68 00000C29 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
    68 00000C32 C404                <1>
    69 00000C34 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    69 00000C3D FF6683C410          <1>
    70                              <1> 
    71 00000C42 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
    71 00000C4B C404                <1>
    72 00000C4D 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
    72 00000C56 C404                <1>
    73 00000C58 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    73 00000C61 FF6683C410          <1>
    74                              <1> 
    75                              <1> 
    76                              <1> %ifdef	USE_TEST_AND_SET
    77                              <1> 		;---------------------------------------
    78                              <1> 		; テストアンドセット
    79                              <1> 		;---------------------------------------
    80 00000C66 C705[9C0A0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    80 00000C6E 0000                <1>
    81                              <1> %endif
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【レジスタの復帰】
    85                              <1> 		;---------------------------------------
    86 00000C70 5F                  <1> 		pop		edi
    87 00000C71 59                  <1> 		pop		ecx
    88 00000C72 5B                  <1> 		pop		ebx
    89 00000C73 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 00000C74 89EC                <1> 		mov		esp, ebp
    95 00000C76 5D                  <1> 		pop		ebp
    96                              <1> 
    97 00000C77 C3                  <1> 		ret
    98                              <1> 
   157                                  %include	"../modules/protect/draw_line.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	直線の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_line:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ---------------
    20                              <1> 												;    +24| 色
    21                              <1> 												;    +20| Y1
    22                              <1> 												;    +16| X1
    23                              <1> 												;    +12| Y0
    24                              <1> 												;    + 8| X0
    25                              <1> 												; ---------------
    26 00000C78 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 00000C79 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ---------------
    29 00000C7B 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
    30 00000C7D 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
    31 00000C7F 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
    32 00000C81 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
    33 00000C83 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
    34 00000C85 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
    35 00000C87 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
    36                              <1> 												; ------|--------
    37                              <1> 
    38                              <1> 		;---------------------------------------
    39                              <1> 		; 【レジスタの保存】
    40                              <1> 		;---------------------------------------
    41 00000C89 50                  <1> 		push	eax
    42 00000C8A 53                  <1> 		push	ebx
    43 00000C8B 51                  <1> 		push	ecx
    44 00000C8C 52                  <1> 		push	edx
    45 00000C8D 56                  <1> 		push	esi
    46 00000C8E 57                  <1> 		push	edi
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 幅を計算（X軸）
    50                              <1> 		;---------------------------------------
    51 00000C8F 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    52 00000C92 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
    53 00000C95 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
    54 00000C97 7D09                <1> 		jge		.10F							; if (幅 < 0)
    55                              <1> 												; {
    56 00000C99 F7DB                <1> 		neg		ebx								;   幅   *= -1;
    57 00000C9B BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
    58 00000CA0 EB05                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61 00000CA2 BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
    62                              <1> .10E:											; }
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 高さを計算（Y軸）
    66                              <1> 		;---------------------------------------
    67 00000CA7 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
    68 00000CAA 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
    69 00000CAD 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
    70 00000CAF 7D09                <1> 		jge		.20F							; if (高さ < 0)
    71                              <1> 												; {
    72 00000CB1 F7DA                <1> 		neg		edx								;   高さ *= -1;
    73 00000CB3 BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
    74 00000CB8 EB05                <1> 		jmp		.20E							; }
    75                              <1> .20F:											; else
    76                              <1> 												; {
    77 00000CBA BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
    78                              <1> .20E:											; }
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; X軸
    82                              <1> 		;---------------------------------------
    83 00000CBF 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
    84 00000CC2 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
    85 00000CC5 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; Y軸
    89                              <1> 		;---------------------------------------
    90 00000CC8 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
    91 00000CCB 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
    92 00000CCE 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 基準軸を決める
    96                              <1> 		;---------------------------------------
    97 00000CD1 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
    98 00000CD3 7F08                <1> 		jg		.22F							; {
    99                              <1> 												;   
   100 00000CD5 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   101 00000CD8 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   102                              <1> 												;   
   103 00000CDB EB06                <1> 		jmp		.22E							; }
   104                              <1> .22F:											; else
   105                              <1> 												; {
   106 00000CDD 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   107 00000CE0 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   108                              <1> .22E:											; }
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 繰り返し回数(基準軸のドット数)
   112                              <1> 		;---------------------------------------
   113 00000CE3 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   114 00000CE6 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   115 00000CE9 7505                <1> 		jnz		.30E							; {
   116 00000CEB B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   117                              <1> .30E:											; }
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 線を描画
   121                              <1> 		;---------------------------------------
   122                              <1> .50L:											; do
   123                              <1> 												; {
   124                              <1> %ifdef	USE_SYSTEM_CALL
   125 00000CF0 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   126                              <1> 
   127 00000CF2 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   128 00000CF5 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   129 00000CF8 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   130 00000CFB CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   131                              <1> 
   132 00000CFD 89C1                <1> 		mov		ecx, eax
   133                              <1> %else
   136                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   137                              <1> %endif
   138                              <1> 												;   // 基準軸を更新(1ドット分)
   139 00000CFF 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   140 00000D02 0106                <1> 		add		[esi - 0], eax					;   
   141                              <1> 
   142                              <1> 												;   // 相対軸を更新
   143 00000D04 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   144 00000D07 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   145 00000D0A 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   146                              <1> 
   147 00000D0D 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   148 00000D0F 7C07                <1> 		jl		.52E							;   {
   149 00000D11 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   150                              <1> 												;     
   151                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   152 00000D13 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   153 00000D16 011F                <1> 		add		[edi - 0], ebx					;     
   154                              <1> .52E:											;   }
   155 00000D18 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   156                              <1> 												;   
   157 00000D1B E2D3                <1> 		loop	.50L							;   
   158                              <1> .50E:											; } while (ループ回数--);
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【レジスタの復帰】
   162                              <1> 		;---------------------------------------
   163 00000D1D 5F                  <1> 		pop		edi
   164 00000D1E 5E                  <1> 		pop		esi
   165 00000D1F 5A                  <1> 		pop		edx
   166 00000D20 59                  <1> 		pop		ecx
   167 00000D21 5B                  <1> 		pop		ebx
   168 00000D22 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 00000D23 89EC                <1> 		mov		esp, ebp
   174 00000D25 5D                  <1> 		pop		ebp
   175                              <1> 
   176 00000D26 C3                  <1> 		ret
   177                              <1> 
   158                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	矩形の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_rect:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ------|--------
    20                              <1> 												; EBP+24| 色
    21                              <1> 												; EBP+20| Y1
    22                              <1> 												; EBP+16| X1
    23                              <1> 												; EBP+12| Y0
    24                              <1> 												; EBP+ 8| X0
    25                              <1> 												; ---------------
    26 00000D27 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 00000D28 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ------|--------
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; 【レジスタの保存】
    32                              <1> 		;---------------------------------------
    33 00000D2A 50                  <1> 		push		eax
    34 00000D2B 53                  <1> 		push		ebx
    35 00000D2C 51                  <1> 		push		ecx
    36 00000D2D 52                  <1> 		push		edx
    37 00000D2E 56                  <1> 		push		esi
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; 矩形を描画
    41                              <1> 		;---------------------------------------
    42 00000D2F 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    43 00000D32 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
    44 00000D35 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
    45 00000D38 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
    46 00000D3B 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 座標軸の大小を確定
    50                              <1> 		;---------------------------------------
    51 00000D3E 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
    52 00000D40 7C01                <1> 		jl		.10E							; {
    53 00000D42 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
    54                              <1> .10E:											; }
    55                              <1> 
    56 00000D43 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
    57 00000D45 7C02                <1> 		jl		.20E							; {
    58 00000D47 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
    59                              <1> .20E:											; }
    60                              <1> 
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 矩形を描画
    63                              <1> 		;---------------------------------------
    64 00000D49 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
    64 00000D52 FF6683C414          <1>
    65 00000D57 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
    65 00000D60 FF6683C414          <1>
    66                              <1> 
    67 00000D65 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
    68 00000D66 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
    68 00000D6F FF6683C414          <1>
    69 00000D74 42                  <1> 		inc		edx
    70                              <1> 
    71 00000D75 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
    72 00000D76 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
    72 00000D7F FF6683C414          <1>
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 00000D84 5E                  <1> 		pop		esi
    78 00000D85 5A                  <1> 		pop		edx
    79 00000D86 59                  <1> 		pop		ecx
    80 00000D87 5B                  <1> 		pop		ebx
    81 00000D88 58                  <1> 		pop		eax
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの破棄】
    85                              <1> 		;---------------------------------------
    86 00000D89 89EC                <1> 		mov		esp, ebp
    87 00000D8B 5D                  <1> 		pop		ebp
    88                              <1> 
    89 00000D8C C3                  <1> 		ret
    90                              <1> 
   159                                  %include	"../modules/protect/itoa.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	数値を文字に変換
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	num		: 変換する数値
     8                              <1> ;	buff	: 保存先バッファアドレス
     9                              <1> ;	size	: 保存先バッファサイズ
    10                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    11                              <1> ;	flags	: フラグ
    12                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    13                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    14                              <1> ;			:   B1 : 1=＋/-符号を表示する
    15                              <1> ;			:      : 0=＋/-符号を表示しない
    16                              <1> ;			:   B0 : 1=符号付き正数として扱う
    17                              <1> ;			:      : 0=符号無し正数として扱う
    18                              <1> ;
    19                              <1> ;■戻り値	: 無し
    20                              <1> ;************************************************************************
    21                              <1> itoa:
    22                              <1> 		;---------------------------------------
    23                              <1> 		; 【スタックフレームの構築】
    24                              <1> 		;---------------------------------------
    25                              <1> 												; ------|--------
    26                              <1> 												;    +24| フラグ
    27                              <1> 												;    +20| 基数
    28                              <1> 												;    +16| バッファサイズ
    29                              <1> 												;    +12| バッファアドレス
    30                              <1> 												;    + 8| 数値
    31                              <1> 												; ------|--------
    32                              <1> 												;    + 4| EIP（戻り番地）
    33 00000D8D 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    34 00000D8E 89E5                <1> 		mov		ebp, esp						; ------+--------
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの保存】
    38                              <1> 		;---------------------------------------
    39 00000D90 50                  <1> 		push	eax
    40 00000D91 53                  <1> 		push	ebx
    41 00000D92 51                  <1> 		push	ecx
    42 00000D93 52                  <1> 		push	edx
    43 00000D94 56                  <1> 		push	esi
    44 00000D95 57                  <1> 		push	edi
    45                              <1> 
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 引数を取得
    48                              <1> 		;---------------------------------------
    49 00000D96 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
    50 00000D99 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
    51 00000D9C 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
    52                              <1> 
    53 00000D9F 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
    54 00000DA1 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
    55 00000DA3 4F                  <1> 		dec		edi								; 
    56                              <1> 
    57 00000DA4 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
    58                              <1> 
    59                              <1> 		;---------------------------------------
    60                              <1> 		; 符号付き判定
    61                              <1> 		;---------------------------------------
    62 00000DA7 F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
    63 00000DAD 7408                <1> .10Q:	je		.10E							; {
    64 00000DAF 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    65 00000DB2 7D03                <1> .12Q:	jge		.12E							;   {
    66 00000DB4 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
    67                              <1> .12E:											;   }
    68                              <1> .10E:											; }
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 符号出力判定
    72                              <1> 		;---------------------------------------
    73 00000DB7 F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
    74 00000DBD 7410                <1> .20Q:	je		.20E							; {
    75 00000DBF 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    76 00000DC2 7D07                <1> .22Q:	jge		.22F							;   {
    77 00000DC4 F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
    78 00000DC6 C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
    79 00000DC9 EB03                <1> 		jmp		.22E							;   }
    80                              <1> .22F:											;   else
    81                              <1> 												;   {
    82 00000DCB C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
    83                              <1> .22E:											;   }
    84 00000DCE 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
    85                              <1> .20E:											; }
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; ASCII変換
    89                              <1> 		;---------------------------------------
    90 00000DCF 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
    91                              <1> .30L:											; do
    92                              <1> 												; {
    93 00000DD2 BA00000000          <1> 		mov		edx, 0							;   
    94 00000DD7 F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
    95                              <1> 												;   AX = DX:AX / 基数;
    96                              <1> 												;   
    97 00000DD9 89D6                <1> 		mov		esi, edx						;   // テーブル参照
    98 00000DDB 8A96[060E0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
    99                              <1> 												;   
   100 00000DE1 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   101 00000DE3 4F                  <1> 		dec		edi								;   dst--;
   102                              <1> 												;   
   103 00000DE4 83F800              <1> 		cmp		eax, 0							;   
   104 00000DE7 E0E9                <1> 		loopnz	.30L							; } while (AX);
   105                              <1> .30E:
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 空欄を埋める
   109                              <1> 		;---------------------------------------
   110 00000DE9 83F900              <1> 		cmp		ecx, 0							; if (size)
   111 00000DEC 740E                <1> .40Q:	je		.40E							; {
   112 00000DEE B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   113 00000DF0 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   114 00000DF5 7502                <1> .42Q:	jne		.42E							;   {
   115 00000DF7 B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   116                              <1> .42E:											;   }
   117 00000DF9 FD                  <1> 		std										;   // DF = 1（-方向）
   118 00000DFA F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   119                              <1> .40E:											; }
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの復帰】
   123                              <1> 		;---------------------------------------
   124 00000DFC 5F                  <1> 		pop		edi
   125 00000DFD 5E                  <1> 		pop		esi
   126 00000DFE 5A                  <1> 		pop		edx
   127 00000DFF 59                  <1> 		pop		ecx
   128 00000E00 5B                  <1> 		pop		ebx
   129 00000E01 58                  <1> 		pop		eax
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの破棄】
   133                              <1> 		;---------------------------------------
   134 00000E02 89EC                <1> 		mov		esp, ebp
   135 00000E04 5D                  <1> 		pop		ebp
   136                              <1> 
   137 00000E05 C3                  <1> 		ret
   138                              <1> 
   139 00000E06 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   139 00000E0F 39414243444546      <1>
   140                              <1> 
   160                                  %include	"../modules/protect/rtc.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD rtc_get_time(dst);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	dst		: 保存先アドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    10                              <1> ;************************************************************************
    11                              <1> rtc_get_time:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; ------|--------
    16                              <1> 												; EBP+ 8| 保存先アドレス
    17                              <1> 												; ---------------
    18 00000E16 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    19 00000E17 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    20                              <1> 												; ---------------
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 00000E19 53                  <1> 		push	ebx
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; RTCから時刻を取得
    28                              <1> 		;---------------------------------------
    29 00000E1A B00A                <1> 		mov		al, 0x0A						; // レジスタA
    30 00000E1C E670                <1> 		out		0x70, al						; outp(0x70, AL);
    31 00000E1E E471                <1> 		in		al, 0x71						; AL = レジスタA;
    32 00000E20 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
    33 00000E22 7407                <1> 		je		.10F							; {
    34 00000E24 B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
    35 00000E29 EB27                <1> 		jmp		.10E							; }
    36                              <1> .10F:											; else
    37                              <1> 												; {
    38                              <1> 												;   // RAM[0x04]:時
    39 00000E2B B004                <1> 		mov		al, 0x04						;   AL = 0x04;
    40 00000E2D E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    41 00000E2F E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
    42                              <1> 												;   
    43 00000E31 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    44                              <1> 												;   
    45                              <1> 												;   // RAM[0x02]:分
    46 00000E34 B002                <1> 		mov		al, 0x02						;   AL = 0x02;
    47 00000E36 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    48 00000E38 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
    49                              <1> 												;   
    50 00000E3A C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    51                              <1> 												;   
    52                              <1> 												;   // RAM[0x00]:秒
    53 00000E3D B000                <1> 		mov		al, 0x00						;   AL = 0x00;
    54 00000E3F E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    55 00000E41 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
    56                              <1> 												;   
    57 00000E43 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
    58                              <1> 												;   
    59 00000E48 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
    60 00000E4B 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
    61                              <1> 												;   
    62 00000E4D B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
    63                              <1> .10E:											; }
    64                              <1> 
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 【レジスタの復帰】
    67                              <1> 		;---------------------------------------
    68 00000E52 5B                  <1> 		pop		ebx
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【スタックフレームの破棄】
    72                              <1> 		;---------------------------------------
    73 00000E53 89EC                <1> 		mov		esp, ebp
    74 00000E55 5D                  <1> 		pop		ebp
    75                              <1> 
    76 00000E56 C3                  <1> 		ret
    77                              <1> 
   161                                  %include	"../modules/protect/draw_time.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	時刻の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_time(col, row, color, time);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	time	: 時刻データ
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_time:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| 時刻データ
    20                              <1> 												; EBP+16| 色
    21                              <1> 												; EBP+12| Y（行）
    22                              <1> 												; EBP+ 8| X（列）
    23                              <1> 												; ---------------
    24 00000E57 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    25 00000E58 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
    26                              <1> 												; ---------------
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの保存】
    29                              <1> 		;---------------------------------------
    30 00000E5A 50                  <1> 		push	eax
    31 00000E5B 53                  <1> 		push	ebx
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 
    35                              <1> 		;---------------------------------------
    36 00000E5C 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
    37 00000E5F 3B05[DC0E0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
    38 00000E65 7467                <1> 		je		.10E							; {
    39                              <1> 												;   
    40 00000E67 A3[DC0E0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
    41                              <1> 												;   
    42 00000E6C BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
    43 00000E71 88C3                <1> 		mov		bl, al							;   EBX = 秒;
    44 00000E73 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
    44 00000E7A [EA0E0000]53E809FF- <1>
    44 00000E82 FFFF6683C414        <1>
    45                              <1> 
    46 00000E88 88E3                <1> 		mov		bl, ah							;   EBX = 分;
    47 00000E8A 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
    47 00000E91 [E70E0000]53E8F2FE- <1>
    47 00000E99 FFFF6683C414        <1>
    48                              <1> 
    49 00000E9F C1E810              <1> 		shr		eax, 16							;   EBX = 時;
    50 00000EA2 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
    50 00000EA9 [E40E0000]50E8DAFE- <1>
    50 00000EB1 FFFF6683C414        <1>
    51                              <1> 
    52                              <1> 												;   // 時刻を表示
    53 00000EB7 68[E40E0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    53 00000EBF FF750CFF7508E81BFC- <1>
    53 00000EC8 FFFF6683C410        <1>
    54                              <1> 												;     
    55                              <1> 												;   }
    56                              <1> .10E:											; }
    57                              <1> 
    58                              <1> 		;---------------------------------------
    59                              <1> 		; 【レジスタの復帰】
    60                              <1> 		;---------------------------------------
    61 00000ECE 5B                  <1> 		pop		ebx
    62 00000ECF 58                  <1> 		pop		eax
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 【スタックフレームの破棄】
    66                              <1> 		;---------------------------------------
    67 00000ED0 89EC                <1> 		mov		esp, ebp
    68 00000ED2 5D                  <1> 		pop		ebp
    69                              <1> 
    70 00000ED3 C3                  <1> 		ret
    71                              <1> 
    72                              <1> ALIGN 2, db 0
    73 00000ED4 0000000000000000    <1> .temp:	dq	0
    74 00000EDC 0000000000000000    <1> .last:	dq	0
    75 00000EE4 5A5A3A              <1> .hour:	db	"ZZ:"
    76 00000EE7 5A5A3A              <1> .min:	db	"ZZ:"
    77 00000EEA 5A5A00              <1> .sec:	db	"ZZ", 0
   162                                  %include	"../modules/protect/interrupt.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込みベクタの初期化
     3                              <1> ;************************************************************************
     4 00000EED 90<rept>            <1> ALIGN 4
     5 00000EF0 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
     6 00000EF2 00001000            <1> 		dd 		VECT_BASE					; idt location
     7                              <1> 
     8                              <1> ;************************************************************************
     9                              <1> ;	割り込みテーブルを初期化
    10                              <1> ;------------------------------------------------------------------------
    11                              <1> ;	
    12                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
    13                              <1> ;	必要な割り込みだけ設定しなおす。
    14                              <1> ;	
    15                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
    16                              <1> ;	0x0800バイト占有することになる。
    17                              <1> ;	
    18                              <1> ;	           |____________| _V___
    19                              <1> ;	  VECT_BASE| IntDefault |  |   
    20                              <1> ;	           | IntDefault |  | 8 * 256
    21                              <1> ;	           |      :     |  |   
    22                              <1> ;	           |____________| _|___
    23                              <1> ;	      +0800|////////////|
    24                              <1> ;	           |            |
    25                              <1> ;	
    26                              <1> ;	一つの割り込み設定は8バイトで構成される。
    27                              <1> ;	
    28                              <1> ;	           |____________|____________| 
    29                              <1> ;	        [0]| Address Lo[15: 0]       | 
    30                              <1> ;	        [2]| Selector                | 
    31                              <1> ;	        [4]| Flags                   | 
    32                              <1> ;	        [6]|_Address Lo[32:16]_______| 
    33                              <1> ;	           |/////////////////////////| 
    34                              <1> ;	           |            |            | 
    35                              <1> ;	
    36                              <1> ;========================================================================
    37                              <1> ;■書式		: void init_int(void);
    38                              <1> ;
    39                              <1> ;■引数		: 無し
    40                              <1> ;
    41                              <1> ;■戻り値	: 無し
    42                              <1> ;************************************************************************
    43                              <1> init_int:
    44                              <1> 		;---------------------------------------
    45                              <1> 		; 【レジスタの保存】
    46                              <1> 		;---------------------------------------
    47 00000EF6 50                  <1> 		push	eax
    48 00000EF7 53                  <1> 		push	ebx
    49 00000EF8 51                  <1> 		push	ecx
    50 00000EF9 57                  <1> 		push	edi
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 全ての割り込みにデフォルト処理を設定
    54                              <1> 		;---------------------------------------
    55 00000EFA 8D05[40100000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
    56 00000F00 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
    57 00000F05 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
    58                              <1> 
    59 00000F07 B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
    60 00000F0C BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
    61                              <1> 
    62                              <1> .10L:											; do
    63                              <1> 												; {
    64 00000F11 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
    65 00000F13 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
    66 00000F16 83C708              <1> 		add		edi, 8							;   EDI += 8;
    67 00000F19 E2F6                <1> 		loop	.10L							; } while (ECX--);
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 割り込みディスクリプタの設定
    71                              <1> 		;---------------------------------------
    72 00000F1B 0F011D[F00E0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 00000F22 5F                  <1> 		pop		edi
    78 00000F23 59                  <1> 		pop		ecx
    79 00000F24 5B                  <1> 		pop		ebx
    80 00000F25 58                  <1> 		pop		eax
    81                              <1> 
    82 00000F26 C3                  <1> 		ret
    83                              <1> 
    84                              <1> ;************************************************************************
    85                              <1> ;	スタックの内容を表示して無限ループを実行
    86                              <1> ;************************************************************************
    87                              <1> int_stop:
    88 00000F27 FB                  <1> 		sti										; // 割り込み許可
    89                              <1> 
    90                              <1> 		;---------------------------------------
    91                              <1> 		; EAXで示される文字列を表示
    92                              <1> 		;---------------------------------------
    93 00000F28 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
    93 00000F31 19E8AEFBFFFF6683C4- <1>
    93 00000F3A 10                  <1>
    94                              <1> 
    95                              <1> 		;---------------------------------------
    96                              <1> 		; スタックのデータを文字列に変換
    97                              <1> 		;---------------------------------------
    98 00000F3B 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
    99 00000F3E 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    99 00000F45 [03100000]50E83EFE- <1>
    99 00000F4D FFFF6683C414        <1>
   100                              <1> 
   101 00000F53 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   102 00000F57 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   102 00000F5E [14100000]50E825FE- <1>
   102 00000F66 FFFF6683C414        <1>
   103                              <1> 
   104 00000F6C 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   105 00000F70 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   105 00000F77 [25100000]50E80CFE- <1>
   105 00000F7F FFFF6683C414        <1>
   106                              <1> 
   107 00000F85 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   108 00000F89 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   108 00000F90 [36100000]50E8F3FD- <1>
   108 00000F98 FFFF6683C414        <1>
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 文字列の表示
   112                              <1> 		;---------------------------------------
   113 00000F9E 68[FC0F0000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   113 00000FA6 00006A106A19E834FB- <1>
   113 00000FAF FFFF6683C410        <1>
   114 00000FB5 68[0D100000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   114 00000FBD 00006A116A19E81DFB- <1>
   114 00000FC6 FFFF6683C410        <1>
   115 00000FCC 68[1E100000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   115 00000FD4 00006A126A19E806FB- <1>
   115 00000FDD FFFF6683C410        <1>
   116 00000FE3 68[2F100000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   116 00000FEB 00006A136A19E8EFFA- <1>
   116 00000FF4 FFFF6683C410        <1>
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 無限ループ
   120                              <1> 		;---------------------------------------
   121 00000FFA EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   122                              <1> 
   123 00000FFC 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   124 00001003 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   124 0000100C 00                  <1>
   125 0000100D 2020202B20343A      <1> .s2		db	"   + 4:"
   126 00001014 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   126 0000101D 00                  <1>
   127 0000101E 2020202B20383A      <1> .s3		db	"   + 8:"
   128 00001025 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   128 0000102E 00                  <1>
   129 0000102F 2020202B31323A      <1> .s4		db	"   +12:"
   130 00001036 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   130 0000103F 00                  <1>
   131                              <1> 
   132                              <1> ;************************************************************************
   133                              <1> ;	割り込み処理：デフォルトの処理
   134                              <1> ;************************************************************************
   135                              <1> int_default:
   136 00001040 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   137 00001041 0E                  <1> 		push	cs								; // CS
   138 00001042 68[270F0000]        <1> 		push	int_stop						; // スタック表示処理
   139                              <1> 
   140 00001047 B8[4D100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   141 0000104C CF                  <1> 		iret
   142                              <1> 
   143 0000104D 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   143 00001056 50202020203E2000    <1>
   144                              <1> 
   145                              <1> ;************************************************************************
   146                              <1> ;	割り込み処理：ゼロ除算
   147                              <1> ;************************************************************************
   148                              <1> int_zero_div:
   149 0000105E 9C                  <1> 		pushf									; // EFLAGS
   150 0000105F 0E                  <1> 		push	cs								; // CS
   151 00001060 68[270F0000]        <1> 		push	int_stop						; // スタック表示処理
   152                              <1> 
   153 00001065 B8[6B100000]        <1> 		mov		eax, .s0						; // 割り込み種別
   154 0000106A CF                  <1> 		iret
   155                              <1> 
   156 0000106B 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   156 00001074 44495620203E2000    <1>
   157                              <1> 
   163                                  %include	"../modules/protect/pic.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込みコントローラの初期化
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void init_pic(void);
     5                              <1> ;
     6                              <1> ;■引数		: 無し
     7                              <1> ;
     8                              <1> ;■戻り値	: 無し
     9                              <1> ;************************************************************************
    10                              <1> init_pic:
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 【レジスタの保存】
    13                              <1> 		;---------------------------------------
    14 0000107C 50                  <1> 		push	eax
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; マスタPICの設定
    18                              <1> 		;---------------------------------------
    19                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    19 0000107D B011                <2>  mov al, %2
    19 0000107F E620                <2>  out %1, al
    20                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    20 00001081 B020                <2>  mov al, %2
    20 00001083 E621                <2>  out %1, al
    21                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    21 00001085 B004                <2>  mov al, %2
    21 00001087 E621                <2>  out %1, al
    22                              <1> 		outp	0x21, 0x05						; // MASTER.ICW4 = 0x05;
    22 00001089 B005                <2>  mov al, %2
    22 0000108B E621                <2>  out %1, al
    23                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    23 0000108D B0FF                <2>  mov al, %2
    23 0000108F E621                <2>  out %1, al
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; スレーブPICの設定
    27                              <1> 		;---------------------------------------
    28                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    28 00001091 B011                <2>  mov al, %2
    28 00001093 E6A0                <2>  out %1, al
    29                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    29 00001095 B028                <2>  mov al, %2
    29 00001097 E6A1                <2>  out %1, al
    30                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    30 00001099 B002                <2>  mov al, %2
    30 0000109B E6A1                <2>  out %1, al
    31                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    31 0000109D B001                <2>  mov al, %2
    31 0000109F E6A1                <2>  out %1, al
    32                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    32 000010A1 B0FF                <2>  mov al, %2
    32 000010A3 E6A1                <2>  out %1, al
    33                              <1> 
    34                              <1> 		;---------------------------------------
    35                              <1> 		; 【レジスタの復帰】
    36                              <1> 		;---------------------------------------
    37 000010A5 58                  <1> 		pop		eax
    38                              <1> 
    39 000010A6 C3                  <1> 		ret
    40                              <1> 
   164                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> rtc_int_en:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												;    + 8| ビット
     7                              <1> 												; ------|--------
     8                              <1> 												;    + 4| EIP（戻り番地）
     9 000010A7 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    10 000010A8 89E5                <1> 		mov		ebp, esp						; ------+--------
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【レジスタの保存】
    14                              <1> 		;---------------------------------------
    15 000010AA 50                  <1> 		push	eax
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		; 割り込み許可設定
    19                              <1> 		;---------------------------------------
    20                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    20 000010AB B00B                <2>  mov al, %2
    20 000010AD E670                <2>  out %1, al
    21                              <1> 
    22 000010AF E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
    23 000010B1 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
    24                              <1> 
    25 000010B4 E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの復帰】
    29                              <1> 		;---------------------------------------
    30 000010B6 58                  <1> 		pop		eax
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 【スタックフレームの破棄】
    34                              <1> 		;---------------------------------------
    35 000010B7 89EC                <1> 		mov		esp, ebp
    36 000010B9 5D                  <1> 		pop		ebp
    37                              <1> 
    38 000010BA C3                  <1> 		ret 
    39                              <1> 
    40                              <1> int_rtc:
    41 000010BB 60                  <1>         pusha
    42 000010BC 1E                  <1>         push    ds
    43 000010BD 06                  <1>         push    es
    44                              <1> 
    45 000010BE 66B81000            <1>         mov     ax, 0x0010      ; データ用セグメントセレクタの設定
    46 000010C2 8ED8                <1>         mov     ds, ax
    47 000010C4 8EC0                <1>         mov     es, ax
    48                              <1> 
    49 000010C6 68[20020000]E846FD- <1>         cdecl   rtc_get_time, RTC_TIME      ; get_time
    49 000010CE FFFF6683C404        <1>
    50                              <1> 
    51                              <1>         outp    0x70, 0x0C      
    51 000010D4 B00C                <2>  mov al, %2
    51 000010D6 E670                <2>  out %1, al
    52 000010D8 E471                <1>         in      al, 0x71
    53                              <1> 
    54                              <1> 		;---------------------------------------
    55                              <1> 		; 割り込みフラグをクリア(EOI)
    56                              <1> 		;---------------------------------------
    57                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    57 000010DA B020                <2>  mov al, %2
    57 000010DC E6A0                <2>  out %1, al
    58                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    58 000010DE B020                <2>  mov al, %2
    58 000010E0 E620                <2>  out %1, al
    59                              <1> 
    60                              <1>         		;---------------------------------------
    61                              <1> 		; 【レジスタの復帰】
    62                              <1> 		;---------------------------------------
    63 000010E2 07                  <1> 		pop		es								; 
    64 000010E3 1F                  <1> 		pop		ds								; 
    65 000010E4 61                  <1> 		popa									; 
    66                              <1> 
    67 000010E5 CF                  <1> 		iret									; 割り込み処理の終了
   165                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込み処理：キーボード
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
     5                              <1> ;	専用のリングバッファに保存する。
     6                              <1> ;************************************************************************
     7                              <1> int_keyboard:
     8                              <1> 		;---------------------------------------
     9                              <1> 		; 【レジスタの保存】
    10                              <1> 		;---------------------------------------
    11 000010E6 60                  <1> 		pusha
    12 000010E7 1E                  <1> 		push	ds
    13 000010E8 06                  <1> 		push	es
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; データ用セグメントの設定
    17                              <1> 		;---------------------------------------
    18 000010E9 66B81000            <1> 		mov		ax, 0x0010						; 
    19 000010ED 8ED8                <1> 		mov		ds, ax							; 
    20 000010EF 8EC0                <1> 		mov		es, ax							; 
    21                              <1> 
    22                              <1> 		;---------------------------------------
    23                              <1> 		; KBCのバッファ読み取り
    24                              <1> 		;---------------------------------------
    25 000010F1 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; キーコードの保存
    29                              <1> 		;---------------------------------------
    30 000010F3 5068[0C110000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
    30 000010FB 0000006683C408      <1>
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 割り込み終了コマンド送信
    34                              <1> 		;---------------------------------------
    35                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    35 00001102 B020                <2>  mov al, %2
    35 00001104 E620                <2>  out %1, al
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 【レジスタの復帰】
    39                              <1> 		;---------------------------------------
    40 00001106 07                  <1> 		pop		es								; 
    41 00001107 1F                  <1> 		pop		ds								; 
    42 00001108 61                  <1> 		popa
    43                              <1> 
    44 00001109 CF                  <1> 		iret									; 割り込みからの復帰
    45                              <1> 
    46 0000110A 00<rept>            <1> ALIGN 4, db 0
    47 0000110C 00<rept>            <1> _KEY_BUFF:	times ring_buff_size db 0
    48                              <1> 
   166                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	リングバッファからデータを取得
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD ring_rd(buff, data);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	buff	: リングバッファ
     8                              <1> ;	data	: 読み込んだデータの保存先アドレス
     9                              <1> ;
    10                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
    11                              <1> ;************************************************************************
    12                              <1> ring_rd:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												;    +12| リングデータ
    18                              <1> 												;    + 8| データアドレス
    19                              <1> 												; ------|--------
    20                              <1> 												;    + 4| EIP（戻り番地）
    21 00001124 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    22 00001125 89E5                <1> 		mov		ebp, esp						; ------+--------
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 【レジスタの保存】
    26                              <1> 		;---------------------------------------
    27 00001127 53                  <1> 		push	ebx
    28 00001128 56                  <1> 		push	esi
    29 00001129 57                  <1> 		push	edi
    30                              <1> 
    31                              <1> 		;---------------------------------------
    32                              <1> 		; 引数を取得
    33                              <1> 		;---------------------------------------
    34 0000112A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
    35 0000112D 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 読み込み位置を確認
    39                              <1> 		;---------------------------------------
    40 00001130 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
    41 00001135 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
    42 00001137 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
    43 0000113A 7411                <1> 		je		.10E							; {
    44                              <1> 												;   
    45 0000113C 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
    46                              <1> 												;   
    47 00001140 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
    48                              <1> 												;   
    49 00001142 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
    50 00001143 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
    51 00001146 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
    52                              <1> 												;   
    53 00001148 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
    54                              <1> .10E:											; }
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; 【レジスタの復帰】
    58                              <1> 		;---------------------------------------
    59 0000114D 5F                  <1> 		pop		edi
    60 0000114E 5E                  <1> 		pop		esi
    61 0000114F 5B                  <1> 		pop		ebx
    62                              <1> 
    63                              <1> 		;---------------------------------------
    64                              <1> 		; 【スタックフレームの破棄】
    65                              <1> 		;---------------------------------------
    66 00001150 89EC                <1> 		mov		esp, ebp
    67 00001152 5D                  <1> 		pop		ebp
    68                              <1> 
    69 00001153 C3                  <1> 		ret
    70                              <1> 
    71                              <1> ;************************************************************************
    72                              <1> ;	リングバッファにデータを格納
    73                              <1> ;========================================================================
    74                              <1> ;■書式		: DWORD ring_wr(buff, data);
    75                              <1> ;
    76                              <1> ;■引数
    77                              <1> ;	buff	: リングバッファ
    78                              <1> ;	data	: 書き込むデータ
    79                              <1> ;
    80                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    81                              <1> ;************************************************************************
    82                              <1> ring_wr:
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの構築】
    85                              <1> 		;---------------------------------------
    86                              <1> 												; ------|--------
    87                              <1> 												;    +12| リングデータ
    88                              <1> 												;    + 8| データ
    89                              <1> 												; ------|--------
    90                              <1> 												;    + 4| EIP（戻り番地）
    91 00001154 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    92 00001155 89E5                <1> 		mov		ebp, esp						; ------+--------
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 【レジスタの保存】
    96                              <1> 		;---------------------------------------
    97 00001157 53                  <1> 		push	ebx
    98 00001158 51                  <1> 		push	ecx
    99 00001159 56                  <1> 		push	esi
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 引数を取得
   103                              <1> 		;---------------------------------------
   104 0000115A 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   105                              <1> 
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 書き込み位置を確認
   108                              <1> 		;---------------------------------------
   109 0000115D B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   110 00001162 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   111 00001165 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   112 00001167 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   113 00001168 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   114                              <1> 												; 
   115 0000116B 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   116 0000116D 740F                <1> 		je		.10E							; {
   117                              <1> 												; 
   118 0000116F 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   119                              <1> 												; 
   120 00001172 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   121 00001176 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   122 00001179 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   123                              <1> .10E:											; }
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの復帰】
   127                              <1> 		;---------------------------------------
   128 0000117E 5E                  <1> 		pop		esi
   129 0000117F 59                  <1> 		pop		ecx
   130 00001180 5B                  <1> 		pop		ebx
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【スタックフレームの破棄】
   134                              <1> 		;---------------------------------------
   135 00001181 89EC                <1> 		mov		esp, ebp
   136 00001183 5D                  <1> 		pop		ebp
   137                              <1> 
   138 00001184 C3                  <1> 		ret
   139                              <1> 
   140                              <1> ;************************************************************************
   141                              <1> ;	リングバッファ内要素の表示
   142                              <1> ;========================================================================
   143                              <1> ;■書式		: void ring_show(col, row, buff);
   144                              <1> ;
   145                              <1> ;■引数
   146                              <1> ;	col		: 列
   147                              <1> ;	row		: 行
   148                              <1> ;	buff	: リングバッファ
   149                              <1> ;
   150                              <1> ;■戻り値	: 無し
   151                              <1> ;************************************************************************
   152                              <1> draw_key:
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【スタックフレームの構築】
   155                              <1> 		;---------------------------------------
   156                              <1> 												; ------|--------
   157                              <1> 												; EBP+16| リングバッファ
   158                              <1> 												; EBP+12| Y（行）
   159                              <1> 												; EBP+ 8| X（列）
   160                              <1> 												; ------|--------
   161 00001185 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   162 00001186 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   163                              <1> 												; ------|--------
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 【レジスタの保存】
   167                              <1> 		;---------------------------------------
   168 00001188 60                  <1> 		pusha
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 引数を取得
   172                              <1> 		;---------------------------------------
   173 00001189 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   174 0000118C 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   175 0000118F 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; リングバッファの情報を取得
   179                              <1> 		;---------------------------------------
   180 00001192 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   181 00001194 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   182 00001197 B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 文字に変換しながら表示
   186                              <1> 		;---------------------------------------
   187                              <1> .10L:											; do
   188                              <1> 												; {
   189 0000119C 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   190 0000119D 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   191 000011A0 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   192                              <1> 												;   
   193 000011A3 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   193 000011AA [D4110000]50E8D9FB- <1>
   193 000011B2 FFFF6683C414        <1>
   194 000011B8 68[D4110000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   194 000011C0 52E81FF9FFFF6683C4- <1>
   194 000011C9 10                  <1>
   195                              <1> 												;   
   196 000011CA 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   197                              <1> 												;   
   198 000011CD E2CD                <1> 		loop	.10L							;   
   199                              <1> .10E:											; } while (ECX--);
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの復帰】
   203                              <1> 		;---------------------------------------
   204 000011CF 61                  <1> 		popa
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの破棄】
   208                              <1> 		;---------------------------------------
   209 000011D0 89EC                <1> 		mov		esp, ebp
   210 000011D2 5D                  <1> 		pop		ebp
   211                              <1> 
   212 000011D3 C3                  <1> 		ret
   213                              <1> 
   214 000011D4 2D2D2000            <1> .tmp	db "-- ", 0
   215                              <1> 
   167                                  %include	"../modules/protect/timer.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	タイマーの設定
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	タイマー（カウンタ0）割り込み許可
     5                              <1> ;========================================================================
     6                              <1> ;■書式		: void int_en_timer0(void);
     7                              <1> ;
     8                              <1> ;■引数		: 無し
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> int_en_timer0:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 000011D8 50                  <1> 		push	eax
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;	8254 Timer
    20                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
    21                              <1> 		;---------------------------------------
    22                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    22 000011D9 B034                <2>  mov al, %2
    22 000011DB E643                <2>  out %1, al
    23                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    23 000011DD B09C                <2>  mov al, %2
    23 000011DF E640                <2>  out %1, al
    24                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    24 000011E1 B02E                <2>  mov al, %2
    24 000011E3 E640                <2>  out %1, al
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; 【レジスタの復帰】
    28                              <1> 		;---------------------------------------
    29 000011E5 58                  <1> 		pop		eax
    30                              <1> 
    31 000011E6 C3                  <1> 		ret
    32                              <1> 
   168                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	画面左下に、回転する棒を表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rotation_bar(void);
     5                              <1> ;
     6                              <1> ;■引数		: 無し
     7                              <1> ;
     8                              <1> ;■戻り値	: 無し
     9                              <1> ;************************************************************************
    10                              <1> draw_rotation_bar:
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 【レジスタの保存】
    13                              <1> 		;---------------------------------------
    14 000011E7 50                  <1> 		push	eax
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; タイマー割り込みカウンタを確認
    18                              <1> 		;---------------------------------------
    19 000011E8 A1[70060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
    20 000011ED C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
    21 000011F0 3B05[18120000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
    22 000011F6 741E                <1> 		je		.10E							; {
    23                              <1> 												;   
    24 000011F8 A3[18120000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
    25 000011FD 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
    26                              <1> 												;   
    27 00001200 8A80[1C120000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
    28 00001206 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
    28 0000120F F7FFFF6683C410      <1>
    29                              <1> 												;   
    30                              <1> .10E:											; }
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 【レジスタの復帰】
    34                              <1> 		;---------------------------------------
    35 00001216 58                  <1> 		pop		eax
    36                              <1> 
    37 00001217 C3                  <1> 		ret
    38                              <1> 
    39                              <1> ALIGN 4, db 0
    40 00001218 00000000            <1> .index:		dd 0								; 前回値
    41 0000121C 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   169                                  %include	"../modules/protect/call_gate.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	コールゲート関数
     3                              <1> ;************************************************************************
     4                              <1> call_gate:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【スタックフレームの構築】
     7                              <1> 		;---------------------------------------
     8                              <1> 												; ------|--------
     9                              <1> 												; EBP+12| X（列）
    10                              <1> 												; EBP+16| Y（行）
    11                              <1> 												; EBP+20| 色
    12                              <1> 												; EBP+24| 文字
    13                              <1> 												; ---------------
    14                              <1> 												; EBP+ 8| CS（コードセグメント）
    15 00001220 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    16 00001221 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    17                              <1> 												; ---------------
    18                              <1> 		;---------------------------------------
    19                              <1> 		; 【レジスタの保存】
    20                              <1> 		;---------------------------------------
    21 00001223 60                  <1> 		pusha
    22 00001224 1E                  <1> 		push	ds
    23 00001225 06                  <1> 		push	es
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; データ用セグメントの設定
    27                              <1> 		;---------------------------------------
    28 00001226 66B81000            <1> 		mov		ax, 0x0010						; 
    29 0000122A 8ED8                <1> 		mov		ds, ax							; 
    30 0000122C 8EC0                <1> 		mov		es, ax							; 
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 文字を表示
    34                              <1> 		;---------------------------------------
    35 0000122E 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
    36 00001231 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
    37 00001234 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
    38 00001237 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
    39 0000123A 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
    39 00001243 6683C410            <1>
    40                              <1> 
    41                              <1> 		;---------------------------------------
    42                              <1> 		; 【レジスタの復帰】
    43                              <1> 		;---------------------------------------
    44 00001247 07                  <1> 		pop		es								; 
    45 00001248 1F                  <1> 		pop		ds								; 
    46 00001249 61                  <1> 		popa									; 
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 【スタックフレームの破棄】
    50                              <1> 		;---------------------------------------
    51 0000124A 89EC                <1> 		mov		esp, ebp
    52 0000124C 5D                  <1> 		pop		ebp
    53                              <1> 
    54 0000124D CA1000              <1> 		retf	4 * 4
    55                              <1> 
   170                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	システムコール：1文字出力
     3                              <1> ;************************************************************************
     4                              <1> trap_gate_81:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 1文字出力
     7                              <1> 		;---------------------------------------
     8 00001250 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
     8 00001259 6683C410            <1>
     9                              <1> 
    10 0000125D CF                  <1> 		iret
    11                              <1> 
    12                              <1> ;************************************************************************
    13                              <1> ;	システムコール：点の描画
    14                              <1> ;************************************************************************
    15                              <1> trap_gate_82:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 点の描画
    18                              <1> 		;---------------------------------------
    19 0000125E 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
    19 00001267 83C40C              <1>
    20                              <1> 
    21 0000126A CF                  <1> 		iret
    22                              <1> 
   171                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void test_and_set(local);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	local	: ローカル変数のアドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> test_and_set:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| ローカル変数のアドレス
    16                              <1> 												; ------+----------------
    17 0000126B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 0000126C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 0000126E 50                  <1> 		push	eax
    25 0000126F 53                  <1> 		push	ebx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; テストアンドセット
    29                              <1> 		;---------------------------------------
    30 00001270 B800000000          <1> 		mov		eax, 0							; local  = 0;
    31 00001275 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
    32                              <1> 
    33                              <1> .10L:											; for ( ; ; )
    34                              <1> 												; {
    35 00001278 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
    36 0000127C 7307                <1> 		jnc		.10E							;   if (0 == CF)
    37                              <1> 												;     break;
    38                              <1> 												;   
    39                              <1> .12L:											;   for ( ; ; )
    40                              <1> 												;   {
    41 0000127E 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
    42 00001281 72FB                <1> 		jc		.12L							;     if (0 == CF)
    43                              <1> 												;       break;
    44 00001283 EBF3                <1> 		jmp		.10L							;   }
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 00001285 5B                  <1> 		pop		ebx
    51 00001286 58                  <1> 		pop		eax
    52                              <1> 
    53                              <1> 		;---------------------------------------
    54                              <1> 		; 【スタックフレームの破棄】
    55                              <1> 		;---------------------------------------
    56 00001287 89EC                <1> 		mov		esp, ebp
    57 00001289 5D                  <1> 		pop		ebp
    58                              <1> 
    59 0000128A C3                  <1> 		ret
   172                                  %include	"../modules/protect/int_nm.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
     3                              <1> ;************************************************************************
     4                              <1> int_nm:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【レジスタの保存】
     7                              <1> 		;---------------------------------------
     8 0000128B 60                  <1> 		pusha
     9 0000128C 1E                  <1> 		push	ds
    10 0000128D 06                  <1> 		push	es
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; カーネル用セレクタを設定
    14                              <1> 		;---------------------------------------
    15 0000128E 66B81000            <1> 		mov		ax, DS_KERNEL					;
    16 00001292 8ED8                <1> 		mov		ds, ax							;
    17 00001294 8EC0                <1> 		mov		es, ax							;
    18                              <1> 
    19                              <1> 		;---------------------------------------
    20                              <1> 		; タスクスイッチフラグをクリア
    21                              <1> 		;---------------------------------------
    22 00001296 0F06                <1> 		clts									; CR0.TS = 0;
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 前回/今回FPUを使用するタスク
    26                              <1> 		;---------------------------------------
    27 00001298 8B3D[E4120000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
    28 0000129E 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
    29 000012A1 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
    30                              <1> 
    31                              <1> 		;---------------------------------------
    32                              <1> 		; FPUの初回利用をチェック
    33                              <1> 		;---------------------------------------
    34 000012A4 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
    35 000012A7 7420                <1> 		je		.10F							; {
    36                              <1> 												;   
    37 000012A9 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
    38 000012AB 741A                <1> 		je		.12E							;   {
    39                              <1> 												;     
    40 000012AD FA                  <1> 		cli										;     // 割り込み禁止
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 前回のFPUコンテキストを保存
    44                              <1> 		;---------------------------------------
    45 000012AE 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
    46 000012B0 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
    47 000012B5 E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
    48                              <1> 
    49                              <1> 		;---------------------------------------
    50                              <1> 		; 今回のFPUコンテキストを復帰
    51                              <1> 		;---------------------------------------
    52 000012BA 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
    53 000012BC E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
    54 000012C1 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
    55                              <1> 												;     
    56 000012C6 FB                  <1> 		sti										;     // 割り込み許可
    57                              <1> .12E:											;   }
    58 000012C7 EB0E                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61                              <1> 												;   
    62 000012C9 FA                  <1> 		cli										;   // 割り込み禁止
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 今回のFPUコンテキストを復帰
    66                              <1> 		;---------------------------------------
    67 000012CA 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
    68 000012CC E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
    69 000012D1 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
    70                              <1> 												;   
    71 000012D6 FB                  <1> 		sti										;   // 割り込み許可
    72                              <1> .10E:											; }
    73                              <1> 												; 
    74 000012D7 8935[E4120000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 【レジスタの復帰】
    78                              <1> 		;---------------------------------------
    79 000012DD 07                  <1> 		pop		es
    80 000012DE 1F                  <1> 		pop		ds
    81 000012DF 61                  <1> 		popa
    82                              <1> 
    83 000012E0 CF                  <1> 		iret
    84                              <1> 
    85 000012E1 00<rept>            <1> ALIGN 4, db 0
    86 000012E4 00000000            <1> .last_tss:	dd		0
    87                              <1> 
    88                              <1> ;************************************************************************
    89                              <1> ; GDTのセレクタのベースアドレスを取得
    90                              <1> ;------------------------------------------------------------------[IN]--
    91                              <1> ;	EBX : セレクタ
    92                              <1> ;-----------------------------------------------------------------[OUT]--
    93                              <1> ;	EAX : ベースアドレス
    94                              <1> ;************************************************************************
    95                              <1> get_tss_base:
    96 000012E8 8B83[86050000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
    97 000012EE C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
    98 000012F1 8A83[8B050000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
    99 000012F7 C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   100                              <1> 
   101 000012FA C3                  <1> 		ret
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; FPUのコンテキストを保存
   105                              <1> ;------------------------------------------------------------------[IN]--
   106                              <1> ;	EAX : TSSの先頭アドレス
   107                              <1> ;************************************************************************
   108                              <1> save_fpu_context:
   109 000012FB DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   110 000012FE C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   110 00001307 00                  <1>
   111                              <1> 
   112 00001308 C3                  <1> 		ret
   113                              <1> 
   114                              <1> ;************************************************************************
   115                              <1> ; FPUのコンテキストを復帰
   116                              <1> ;------------------------------------------------------------------[IN]--
   117                              <1> ;	EAX : TSSの先頭アドレス
   118                              <1> ;************************************************************************
   119                              <1> load_fpu_context:
   120 00001309 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   121 00001310 7504                <1> 		jne		.10F							; {
   122 00001312 DBE3                <1> 		fninit									;    // FPUの初期化
   123 00001314 EB03                <1> 		jmp		.10E							; }
   124                              <1> .10F:											; else
   125                              <1> 												; {
   126 00001316 DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   127                              <1> .10E:											; }
   128 00001319 C3                  <1> 		ret
   129                              <1> 
   173                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ウェイト
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
     5                              <1> ;========================================================================
     6                              <1> ;■書式		: void wait_tick(tick);
     7                              <1> ;
     8                              <1> ;■引数
     9                              <1> ;	tick	: システム割り込み回数
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> wait_tick:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ---------------
    18                              <1> 												; EBP+ 8| ウェイト
    19                              <1> 												; ---------------
    20 0000131A 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 0000131B 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ------|--------
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 【レジスタの保存】
    26                              <1> 		;---------------------------------------
    27 0000131D 50                  <1> 		push	eax
    28 0000131E 51                  <1> 		push	ecx
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; ウェイト
    32                              <1> 		;---------------------------------------
    33 0000131F 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
    34 00001322 A1[70060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
    35                              <1> 												; do
    36                              <1> 												; {
    37 00001327 3905[70060000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
    38 0000132D 74F8                <1> 		je		.10L							;     ;
    39 0000132F 40                  <1> 		inc		eax								;   EAX++;
    40 00001330 E2F5                <1> 		loop	.10L							; } while (--ECX);
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; レジスタの復帰
    44                              <1> 		;---------------------------------------
    45 00001332 59                  <1> 		pop		ecx
    46 00001333 58                  <1> 		pop		eax
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; スタックフレームの破棄
    50                              <1> 		;---------------------------------------
    51 00001334 89EC                <1> 		mov		esp, ebp
    52 00001336 5D                  <1> 		pop		ebp
    53                              <1> 
    54 00001337 C3                  <1> 		ret
    55                              <1> 
   174                                  
   175                                  ;************************************************************************
   176                                  ;	パディング
   177                                  ;************************************************************************
   178 00001338 00<rept>                		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   179                                  
