     1                                  ;************************************************************************
     2                                  ;
     3                                  ;	カーネル部
     4                                  ;
     5                                  ;************************************************************************
     6                                  
     7                                  %define	USE_SYSTEM_CALL
     8                                  %define	USE_TEST_AND_SET
     9                                  
    10                                  ;************************************************************************
    11                                  ;	マクロ
    12                                  ;************************************************************************
    13                                  %include	"../include/define.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	メモリイメージ
     3                              <1> ;************************************************************************
     4                              <1> 
     5                              <1> 		;---------------------------------------
     6                              <1> 		;           |            | 
     7                              <1> 		;           |____________| 
     8                              <1> 		; 0000_7A00 |            | ( 512) スタック
     9                              <1> 		;           |____________| 
    10                              <1> 		; 0000_7C00 |            | (  8K) ブート
    11                              <1> 		;           =            = 
    12                              <1> 		;           |____________| 
    13                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    14                              <1> 		;           =            = 
    15                              <1> 		;           |____________| 
    16                              <1> 		; 0000_BC00 |////////////| 
    17                              <1> 		;           =            = 
    18                              <1> 		;           |____________| 
    19                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    24                              <1> 		;           |            | 
    25                              <1> 		;           =            = 
    26                              <1> 		;           |____________| 
    27                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    28                              <1> 		;           |            | （各タスク1K）
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_5000 |            | Dir
    32                              <1> 		;      6000 |____________| Page
    33                              <1> 		; 0010_7000 |            | Dir
    34                              <1> 		;      8000 |____________| Page
    35                              <1> 		; 0010_9000 |////////////| 
    36                              <1> 		;           |            | 
    37                              <1> 
    38                              <1> 		BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    39                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    40                              <1> 
    41                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    42                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    43                              <1> 
    44                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    45                              <1> 
    46                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    47                              <1> 
    48                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    49                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    50                              <1> 
    51                              <1> 		E820_RECORD_SIZE	equ		20
    52                              <1> 
    53                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    54                              <1> 
    55                              <1> 
    56                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    57                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    58                              <1> 
    59                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    60                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    61                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    62                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    63                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    64                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    65                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    66                              <1> 
    67                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    68                              <1> 
    69                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    70                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    71                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    72                              <1> 
    73                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    74                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    75                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    76                              <1> 
    77                              <1> 
    78                              <1> ;************************************************************************
    79                              <1> ;	ディスクイメージ
    80                              <1> ;************************************************************************
    81                              <1> 		;(SECT/SUM)  file img                 
    82                              <1> 		;                       ____________  
    83                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    84                              <1> 		;                      =            = 
    85                              <1> 		;                      |____________| 
    86                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
    87                              <1> 		;                      =            = 
    88                              <1> 		;                      |____________| 
    89                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
    90                              <1> 		;                      |            | 
    91                              <1> 		;                      |            | 
    92                              <1> 		;                      =            = 
    93                              <1> 		;                      |____________| 
    94                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
    95                              <1> 		;                      |            | 
    96                              <1> 		;                      |            | 
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   100                              <1> 		;                      |            | (32セクタ/512エントリ)
   101                              <1> 		;                      =            = 
   102                              <1> 		;                      |____________| 
   103                              <1> 		;(   /576)   0004_8000 |            | データ領域
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |            | 
   107                              <1> 		;                      |____________| 
   108                              <1> 		;(   /640)   0005_0000 |////////////| 
   109                              <1> 		;                      |            | 
   110                              <1> 
   111                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   112                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   113                              <1> 
   114                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   115                              <1> 
   116                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   117                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   118                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   119                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   120                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   121                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   122                              <1> 
   123                              <1> 		; ファイル属性
   124                              <1> 		ATTR_READ_ONLY		equ		0x01
   125                              <1> 		ATTR_HIDDEN			equ		0x02
   126                              <1> 		ATTR_SYSTEM			equ		0x04
   127                              <1> 		ATTR_VOLUME_ID		equ		0x08
   128                              <1> 		ATTR_DIRECTORY		equ		0x10
   129                              <1> 		ATTR_ARCHIVE		equ		0x20
   130                              <1> 
    14                                  %include	"../include/macro.s"
     1                              <1> ;************************************************************************
     2                              <1> ; 関数呼び出し用マクロ
     3                              <1> ;
     4                              <1> ; 使い方：
     5                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
     6                              <1> ;
     7                              <1> ;************************************************************************
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1> 	%rep  %0 - 1
    11                              <1> 		push	%{-1:-1}
    12                              <1> 		%rotate -1
    13                              <1> 	%endrep 
    14                              <1> 	%rotate -1
    15                              <1> 
    16                              <1> 		call	%1
    17                              <1> 
    18                              <1> 	%if 1 < %0
    19                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1> 	%endif
    21                              <1> 
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> ;************************************************************************
    25                              <1> ; 割り込みベクタ設定用
    26                              <1> ;
    27                              <1> ; 使い方：
    28                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    29                              <1> ;
    30                              <1> ;************************************************************************
    31                              <1> %macro  set_vect 1-*.nolist
    32                              <1> 		push	eax
    33                              <1> 		push	edi
    34                              <1> 
    35                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    36                              <1> 		mov		eax, %2
    37                              <1> 
    38                              <1> 	%if 3 == %0
    39                              <1> 		mov		[edi + 4], %3					; フラグ
    40                              <1> 	%endif
    41                              <1> 
    42                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    43                              <1> 		shr		eax, 16							; 
    44                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    45                              <1> 
    46                              <1> 		pop		edi
    47                              <1> 		pop		eax
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ; ポート出力用
    52                              <1> ;
    53                              <1> ; 使い方：
    54                              <1> ;	outp	ポート番号, 出力値
    55                              <1> ;
    56                              <1> ;************************************************************************
    57                              <1> %macro  outp 2
    58                              <1> 		mov		al, %2
    59                              <1> 		out		%1, al
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> ;************************************************************************
    63                              <1> ; ディスクリプタの情報を設定
    64                              <1> ;
    65                              <1> ; 使い方：
    66                              <1> ;	set_desc	ディスクリプタ, ベース
    67                              <1> ;
    68                              <1> ;************************************************************************
    69                              <1> %macro  set_desc 2-* 
    70                              <1> 		push	eax
    71                              <1> 		push	edi
    72                              <1> 
    73                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    74                              <1> 		mov		eax, %2							; ベースアドレス
    75                              <1> 
    76                              <1> 	%if 3 == %0
    77                              <1> 		mov		[edi + 0], %3					; リミット
    78                              <1> 	%endif
    79                              <1> 
    80                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    81                              <1> 		shr		eax, 16							; 
    82                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    83                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    84                              <1> 
    85                              <1> 		pop		edi
    86                              <1> 		pop		eax
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;************************************************************************
    90                              <1> ; ゲートディスクリプタのオフセットを設定
    91                              <1> ;
    92                              <1> ; 使い方：
    93                              <1> ;	set_gate	ディスクリプタ, オフセット
    94                              <1> ;
    95                              <1> ;************************************************************************
    96                              <1> %macro  set_gate 2-* 
    97                              <1> 		push	eax
    98                              <1> 		push	edi
    99                              <1> 
   100                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   101                              <1> 		mov		eax, %2							; ベースアドレス
   102                              <1> 
   103                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   104                              <1> 		shr		eax, 16							; 
   105                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   106                              <1> 
   107                              <1> 		pop		edi
   108                              <1> 		pop		eax
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> ;************************************************************************
   112                              <1> ;	構造体
   113                              <1> ;************************************************************************
   114                              <1> 
   115                              <1> ;-----------------------------------------------
   116                              <1> ;	ドライブパラメータ
   117                              <1> ;-----------------------------------------------
   118                              <1> struc drive
   119 00000000 <res 00000002>      <1> 		.no				resw	1				; ドライブ番号
   120 00000002 <res 00000002>      <1> 		.cyln			resw	1				; C:シリンダ
   121 00000004 <res 00000002>      <1> 		.head			resw	1				; H:ヘッド
   122 00000006 <res 00000002>      <1> 		.sect			resw	1				; S:セクタ
   123                              <1> endstruc
   124                              <1> 
   125                              <1> ;-----------------------------------------------
   126                              <1> ;	リングバッファ
   127                              <1> ;-----------------------------------------------
   128                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   129                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   130                              <1> 
   131                              <1> struc ring_buff
   132 00000000 <res 00000004>      <1> 		.rp				resd	1				; RP:書き込み位置
   133 00000004 <res 00000004>      <1> 		.wp				resd	1				; WP:読み込み位置
   134 00000008 <res 00000010>      <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;-----------------------------------------------
   138                              <1> ;	バラ曲線描画パラメータ
   139                              <1> ;-----------------------------------------------
   140                              <1> struc rose
   141 00000000 <res 00000004>      <1> 		.x0				resd	1				; 左上座標：X0
   142 00000004 <res 00000004>      <1> 		.y0				resd	1				; 左上座標：Y0
   143 00000008 <res 00000004>      <1> 		.x1				resd	1				; 右下座標：X1
   144 0000000C <res 00000004>      <1> 		.y1				resd	1				; 右下座標：Y1
   145                              <1> 
   146 00000010 <res 00000004>      <1> 		.n				resd	1				; 変数：n
   147 00000014 <res 00000004>      <1> 		.d				resd	1				; 変数：d
   148                              <1> 
   149 00000018 <res 00000004>      <1> 		.color_x		resd	1				; 描画色：X軸
   150 0000001C <res 00000004>      <1> 		.color_y		resd	1				; 描画色：Y軸
   151 00000020 <res 00000004>      <1> 		.color_z		resd	1				; 描画色：枠
   152 00000024 <res 00000004>      <1> 		.color_s		resd	1				; 描画色：文字
   153 00000028 <res 00000004>      <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   154 0000002C <res 00000004>      <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   155                              <1> 
   156 00000030 <res 00000010>      <1> 		.title			resb	16				; タイトル
   157                              <1> endstruc
   158                              <1> 
    15                                  
    16                                  		ORG		KERNEL_LOAD						; カーネルのロードアドレス
    17                                  
    18                                  [BITS 32]
    19                                  ;************************************************************************
    20                                  ;	エントリポイント
    21                                  ;************************************************************************
    22                                  kernel:
    23                                  		;---------------------------------------
    24                                  		; フォントアドレスを取得
    25                                  		;---------------------------------------
    26 00000000 BE007E0000              		mov		esi, BOOT_LOAD + SECT_SIZE		; ESI   = 0x7C00 + 512
    27 00000005 0FB706                  		movzx	eax, word [esi + 0]				; EAX   = [ESI + 0] // セグメント
    28 00000008 0FB75E02                		movzx	ebx, word [esi + 2]				; EBX   = [ESI + 2] // オフセット
    29 0000000C C1E004                  		shl		eax, 4							; EAX <<= 4;
    30 0000000F 01D8                    		add		eax, ebx						; EAX  += EBX;
    31 00000011 A3[50020000]            		mov		[FONT_ADR], eax					; FONT_ADR[0] = EAX;
    32                                  
    33                                  		;---------------------------------------
    34                                  		; TSSディスクリプタの設定
    35                                  		;---------------------------------------
    36                                  		set_desc	GDT.tss_0, TSS_0			; // タスク0用TSSの設定
    36 00000016 50                  <1>  push eax
    36 00000017 57                  <1>  push edi
    36                              <1> 
    36 00000018 BF[D8050000]        <1>  mov edi, %1
    36 0000001D B8[58020000]        <1>  mov eax, %2
    36                              <1> 
    36                              <1>  %if 3 == %0
    36                              <1>  mov [edi + 0], %3
    36                              <1>  %endif
    36                              <1> 
    36 00000022 66894702            <1>  mov [edi + 2], ax
    36 00000026 C1E810              <1>  shr eax, 16
    36 00000029 884704              <1>  mov [edi + 4], al
    36 0000002C 886707              <1>  mov [edi + 7], ah
    36                              <1> 
    36 0000002F 5F                  <1>  pop edi
    36 00000030 58                  <1>  pop eax
    37                                  		set_desc	GDT.tss_1, TSS_1			; // タスク1用TSSの設定
    37 00000031 50                  <1>  push eax
    37 00000032 57                  <1>  push edi
    37                              <1> 
    37 00000033 BF[E0050000]        <1>  mov edi, %1
    37 00000038 B8[30030000]        <1>  mov eax, %2
    37                              <1> 
    37                              <1>  %if 3 == %0
    37                              <1>  mov [edi + 0], %3
    37                              <1>  %endif
    37                              <1> 
    37 0000003D 66894702            <1>  mov [edi + 2], ax
    37 00000041 C1E810              <1>  shr eax, 16
    37 00000044 884704              <1>  mov [edi + 4], al
    37 00000047 886707              <1>  mov [edi + 7], ah
    37                              <1> 
    37 0000004A 5F                  <1>  pop edi
    37 0000004B 58                  <1>  pop eax
    38                                  		set_desc	GDT.tss_2, TSS_2			; // タスク2用TSSの設定
    38 0000004C 50                  <1>  push eax
    38 0000004D 57                  <1>  push edi
    38                              <1> 
    38 0000004E BF[E8050000]        <1>  mov edi, %1
    38 00000053 B8[08040000]        <1>  mov eax, %2
    38                              <1> 
    38                              <1>  %if 3 == %0
    38                              <1>  mov [edi + 0], %3
    38                              <1>  %endif
    38                              <1> 
    38 00000058 66894702            <1>  mov [edi + 2], ax
    38 0000005C C1E810              <1>  shr eax, 16
    38 0000005F 884704              <1>  mov [edi + 4], al
    38 00000062 886707              <1>  mov [edi + 7], ah
    38                              <1> 
    38 00000065 5F                  <1>  pop edi
    38 00000066 58                  <1>  pop eax
    39                                  		set_desc	GDT.tss_3, TSS_3			; // タスク3用TSSの設定
    39 00000067 50                  <1>  push eax
    39 00000068 57                  <1>  push edi
    39                              <1> 
    39 00000069 BF[F0050000]        <1>  mov edi, %1
    39 0000006E B8[E0040000]        <1>  mov eax, %2
    39                              <1> 
    39                              <1>  %if 3 == %0
    39                              <1>  mov [edi + 0], %3
    39                              <1>  %endif
    39                              <1> 
    39 00000073 66894702            <1>  mov [edi + 2], ax
    39 00000077 C1E810              <1>  shr eax, 16
    39 0000007A 884704              <1>  mov [edi + 4], al
    39 0000007D 886707              <1>  mov [edi + 7], ah
    39                              <1> 
    39 00000080 5F                  <1>  pop edi
    39 00000081 58                  <1>  pop eax
    40                                  
    41                                  		;---------------------------------------
    42                                  		; コールゲートの設定
    43                                  		;---------------------------------------
    44                                  		set_gate	GDT.call_gate, call_gate	; // コールゲートの設定
    44 00000082 50                  <1>  push eax
    44 00000083 57                  <1>  push edi
    44                              <1> 
    44 00000084 BF[F8050000]        <1>  mov edi, %1
    44 00000089 B8[18130000]        <1>  mov eax, %2
    44                              <1> 
    44 0000008E 668907              <1>  mov [edi + 0], ax
    44 00000091 C1E810              <1>  shr eax, 16
    44 00000094 66894706            <1>  mov [edi + 6], ax
    44                              <1> 
    44 00000098 5F                  <1>  pop edi
    44 00000099 58                  <1>  pop eax
    45                                  
    46                                  		;---------------------------------------
    47                                  		; LDTの設定
    48                                  		;---------------------------------------
    49                                  		set_desc	GDT.ldt, LDT, word LDT_LIMIT
    49 0000009A 50                  <1>  push eax
    49 0000009B 57                  <1>  push edi
    49                              <1> 
    49 0000009C BF[D0050000]        <1>  mov edi, %1
    49 000000A1 B8[06060000]        <1>  mov eax, %2
    49                              <1> 
    49                              <1>  %if 3 == %0
    49 000000A6 66C7074700          <1>  mov [edi + 0], %3
    49                              <1>  %endif
    49                              <1> 
    49 000000AB 66894702            <1>  mov [edi + 2], ax
    49 000000AF C1E810              <1>  shr eax, 16
    49 000000B2 884704              <1>  mov [edi + 4], al
    49 000000B5 886707              <1>  mov [edi + 7], ah
    49                              <1> 
    49 000000B8 5F                  <1>  pop edi
    49 000000B9 58                  <1>  pop eax
    50                                  
    51                                  		;---------------------------------------
    52                                  		; GDTをロード（再設定）
    53                                  		;---------------------------------------
    54 000000BA 0F0115[00060000]        		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
    55                                  
    56                                  		;---------------------------------------
    57                                  		; スタックの設定
    58                                  		;---------------------------------------
    59 000000C1 BC00341000              		mov		esp, SP_TASK_0					; // タスク0用のスタックを設定
    60                                  
    61                                  		;---------------------------------------
    62                                  		; タスクレジスタの初期化
    63                                  		;---------------------------------------
    64 000000C6 66B82000                		mov		ax, SS_TASK_0
    65 000000CA 0F00D8                  		ltr		ax								; // タスクレジスタの設定
    66                                  
    67                                  		;---------------------------------------
    68                                  		; 初期化
    69                                  		;---------------------------------------
    70 000000CD E81C0F0000              		cdecl	init_int						; // 割り込みベクタの初期化
    71 000000D2 E89D100000              		cdecl	init_pic						; // 割り込みコントローラの初期化
    72 000000D7 E872050000              		cdecl	init_page						; // ページングの初期化
    73                                  
    74 000000DC 5057BF00001000B8-       		set_vect	0x00, int_zero_div			; // 割り込み処理の登録：0除算
    74 000000E4 [56110000]668907C1-
    74 000000EC E810668947065F58   
    75 000000F4 5057BF38001000B8-       		set_vect	0x07, int_nm				; // 割り込み処理の登録：デバイス使用不可
    75 000000FC [83130000]668907C1-
    75 00000104 E810668947065F58   
    76 0000010C 5057BF70001000B8-       		set_vect	0x0E, int_pf				; // 割り込み処理の登録：ページフォルト
    76 00000114 [FC060000]668907C1-
    76 0000011C E810668947065F58   
    77 00000124 5057BF00011000B8-       		set_vect	0x20, int_timer				; // 割り込み処理の登録：タイマー
    77 0000012C [A4060000]668907C1-
    77 00000134 E810668947065F58   
    78 0000013C 5057BF08011000B8-       		set_vect	0x21, int_keyboard			; // 割り込み処理の登録：KBC
    78 00000144 [DE110000]668907C1-
    78 0000014C E810668947065F58   
    79 00000154 5057BF40011000B8-       		set_vect	0x28, int_rtc				; // 割り込み処理の登録：RTC
    79 0000015C [B3110000]668907C1-
    79 00000164 E810668947065F58   
    80 0000016C 5057BF08041000B8-       		set_vect	0x81, trap_gate_81, word 0xEF00	; // トラップゲートの登録：1文字出力
    80 00000174 [48130000]66C74704-
    80 0000017C 00EF668907C1E81066-
    80 00000185 8947065F58         
    81 0000018A 5057BF10041000B8-       		set_vect	0x82, trap_gate_82, word 0xEF00	; // トラップゲートの登録：点の描画
    81 00000192 [56130000]66C74704-
    81 0000019A 00EF668907C1E81066-
    81 000001A3 8947065F58         
    82                                  
    83                                  		;---------------------------------------
    84                                  		; デバイスの割り込み許可
    85                                  		;---------------------------------------
    86 000001A8 6A10E8F00F00006683-     		cdecl	rtc_int_en, 0x10				; rtc_int_en(UIE); // 更新サイクル終了割り込み許可
    86 000001B1 C404               
    87 000001B3 E818110000              		cdecl	int_en_timer0					; // タイマー（カウンタ0）割り込み許可
    88                                  
    89                                  		;---------------------------------------
    90                                  		; IMR(割り込みマスクレジスタ)の設定
    91                                  		;---------------------------------------
    92                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
    92 000001B8 B0F8                <1>  mov al, %2
    92 000001BA E621                <1>  out %1, al
    93                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
    93 000001BC B0FE                <1>  mov al, %2
    93 000001BE E6A1                <1>  out %1, al
    94                                  
    95                                  		;---------------------------------------
    96                                  		; ページングを有効化
    97                                  		;---------------------------------------
    98 000001C0 B800501000              		mov		eax, CR3_BASE					;
    99 000001C5 0F22D8                  		mov		cr3, eax						; // ページテーブルの登録
   100                                  
   101 000001C8 0F20C0                  		mov		eax, cr0						; // PGビットをセット
   102 000001CB 0D00000080              		or		eax, (1 << 31)					; CR0 |= PG;
   103 000001D0 0F22C0                  		mov		cr0, eax						; 
   104 000001D3 EB00                    		jmp		$ + 2							; FLUSH();
   105                                  
   106                                  		;---------------------------------------
   107                                  		; CPUの割り込み許可
   108                                  		;---------------------------------------
   109 000001D5 FB                      		sti										; // 割り込み許可
   110                                  
   111                                  		;---------------------------------------
   112                                  		; フォントの一覧表示
   113                                  		;---------------------------------------
   114 000001D6 6A0D6A3FE8B9090000-     		cdecl	draw_font, 63, 13				; // フォントの一覧表示
   114 000001DF 6683C408           
   115 000001E3 6A046A3FE82F0A0000-     		cdecl	draw_color_bar, 63, 4			; // カラーバーの表示
   115 000001EC 6683C408           
   116                                  
   117                                  		;---------------------------------------
   118                                  		; 文字列の表示
   119                                  		;---------------------------------------
   120 000001F0 68[38020000]680F01-     		cdecl	draw_str, 25, 14, 0x010F, .s0	; draw_str();
   120 000001F8 00006A0E6A19E8DA09-
   120 00000201 00006683C410       
   121                                  
   122                                  .10L:											; while (;;)
   123                                  												; {
   124                                  		;---------------------------------------
   125                                  		; 回転する棒を表示
   126                                  		;---------------------------------------
   127 00000207 E8D3100000              		cdecl	draw_rotation_bar				;   // 回転する棒を表示
   128                                  
   129                                  		;---------------------------------------
   130                                  		; キーコードの取得
   131                                  		;---------------------------------------
   132 0000020C 68[4C020000]68-         		cdecl	ring_rd, _KEY_BUFF, .int_key	;   EAX = ring_rd(buff, &int_key);
   132 00000212 [04120000]E8011000-
   132 0000021A 006683C408         
   133 0000021F 83F800                  		cmp		eax, 0							;   if (EAX == 0)
   134 00000222 7412                    		je		.10E							;   {
   135                                  												;   
   136                                  		;---------------------------------------
   137                                  		; キーコードの表示
   138                                  		;---------------------------------------
   139 00000224 68[04120000]6A1D6A-     		cdecl	draw_key, 2, 29, _KEY_BUFF		;     ring_show(key_buff); // 全要素を表示
   139 0000022C 02E84B1000006683C4-
   139 00000235 0C                 
   140                                  .10E:											;   }
   141 00000236 EBCF                    		jmp		.10L							; }
   142                                  
   143 00000238 2048656C6C6F2C206B-     .s0:	db	" Hello, kernel! ", 0
   143 00000241 65726E656C212000   
   144                                  
   145 00000249 00<rept>                ALIGN 4, db 0
   146 0000024C 00000000                .int_key:	dd	0
   147                                  
   148                                  ALIGN 4, db 0
   149 00000250 00000000                FONT_ADR:	dd	0
   150 00000254 00000000                RTC_TIME:	dd	0
   151                                  
   152                                  ;************************************************************************
   153                                  ;	タスク
   154                                  ;************************************************************************
   155                                  %include	"descriptor.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TSS
     3                              <1> ;************************************************************************
     4                              <1> TSS_0:
     5 00000258 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
     6 0000025C 00321000            <1> .esp0:			dd	SP_TASK_0 - 512				;*  4:ESP0
     7 00000260 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
     8 00000264 00000000            <1> .esp1:			dd	0							;* 12:ESP1
     9 00000268 00000000            <1> .ss1:			dd	0							;* 16:
    10 0000026C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    11 00000270 00000000            <1> .ss2:			dd	0							;* 24:
    12 00000274 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
    13 00000278 00000000            <1> .eip:			dd	0							;  32:EIP
    14 0000027C 00000000            <1> .eflags:		dd	0							;  36:EFLAGS
    15 00000280 00000000            <1> .eax:			dd	0							;  40:EAX
    16 00000284 00000000            <1> .ecx:			dd	0							;  44:ECX
    17 00000288 00000000            <1> .edx:			dd	0							;  48:EDX
    18 0000028C 00000000            <1> .ebx:			dd	0							;  52:EBX
    19 00000290 00000000            <1> .esp:			dd	0							;  56:ESP
    20 00000294 00000000            <1> .ebp:			dd	0							;  60:EBP
    21 00000298 00000000            <1> .esi:			dd	0							;  64:ESI
    22 0000029C 00000000            <1> .edi:			dd	0							;  68:EDI
    23 000002A0 00000000            <1> .es:			dd	0							;  72:ES
    24 000002A4 00000000            <1> .cs:			dd	0							;  76:CS
    25 000002A8 00000000            <1> .ss:			dd	0							;  80:SS
    26 000002AC 00000000            <1> .ds:			dd	0							;  84:DS
    27 000002B0 00000000            <1> .fs:			dd	0							;  88:FS
    28 000002B4 00000000            <1> .gs:			dd	0							;  92:GS
    29 000002B8 00000000            <1> .ldt:			dd	0							;* 96:LDTセグメントセレクタ
    30 000002BC 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    31 000002C0 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    32                              <1> 
    33                              <1> TSS_1:
    34 00000330 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    35 00000334 00361000            <1> .esp0:			dd	SP_TASK_1 - 512				;*  4:ESP0
    36 00000338 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    37 0000033C 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    38 00000340 00000000            <1> .ss1:			dd	0							;* 16:
    39 00000344 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    40 00000348 00000000            <1> .ss2:			dd	0							;* 24:
    41 0000034C 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
    42 00000350 [6A070000]          <1> .eip:			dd	task_1						;  32:EIP
    43 00000354 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
    44 00000358 00000000            <1> .eax:			dd	0							;  40:EAX
    45 0000035C 00000000            <1> .ecx:			dd	0							;  44:ECX
    46 00000360 00000000            <1> .edx:			dd	0							;  48:EDX
    47 00000364 00000000            <1> .ebx:			dd	0							;  52:EBX
    48 00000368 00381000            <1> .esp:			dd	SP_TASK_1					;  56:ESP
    49 0000036C 00000000            <1> .ebp:			dd	0							;  60:EBP
    50 00000370 00000000            <1> .esi:			dd	0							;  64:ESI
    51 00000374 00000000            <1> .edi:			dd	0							;  68:EDI
    52 00000378 27000000            <1> .es:			dd	DS_TASK_1					;  72:ES
    53 0000037C 1F000000            <1> .cs:			dd	CS_TASK_1					;  76:CS
    54 00000380 27000000            <1> .ss:			dd	DS_TASK_1					;  80:SS
    55 00000384 27000000            <1> .ds:			dd	DS_TASK_1					;  84:DS
    56 00000388 27000000            <1> .fs:			dd	DS_TASK_1					;  88:FS
    57 0000038C 27000000            <1> .gs:			dd	DS_TASK_1					;  92:GS
    58 00000390 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
    59 00000394 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    60 00000398 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    61                              <1> 
    62                              <1> TSS_2:
    63 00000408 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    64 0000040C 003A1000            <1> .esp0:			dd	SP_TASK_2 - 512				;*  4:ESP0
    65 00000410 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    66 00000414 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    67 00000418 00000000            <1> .ss1:			dd	0							;* 16:
    68 0000041C 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    69 00000420 00000000            <1> .ss2:			dd	0							;* 24:
    70 00000424 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
    71 00000428 [9F070000]          <1> .eip:			dd	task_2						;  32:EIP
    72 0000042C 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
    73 00000430 00000000            <1> .eax:			dd	0							;  40:EAX
    74 00000434 00000000            <1> .ecx:			dd	0							;  44:ECX
    75 00000438 00000000            <1> .edx:			dd	0							;  48:EDX
    76 0000043C 00000000            <1> .ebx:			dd	0							;  52:EBX
    77 00000440 003C1000            <1> .esp:			dd	SP_TASK_2					;  56:ESP
    78 00000444 00000000            <1> .ebp:			dd	0							;  60:EBP
    79 00000448 00000000            <1> .esi:			dd	0							;  64:ESI
    80 0000044C 00000000            <1> .edi:			dd	0							;  68:EDI
    81 00000450 37000000            <1> .es:			dd	DS_TASK_2					;  72:ES
    82 00000454 2F000000            <1> .cs:			dd	CS_TASK_2					;  76:CS
    83 00000458 37000000            <1> .ss:			dd	DS_TASK_2					;  80:SS
    84 0000045C 37000000            <1> .ds:			dd	DS_TASK_2					;  84:DS
    85 00000460 37000000            <1> .fs:			dd	DS_TASK_2					;  88:FS
    86 00000464 37000000            <1> .gs:			dd	DS_TASK_2					;  92:GS
    87 00000468 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
    88 0000046C 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
    89 00000470 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
    90                              <1> 
    91                              <1> TSS_3:
    92 000004E0 00000000            <1> .link:			dd	0							;   0:前のタスクへのリンク
    93 000004E4 003E1000            <1> .esp0:			dd	SP_TASK_3 - 512				;*  4:ESP0
    94 000004E8 10000000            <1> .ss0:			dd	DS_KERNEL					;*  8:
    95 000004EC 00000000            <1> .esp1:			dd	0							;* 12:ESP1
    96 000004F0 00000000            <1> .ss1:			dd	0							;* 16:
    97 000004F4 00000000            <1> .esp2:			dd	0							;* 20:ESP2
    98 000004F8 00000000            <1> .ss2:			dd	0							;* 24:
    99 000004FC 00501000            <1> .cr3:			dd	CR3_BASE					;  28:CR3(PDBR)
   100 00000500 [7C080000]          <1> .eip:			dd	task_3						;  32:EIP
   101 00000504 02020000            <1> .eflags:		dd	0x0202						;  36:EFLAGS
   102 00000508 00000000            <1> .eax:			dd	0							;  40:EAX
   103 0000050C 00000000            <1> .ecx:			dd	0							;  44:ECX
   104 00000510 00000000            <1> .edx:			dd	0							;  48:EDX
   105 00000514 00000000            <1> .ebx:			dd	0							;  52:EBX
   106 00000518 00401000            <1> .esp:			dd	SP_TASK_3					;  56:ESP
   107 0000051C 00000000            <1> .ebp:			dd	0							;  60:EBP
   108 00000520 00000000            <1> .esi:			dd	0							;  64:ESI
   109 00000524 00000000            <1> .edi:			dd	0							;  68:EDI
   110 00000528 47000000            <1> .es:			dd	DS_TASK_3					;  72:ES
   111 0000052C 3F000000            <1> .cs:			dd	CS_TASK_3					;  76:CS
   112 00000530 47000000            <1> .ss:			dd	DS_TASK_3					;  80:SS
   113 00000534 47000000            <1> .ds:			dd	DS_TASK_3					;  84:DS
   114 00000538 47000000            <1> .fs:			dd	DS_TASK_3					;  88:FS
   115 0000053C 47000000            <1> .gs:			dd	DS_TASK_3					;  92:GS
   116 00000540 18000000            <1> .ldt:			dd	SS_LDT						;* 96:LDTセグメントセレクタ
   117 00000544 00000000            <1> .io:			dd	0							; 100:I/Oマップベースアドレス
   118 00000548 00<rept>            <1> .fp_save:	times 108 + 4 db 0					; FPUコンテキスト保存領域
   119                              <1> 
   120                              <1> 
   121                              <1> ;************************************************************************
   122                              <1> ;	グローバルディスクリプタテーブル
   123                              <1> ;************************************************************************
   124 000005B8 0000000000000000    <1> GDT:			dq	0x0000000000000000			; NULL
   125 000005C0 FFFF0000009ACF00    <1> .cs_kernel:		dq	0x00CF9A000000FFFF			; CODE 4G
   126 000005C8 FFFF00000092CF00    <1> .ds_kernel:		dq	0x00CF92000000FFFF			; DATA 4G
   127 000005D0 0000000000820000    <1> .ldt			dq	0x0000820000000000			; LDTディスクリプタ
   128 000005D8 6700000000890000    <1> .tss_0:			dq	0x0000890000000067			; TSSディスクリプタ
   129 000005E0 6700000000890000    <1> .tss_1:			dq	0x0000890000000067			; TSSディスクリプタ
   130 000005E8 6700000000890000    <1> .tss_2:			dq	0x0000890000000067			; TSSディスクリプタ
   131 000005F0 6700000000890000    <1> .tss_3:			dq	0x0000890000000067			; TSSディスクリプタ
   132 000005F8 0000080004EC0000    <1> .call_gate:		dq	0x0000EC0400080000			; 386コールゲート(DPL=3, count=4, SEL=8)
   133                              <1> .end:
   134                              <1> 
   135                              <1> CS_KERNEL		equ	.cs_kernel	- GDT
   136                              <1> DS_KERNEL		equ	.ds_kernel	- GDT
   137                              <1> SS_LDT			equ	.ldt		- GDT
   138                              <1> SS_TASK_0		equ	.tss_0		- GDT
   139                              <1> SS_TASK_1		equ	.tss_1		- GDT
   140                              <1> SS_TASK_2		equ	.tss_2		- GDT
   141                              <1> SS_TASK_3		equ	.tss_3		- GDT
   142                              <1> SS_GATE_0		equ	.call_gate	- GDT
   143                              <1> 
   144 00000600 4700                <1> GDTR:	dw 		GDT.end - GDT - 1
   145 00000602 [B8050000]          <1> 		dd 		GDT
   146                              <1> 
   147                              <1> 
   148                              <1> ;************************************************************************
   149                              <1> ;	ローカルディスクリプタテーブル
   150                              <1> ;************************************************************************
   151 00000606 0000000000000000    <1> LDT:			dq	0x0000000000000000			; NULL
   152 0000060E FFFF0000009ACF00    <1> .cs_task_0:		dq	0x00CF9A000000FFFF			; CODE 4G
   153 00000616 FFFF00000092CF00    <1> .ds_task_0:		dq	0x00CF92000000FFFF			; DATA 4G
   154 0000061E FFFF000000FACF00    <1> .cs_task_1:		dq	0x00CFFA000000FFFF			; CODE 4G
   155 00000626 FFFF000000F2CF00    <1> .ds_task_1:		dq	0x00CFF2000000FFFF			; DATA 4G
   156 0000062E FFFF000000FACF00    <1> .cs_task_2:		dq	0x00CFFA000000FFFF			; CODE 4G
   157 00000636 FFFF000000F2CF00    <1> .ds_task_2:		dq	0x00CFF2000000FFFF			; DATA 4G
   158 0000063E FFFF000000FACF00    <1> .cs_task_3:		dq	0x00CFFA000000FFFF			; CODE 4G
   159 00000646 FFFF000000F2CF00    <1> .ds_task_3:		dq	0x00CFF2000000FFFF			; DATA 4G
   160                              <1> .end:
   161                              <1> 
   162                              <1> CS_TASK_0		equ	(.cs_task_0 - LDT) | 4		; タスク0用CSセレクタ
   163                              <1> DS_TASK_0		equ	(.ds_task_0 - LDT) | 4		; タスク0用DSセレクタ
   164                              <1> CS_TASK_1		equ	(.cs_task_1 - LDT) | 4 | 3	; タスク1用CSセレクタ
   165                              <1> DS_TASK_1		equ	(.ds_task_1 - LDT) | 4 | 3	; タスク1用DSセレクタ
   166                              <1> CS_TASK_2		equ	(.cs_task_2 - LDT) | 4 | 3	; タスク2用CSセレクタ
   167                              <1> DS_TASK_2		equ	(.ds_task_2 - LDT) | 4 | 3	; タスク2用DSセレクタ
   168                              <1> CS_TASK_3		equ	(.cs_task_3 - LDT) | 4 | 3	; タスク3用CSセレクタ
   169                              <1> DS_TASK_3		equ	(.ds_task_3 - LDT) | 4 | 3	; タスク3用DSセレクタ
   170                              <1> 
   171                              <1> LDT_LIMIT		equ	.end		- LDT - 1
   172                              <1> 
   173                              <1> 
   156                                  %include	"modules/paging.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ページの初期化
     3                              <1> ;
     4                              <1> 		;---------------------------------------
     5                              <1> 		;          |____________| 
     6                              <1> 		; 0010_5000|       (4K) | ディレクトリテーブル
     7                              <1> 		;          =            = 
     8                              <1> 		;          |____________| 
     9                              <1> 		; 0010_6000|       (4K) | ページテーブル
    10                              <1> 		;          =            = 
    11                              <1> 		;          |____________| 
    12                              <1> 		; 0010_7000|       (4K) | ページフォルト用
    13                              <1> 		;          =            = 
    14                              <1> 		;          |____________| 
    15                              <1> 		;          |            | 
    16                              <1> ;
    17                              <1> ;************************************************************************
    18                              <1> init_page:
    19                              <1> 		;---------------------------------------
    20                              <1> 		; 【レジスタの保存】
    21                              <1> 		;---------------------------------------
    22 0000064E 60                  <1> 		pusha
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; ページ変換テーブルの作成
    26                              <1> 		;---------------------------------------
    27 0000064F 6800501000E8100000- <1> 		cdecl	page_set_4m, CR3_BASE			; // ページ変換テーブルの作成：タスク3用
    27 00000658 006683C404          <1>
    28                              <1> 
    29                              <1> 		;---------------------------------------
    30                              <1> 		; ページテーブルの設定（不在）
    31                              <1> 		;---------------------------------------
    32 0000065D C7051C641000000000- <1> 		mov		[0x0010_6000 + 0x107 * 4], dword 0	; // 0x0010_7000をページ不在に設定
    32 00000666 00                  <1>
    33                              <1> 
    34                              <1> 		;---------------------------------------
    35                              <1> 		; 【レジスタの復帰】
    36                              <1> 		;---------------------------------------
    37 00000667 61                  <1> 		popa
    38                              <1> 
    39 00000668 C3                  <1> 		ret
    40                              <1> 
    41                              <1> 
    42                              <1> ;************************************************************************
    43                              <1> ;	
    44                              <1> ;************************************************************************
    45                              <1> page_set_4m:
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 【スタックフレームの構築】
    48                              <1> 		;---------------------------------------
    49                              <1> 												; ------|--------
    50 00000669 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    51 0000066A 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
    52                              <1> 												; ------|--------
    53                              <1> 												;    + 8| ページテーブル作成位置
    54                              <1> 												; ------|--------
    55                              <1> 		;---------------------------------------
    56                              <1> 		; 【レジスタの保存】
    57                              <1> 		;---------------------------------------
    58 0000066C 60                  <1> 		pusha
    59                              <1> 
    60                              <1> 		;---------------------------------------
    61                              <1> 		; ページディレクトリの作成(P=0)
    62                              <1> 		;---------------------------------------
    63 0000066D FC                  <1> 		cld										; // DFクリア（+方向）
    64 0000066E 8B7D08              <1> 		mov		edi, [ebp + 8]					; EDI = ページディレクトリの先頭;
    65 00000671 B800000000          <1> 		mov		eax, 0x00000000					; EAX = 0 ; // P = 0
    66 00000676 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
    67 0000067B F3AB                <1> 		rep stosd								; whlie (count--) *dst++ = 属性;
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 先頭のエントリを設定
    71                              <1> 		;---------------------------------------
    72 0000067D 89F8                <1> 		mov		eax, edi						; EAX  = EDI;   // ページディレクトリの直後
    73 0000067F 2500F0FFFF          <1> 		and		eax, ~0x0000_0FFF				; EAX &= ~0FFF; // 物理アドレスの指定
    74 00000684 83C807              <1> 		or		eax,  7							; EAX |=  7;    // RWの許可
    75 00000687 898700F0FFFF        <1> 		mov		[edi - (1024 * 4)], eax			; // 先頭のエントリを設定
    76                              <1> 
    77                              <1> 		;---------------------------------------
    78                              <1> 		; ページテーブルの設定（リニア）
    79                              <1> 		;---------------------------------------
    80 0000068D B807000000          <1> 		mov		eax, 0x00000007					; // 物理アドレスの指定とRWの許可
    81 00000692 B900040000          <1> 		mov		ecx, 1024						; count = 1024;
    82                              <1> 												; do
    83                              <1> .10L:											; {
    84 00000697 AB                  <1> 		stosd									;   *dst++  = 属性;
    85 00000698 0500100000          <1> 		add		eax, 0x00001000					;    adr   += 0x1000;
    86 0000069D E2F8                <1> 		loop	.10L							; } while (--count);
    87                              <1> 
    88                              <1> 		;---------------------------------------
    89                              <1> 		; 【レジスタの復帰】
    90                              <1> 		;---------------------------------------
    91 0000069F 61                  <1> 		popa
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; 【スタックフレームの破棄】
    95                              <1> 		;---------------------------------------
    96 000006A0 89EC                <1> 		mov		esp, ebp
    97 000006A2 5D                  <1> 		pop		ebp
    98                              <1> 
    99 000006A3 C3                  <1> 		ret
   100                              <1> 
   157                                  %include	"modules/int_timer.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	例外:タイマー
     3                              <1> ;************************************************************************
     4                              <1> int_timer:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【レジスタの保存】
     7                              <1> 		;---------------------------------------
     8 000006A4 60                  <1> 		pusha
     9 000006A5 1E                  <1> 		push	ds
    10 000006A6 06                  <1> 		push	es
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; データ用セグメントの設定
    14                              <1> 		;---------------------------------------
    15 000006A7 66B81000            <1> 		mov		ax, 0x0010						; 
    16 000006AB 8ED8                <1> 		mov		ds, ax							; 
    17 000006AD 8EC0                <1> 		mov		es, ax							; 
    18                              <1> 
    19                              <1> 		;---------------------------------------
    20                              <1> 		; TICK
    21                              <1> 		;---------------------------------------
    22 000006AF FF05[F8060000]      <1> 		inc		dword [TIMER_COUNT]				; TIMER_COUNT++; // 割り込み回数の更新
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 割り込みフラグをクリア(EOI)
    26                              <1> 		;---------------------------------------
    27                              <1> 		outp	0x20, 0x20						; // マスタPIC:EOIコマンド
    27 000006B5 B020                <2>  mov al, %2
    27 000006B7 E620                <2>  out %1, al
    28                              <1> 
    29                              <1> 		;---------------------------------------
    30                              <1> 		; タスクの切り替え
    31                              <1> 		;---------------------------------------
    32 000006B9 660F00C8            <1> 		str		ax								; AX = TR; // 現在のタスクレジスタ
    33 000006BD 6683F820            <1> 		cmp		ax, SS_TASK_0					; case (AX)
    34 000006C1 7415                <1> 		je		.11L							; {
    35 000006C3 6683F828            <1> 		cmp		ax, SS_TASK_1					;   
    36 000006C7 7418                <1> 		je		.12L							;   
    37 000006C9 6683F830            <1> 		cmp		ax, SS_TASK_2					;   
    38 000006CD 741B                <1> 		je		.13L							;   
    39                              <1> 												;   default:
    40 000006CF EA000000002000      <1> 		jmp		SS_TASK_0:0						;     // タスク0に切り替え
    41 000006D6 EB1B                <1> 		jmp		.10E							;     break;
    42                              <1> 												;     
    43                              <1> .11L:											;   case SS_TASK_0:
    44 000006D8 EA000000002800      <1> 		jmp		SS_TASK_1:0						;     // タスク1に切り替え
    45 000006DF EB12                <1> 		jmp		.10E							;     break;
    46                              <1> 												;     
    47                              <1> .12L:											;   case SS_TASK_1:
    48 000006E1 EA000000003000      <1> 		jmp		SS_TASK_2:0						;     // タスク2に切り替え
    49 000006E8 EB09                <1> 		jmp		.10E							;     break;
    50                              <1> 												;     
    51                              <1> .13L:											;   case SS_TASK_2:
    52 000006EA EA000000003800      <1> 		jmp		SS_TASK_3:0						;     // タスク3に切り替え
    53 000006F1 EB00                <1> 		jmp		.10E							;     break;
    54                              <1> .10E:											; }
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; 【レジスタの復帰】
    58                              <1> 		;---------------------------------------
    59 000006F3 07                  <1> 		pop		es								; 
    60 000006F4 1F                  <1> 		pop		ds								; 
    61 000006F5 61                  <1> 		popa
    62                              <1> 
    63 000006F6 CF                  <1> 		iret
    64                              <1> 
    65 000006F7 00                  <1> ALIGN 4, db 0
    66 000006F8 00000000            <1> TIMER_COUNT:	dd	0
    67                              <1> 
   158                                  %include	"modules/int_pf.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	
     3                              <1> ;************************************************************************
     4                              <1> int_pf:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【スタックフレームの構築】
     7                              <1> 		;---------------------------------------
     8                              <1> 												; ------|--------
     9                              <1> 												; EBP+12| エラーコード
    10                              <1> 												; ---------------
    11                              <1> 												; EBP+ 8| EIP（戻り番地）
    12 000006FC 55                  <1> 		push	ebp								; EBP+ 4| CS
    13 000006FD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    14                              <1> 												; ---------------
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 000006FF 60                  <1> 		pusha									; 
    19 00000700 1E                  <1> 		push	ds								; 
    20 00000701 06                  <1> 		push	es								; 
    21                              <1> 
    22                              <1> 		;---------------------------------------
    23                              <1> 		; データ用セグメントの設定
    24                              <1> 		;---------------------------------------
    25 00000702 66B81000            <1> 		mov		ax, 0x0010						; 
    26 00000706 8ED8                <1> 		mov		ds, ax							; 
    27 00000708 8EC0                <1> 		mov		es, ax							; 
    28                              <1> 
    29                              <1> 		;---------------------------------------
    30                              <1> 		; 例外を生成したアドレスの確認
    31                              <1> 		;---------------------------------------
    32 0000070A 0F20D0              <1> 		mov		eax, cr2						; // CR2
    33 0000070D 2500F0FFFF          <1> 		and		eax, ~0x0FFF					; // 4Kバイト以内のアクセス
    34 00000712 3D00701000          <1> 		cmp		eax, 0x0010_7000				; ptr = アクセスアドレス;
    35 00000717 7521                <1> 		jne		.10F							; if (0x0010_7000 == ptr)
    36                              <1> 												; {
    37                              <1> 		;---------------------------------------
    38                              <1> 		; ページの有効化
    39                              <1> 		;---------------------------------------
    40 00000719 C7051C641000077010- <1> 		mov		[0x00106000 + 0x107 * 4], dword 0x00107007	; // ページの有効化
    40 00000722 00                  <1>
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 描画パラメータの設定
    44                              <1> 		;---------------------------------------
    45 00000723 6A4068[7C090000]68- <1> 		cdecl	memcpy, 0x0010_7000, DRAW_PARAM, rose_size	; 描画パラメータ：タスク3用
    45 0000072B 00701000E8FC0C0000- <1>
    45 00000734 6683C40C            <1>
    46                              <1> 												; }
    47 00000738 EB15                <1> 		jmp		.10E							; else
    48                              <1> .10F:											; {
    49                              <1> 		;---------------------------------------
    50                              <1> 		; スタックの調整
    51                              <1> 		;---------------------------------------
    52 0000073A 83C404              <1> 		add		esp, 4							; pop es
    53 0000073D 83C404              <1> 		add		esp, 4							; pop ds
    54 00000740 61                  <1> 		popa									; 
    55 00000741 5D                  <1> 		pop		ebp								; 
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; タスク終了処理
    59                              <1> 		;---------------------------------------
    60 00000742 9C                  <1> 		pushf									; // EFLAGS
    61 00000743 0E                  <1> 		push	cs								; // CS
    62 00000744 68[1F100000]        <1> 		push	int_stop						; // スタック表示処理
    63                              <1> 
    64 00000749 B8[59070000]        <1> 		mov		eax, .s0						; // 割り込み種別
    65 0000074E CF                  <1> 		iret
    66                              <1> .10E:											; }
    67                              <1> 		;---------------------------------------
    68                              <1> 		; 【レジスタの復帰】
    69                              <1> 		;---------------------------------------
    70 0000074F 07                  <1> 		pop		es								; 
    71 00000750 1F                  <1> 		pop		ds								; 
    72 00000751 61                  <1> 		popa									; 
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【スタックフレームの破棄】
    76                              <1> 		;---------------------------------------
    77 00000752 89EC                <1> 		mov		esp, ebp
    78 00000754 5D                  <1> 		pop		ebp
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; エラーコードの破棄
    82                              <1> 		;---------------------------------------
    83 00000755 83C404              <1> 		add		esp, 4							; // エラーコードの破棄
    84                              <1> 
    85 00000758 CF                  <1> 		iret
    86                              <1> 
    87 00000759 203C20504147452046- <1> .s0		db	" < PAGE FAULT > ", 0
    87 00000762 41554C54203E2000    <1>
    88                              <1> 
   159                                  %include	"tasks/task_1.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TASK-1
     3                              <1> ;************************************************************************
     4                              <1> task_1:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 文字列の表示
     7                              <1> 		;---------------------------------------
     8 0000076A 68[98070000]6A076A- <1> 		cdecl	draw_str, 63, 0, 0x07, .s0	; draw_str();
     8 00000772 006A3FE86304000066- <1>
     8 0000077B 83C410              <1>
     9                              <1> 
    10                              <1> .10L:											; while (;;)
    11                              <1> 												; {
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 時刻の表示
    14                              <1> 		;---------------------------------------
    15 0000077E A1[54020000]        <1> 		mov		eax, [RTC_TIME]					;   // 時刻の取得
    16 00000783 5068000700006A006A- <1> 		cdecl	draw_time, 72, 0, 0x0700, eax	;   // 時刻の表示
    16 0000078C 48E8BD0700006683C4- <1>
    16 00000795 10                  <1>
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		; タスクの呼び出し
    20                              <1> 		;---------------------------------------
    21                              <1> ;		jmp		SS_TASK_0:0						;   // タスク0へのジャンプ
    22                              <1> 
    23 00000796 EBE6                <1> 		jmp		.10L							; }
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; データ
    27                              <1> 		;---------------------------------------
    28 00000798 5461736B2D3100      <1> .s0		db	"Task-1", 0
    29                              <1> 
   160                                  %include	"tasks/task_2.s"
     1                              <1> 
     2                              <1> ;************************************************************************
     3                              <1> ;	TASK
     4                              <1> ;************************************************************************
     5                              <1> task_2:
     6                              <1> 		;---------------------------------------
     7                              <1> 		; 文字列の表示
     8                              <1> 		;---------------------------------------
     9 0000079F 68[6E080000]6A076A- <1> 		cdecl	draw_str, 63, 1, 0x07, .s0		; draw_str(.s0);
     9 000007A7 016A3FE82E04000066- <1>
     9 000007B0 83C410              <1>
    10                              <1> 
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 初期化
    13                              <1> 		;---------------------------------------
    14                              <1> 												; ---------+---------+---------|---------|---------|---------|
    15                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
    16                              <1> 												; ---------+---------+---------|---------|---------|---------|
    17 000007B3 DB05[5C080000]      <1> 		fild	dword [.c1000]					;     1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    18 000007B9 D9EB                <1> 		fldpi									;       pi |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    19 000007BB DA35[60080000]      <1> 		fidiv	dword [.c180]					;   pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    20 000007C1 D9EB                <1> 		fldpi									;       pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    21 000007C3 DCC0                <1> 		fadd	st0, st0						;     2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
    22 000007C5 D9EE                <1> 		fldz									;   θ = 0 |    2*pi |  pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    23                              <1> 												; ---------+---------+---------|---------|---------|---------|
    24                              <1> 												;   θ = 0 |    2*pi |d=pi/180 |    1000 |xxxxxxxxx|xxxxxxxxx|
    25                              <1> 												; ---------+---------+---------|---------|---------|---------|
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; メインループ
    29                              <1> 		;---------------------------------------
    30                              <1> .10L:											; for ( ; ; )
    31                              <1> 												; {
    32                              <1> 		;---------------------------------------
    33                              <1> 		; sin(t)
    34                              <1> 		;---------------------------------------
    35                              <1> 												; ---------+---------+---------|---------|---------|---------|
    36                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
    37                              <1> 												; ---------+---------+---------|---------|---------|---------|
    38                              <1> 												;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    39                              <1> 												; ---------+---------+---------|---------|---------|---------|
    40 000007C7 D8C2                <1> 		fadd	st0, st2						;   θ + d |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    41 000007C9 D9F8                <1> 		fprem									;   MOD(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    42 000007CB D9C0                <1> 		fld		st0								;       θ |      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    43 000007CD D9FE                <1> 		fsin									;   sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    44 000007CF D8CC                <1> 		fmul	st0, st4						;ST4sin(θ)|      θ |    2*pi |       d |    1000 |xxxxxxxxx|
    45                              <1> 												; ---------+---------+---------|---------|---------|---------|
    46 000007D1 DF35[64080000]      <1> 		fbstp	[.bcd]							;       θ |    2*pi |       d |    1000 |xxxxxxxxx|xxxxxxxxx|
    47                              <1> 												; ---------+---------+---------|---------|---------|---------|
    48                              <1> 
    49 000007D7 A1[64080000]        <1> 		mov		eax, [.bcd]						;   EAX = 1000 * sin(t);
    50 000007DC 89C3                <1> 		mov		ebx, eax						;   EBX = EAX;
    51                              <1> 
    52 000007DE 250F0F0000          <1> 		and		eax, 0x0F0F						;   // 上位4ビットをマスク
    53 000007E3 0D30300000          <1> 		or		eax, 0x3030						;   // 上位4ビットに0x3を設定
    54                              <1> 
    55 000007E8 C1EB04              <1> 		shr		ebx, 4							;   EBX >>= 4;
    56 000007EB 81E30F0F0000        <1> 		and		ebx, 0x0F0F						;   // 上位4ビットをマスク
    57 000007F1 81CB30300000        <1> 		or		ebx, 0x3030						;   // 上位4ビットに0x3を設定
    58                              <1> 
    59 000007F7 883D[76080000]      <1> 		mov		[.s2 + 0], bh					;   // 1桁目
    60 000007FD 8825[78080000]      <1> 		mov		[.s3 + 0], ah					;   // 小数1桁目
    61 00000803 881D[79080000]      <1> 		mov		[.s3 + 1], bl					;   // 小数2桁目
    62 00000809 A2[7A080000]        <1> 		mov		[.s3 + 2], al					;   // 小数3桁目
    63                              <1> 
    64 0000080E B807000000          <1> 		mov		eax, 7							;   // 符号の表示
    65 00000813 0FA305[6D080000]    <1> 		bt		[.bcd + 9], eax					;   CF = bcd[9] & 0x80;
    66 0000081A 7209                <1> 		jc		.10F							;   if (CF)
    67                              <1> 												;   {
    68 0000081C C605[75080000]2B    <1> 		mov		[.s1 + 0], byte '+'				;     *s1 = '+';
    69 00000823 EB07                <1> 		jmp		.10E							;   }
    70                              <1> .10F:											;   else
    71                              <1> 												;   {
    72 00000825 C605[75080000]2D    <1> 		mov		[.s1 + 0], byte '-'				;     *s1 = '-';
    73                              <1> .10E:											;   }
    74                              <1> 
    75 0000082C 68[75080000]6A076A- <1> 		cdecl	draw_str, 72, 1, 0x07, .s1		; draw_str(.s1);
    75 00000834 016A48E8A103000066- <1>
    75 0000083D 83C410              <1>
    76                              <1> 
    77                              <1> 		;---------------------------------------
    78                              <1> 		; ウェイト
    79                              <1> 		;---------------------------------------
    80 00000840 B914000000          <1> 		mov		ecx, 20							;   ECX = 20
    81                              <1> 												;   do
    82                              <1> 												;   {
    83 00000845 A1[F8060000]        <1> .20L:	mov		eax, [TIMER_COUNT]				;     EAX = TIMER_COUNT;
    84 0000084A 3905[F8060000]      <1> .21L:	cmp		[TIMER_COUNT], eax				;     while (TIMER_COUNT != EAX)
    85 00000850 74F8                <1> 		je		.21L							;       ;
    86 00000852 E2F1                <1> 		loop	.20L							;   } while (--ECX);
    87                              <1> 
    88 00000854 E96EFFFFFF          <1> 		jmp		.10L							; }
    89                              <1> 
    90                              <1> 
    91 00000859 00<rept>            <1> ALIGN 4, db 0
    92 0000085C E8030000            <1> .c1000:		dd	1000
    93 00000860 B4000000            <1> .c180:		dd	180
    94                              <1> 
    95 00000864 00<rept>            <1> .bcd:	times 10 db	0x00
    96                              <1> 
    97 0000086E 5461736B2D3200      <1> .s0		db	"Task-2", 0
    98 00000875 2D                  <1> .s1:	db	"-"
    99 00000876 302E                <1> .s2:	db	"0."
   100 00000878 30303000            <1> .s3:	db	"000", 0
   101                              <1> 
   161                                  %include	"tasks/task_3.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	TASK
     3                              <1> ;************************************************************************
     4                              <1> task_3:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【スタックフレームの構築】
     7                              <1> 		;---------------------------------------
     8 0000087C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
     9                              <1> 												; ---------------
    10 0000087E 6A00                <1> 		push	dword 0							;    - 4| x0 = 0; // X座標原点
    11 00000880 6A00                <1> 		push	dword 0							;    - 8| y0 = 0; // Y座標原点
    12 00000882 6A00                <1> 		push	dword 0							;    -12| x  = 0; // X座標描画
    13 00000884 6A00                <1> 		push	dword 0							;    -16| y  = 0; // Y座標描画
    14 00000886 6A00                <1> 		push	dword 0							;    -20| r  = 0; // 角度
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 初期化
    18                              <1> 		;---------------------------------------
    19 00000888 BE00701000          <1> 		mov		esi, 0x0010_7000				; ESI = 描画パラメータ
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; タイトル表示
    23                              <1> 		;---------------------------------------
    24 0000088D 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
    25 0000088F 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
    26                              <1> 
    27 00000892 C1E803              <1> 		shr		eax, 3							; EAX = EAX /  8; // X座標を文字位置に変換
    28 00000895 C1EB04              <1> 		shr		ebx, 4							; EBX = EBX / 16; // Y座標を文字位置に変換
    29 00000898 4B                  <1> 		dec		ebx								; // 1文字分上に移動
    30 00000899 8B4E24              <1> 		mov		ecx, [esi + rose.color_s]		; 文字色
    31 0000089C 8D5630              <1> 		lea		edx, [esi + rose.title]			; タイトル
    32                              <1> 
    33 0000089F 52515350E835030000- <1> 		cdecl	draw_str, eax, ebx, ecx, edx	; draw_str();
    33 000008A8 6683C410            <1>
    34                              <1> 
    35                              <1> 		;---------------------------------------
    36                              <1> 		; X軸の中点
    37                              <1> 		;---------------------------------------
    38 000008AC 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX  = X0座標
    39 000008AE 8B5E08              <1> 		mov		ebx, [esi + rose.x1]			; EBX  = X1座標
    40 000008B1 29C3                <1> 		sub		ebx, eax						; EBX  = (X1 - X0);
    41 000008B3 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
    42 000008B5 01C3                <1> 		add		ebx, eax						; EBX += X0
    43 000008B7 895DFC              <1> 		mov		[ebp - 4], ebx					; x0 = EBX; // X座標原点;
    44                              <1> 
    45                              <1> 		;---------------------------------------
    46                              <1> 		; Y軸の中点
    47                              <1> 		;---------------------------------------
    48 000008BA 8B4604              <1> 		mov		eax, [esi + rose.y0]			; EAX  = Y0座標
    49 000008BD 8B5E0C              <1> 		mov		ebx, [esi + rose.y1]			; EBX  = Y1座標
    50 000008C0 29C3                <1> 		sub		ebx, eax						; EBX  = (Y1 - Y0);
    51 000008C2 D1EB                <1> 		shr		ebx, 1							; EBX /= 2;
    52 000008C4 01C3                <1> 		add		ebx, eax						; EBX += Y0
    53 000008C6 895DF8              <1> 		mov		[ebp - 8], ebx					; y0 = EBX; // Y座標原点;
    54                              <1> 
    55                              <1> 		;---------------------------------------
    56                              <1> 		; X軸の描画
    57                              <1> 		;---------------------------------------
    58 000008C9 8B06                <1> 		mov		eax, [esi + rose.x0]			; EAX = X0座標;
    59 000008CB 8B5DF8              <1> 		mov		ebx, [ebp - 8]					; EBX = Y軸の中点;
    60 000008CE 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; ECX = X1座標;
    61                              <1> 
    62 000008D1 FF761853515350E893- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, dword [esi + rose.color_x]	; X軸
    62 000008DA 0400006683C414      <1>
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; Y軸の描画
    66                              <1> 		;---------------------------------------
    67 000008E1 8B4604              <1> 		mov		eax, [esi + rose.y0]			; Y0座標
    68 000008E4 8B5DFC              <1> 		mov		ebx, [ebp - 4]					; EBX = X軸の中点;
    69 000008E7 8B4E0C              <1> 		mov		ecx, [esi + rose.y1]			; Y1座標
    70                              <1> 
    71 000008EA FF761C51535053E87A- <1> 		cdecl	draw_line, ebx, eax, ebx, ecx, dword [esi + rose.color_y]	; Y軸
    71 000008F3 0400006683C414      <1>
    72                              <1> 
    73                              <1> 		;---------------------------------------
    74                              <1> 		; 枠の描画
    75                              <1> 		;---------------------------------------
    76 000008FA 8B06                <1> 		mov		eax, [esi + rose.x0]			; X0座標
    77 000008FC 8B5E04              <1> 		mov		ebx, [esi + rose.y0]			; Y0座標
    78 000008FF 8B4E08              <1> 		mov		ecx, [esi + rose.x1]			; X1座標
    79 00000902 8B560C              <1> 		mov		edx, [esi + rose.y1]			; Y1座標
    80                              <1> 
    81 00000905 FF762052515350E80E- <1> 		cdecl	draw_rect, eax, ebx, ecx, edx, dword [esi + rose.color_z]	; 枠
    81 0000090E 0500006683C414      <1>
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 振幅をX軸の約95%とする
    85                              <1> 		;---------------------------------------
    86 00000915 8B4608              <1> 		mov		eax, [esi + rose.x1]			; EAX  = X1座標;
    87 00000918 2B06                <1> 		sub		eax, [esi + rose.x0]			; EAX -= X0座標;
    88 0000091A D1E8                <1> 		shr		eax, 1							; EAX /= 2;      // 半分
    89 0000091C 89C3                <1> 		mov		ebx, eax						; EBX  = EAX;
    90 0000091E C1EB04              <1> 		shr		ebx, 4							; EBX /= 16;
    91 00000921 29D8                <1> 		sub		eax, ebx						; EAX -= EBX;
    92                              <1> 
    93                              <1> 		;---------------------------------------
    94                              <1> 		; FPUの初期化(バラ曲線の初期化)
    95                              <1> 		;---------------------------------------
    99 00000923 FF7614FF761050E88D- <1> 		cdecl	fpu_rose_init										, eax											, dword [esi + rose.n]							, dword [esi + rose.d]
    99 0000092C 0000006683C40C      <1>
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; メインループ
   103                              <1> 		;---------------------------------------
   104                              <1> .10L:											; for ( ; ; )
   105                              <1> 												; {
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 座標計算
   108                              <1> 		;---------------------------------------
   109 00000933 8D5DF4              <1> 		lea		ebx, [ebp -12]					;   EBX = &x;
   110 00000936 8D4DF0              <1> 		lea		ecx, [ebp -16]					;   ECX = &y;
   111 00000939 8B45EC              <1> 		mov		eax, [ebp -20]					;   EAX = r;
   112                              <1> 
   116 0000093C 505153E89200000066- <1> 		cdecl	fpu_rose_update										, ebx											, ecx											, eax
   116 00000945 83C40C              <1>
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 角度更新(r = r % 36000)
   120                              <1> 		;---------------------------------------
   121 00000948 BA00000000          <1> 		mov		edx, 0							;   EDX = 0;
   122 0000094D 40                  <1> 		inc		eax								;   EAX++;
   123 0000094E BBA08C0000          <1> 		mov		ebx, 360 * 100					;   DBX = 36000
   124 00000953 F7F3                <1> 		div		ebx								;   EDX = EDX:EAX % EBX;
   125 00000955 8955EC              <1> 		mov		[ebp -20], edx
   126                              <1> 
   127                              <1> 		;---------------------------------------
   128                              <1> 		; ドット描画
   129                              <1> 		;---------------------------------------
   130 00000958 8B4DF4              <1> 		mov		ecx, [ebp -12]					;   ECX = X座標
   131 0000095B 8B55F0              <1> 		mov		edx, [ebp -16]					;   ECX = Y座標
   132                              <1> 
   133 0000095E 034DFC              <1> 		add		ecx, [ebp - 4]					;   ECX += X座標原点;
   134 00000961 0355F8              <1> 		add		edx, [ebp - 8]					;   EDX += Y座標原点;
   135                              <1> 
   136 00000964 8B5E28              <1> 		mov		ebx, [esi + rose.color_f]		;   EBX = 表示色;
   137 00000967 CD82                <1> 		int		0x82							;   sys_call_82(表示色, X, Y);
   138                              <1> 
   139                              <1> 		;---------------------------------------
   140                              <1> 		; ウェイト
   141                              <1> 		;---------------------------------------
   142 00000969 6A02E8A20A00006683- <1> 		cdecl	wait_tick, 2					;   wait_tick(2);
   142 00000972 C404                <1>
   143                              <1> 
   144                              <1> 		;---------------------------------------
   145                              <1> 		; ドット描画(消去)
   146                              <1> 		;---------------------------------------
   147 00000974 8B5E2C              <1> 		mov		ebx, [esi + rose.color_b]		;   EBX = 背景色;
   148 00000977 CD82                <1> 		int		0x82							;   sys_call_82(背景色, X, Y);
   149                              <1> 
   150                              <1> 
   151 00000979 EBB8                <1>         jmp     .10L                            ; }
   152                              <1> 
   153                              <1> 
   154 0000097B 00                  <1> ALIGN 4, db 0
   155                              <1> DRAW_PARAM:										; 描画パラメータ
   156                              <1> 	istruc	rose
   157 0000097C 10000000            <1> 		at	rose.x0,		dd		 16			; 左上座標：X0
   158 00000980 20000000            <1> 		at	rose.y0,		dd		 32			; 左上座標：Y0
   159 00000984 A0010000            <1> 		at	rose.x1,		dd		416			; 右下座標：X1
   160 00000988 B0010000            <1> 		at	rose.y1,		dd		432			; 右下座標：Y1
   161                              <1> 
   162 0000098C 05000000            <1> 		at	rose.n,			dd		5			; 変数：n
   163 00000990 02000000            <1> 		at	rose.d,			dd		2			; 変数：d
   164                              <1> 
   165 00000994 07000000            <1> 		at	rose.color_x,	dd		0x0007		; 描画色：X軸
   166 00000998 07000000            <1> 		at	rose.color_y,	dd		0x0007		; 描画色：Y軸
   167 0000099C 0F000000            <1> 		at	rose.color_z,	dd		0x000F		; 描画色：枠
   168 000009A0 0F010000            <1> 		at	rose.color_s,	dd		0x010F		; 描画色：文字
   169 000009A4 0F000000            <1> 		at	rose.color_f,	dd		0x000F		; 描画色：グラフ描画色
   170 000009A8 06000000            <1> 		at	rose.color_b,	dd		0x0006		; 描画色：グラフ消去色
   171                              <1> 
   172 000009AC 5461736B2D3300      <1> 		at	rose.title,		db		"Task-3", 0	; タイトル
   173                              <1> 
   174 000009B3 00<rept>            <1> 	iend
   175                              <1> 
   176                              <1> 
   177                              <1> ;************************************************************************
   178                              <1> ;	バラ曲線：初期化
   179                              <1> ;------------------------------------------------------------------------
   180                              <1> ;	バラ曲線を描画するためにFPUのレジスタを初期化する
   181                              <1> ;
   182                              <1> ;	Z = A * sin(nθ)
   183                              <1> ;	  = A * sin( (n/d) * ((π/180) * t) )
   184                              <1> ;
   185                              <1> ;	このグラフを描画するために、X/Y座標を次の様に計算する
   186                              <1> ;
   187                              <1> ;	x = A * sin(nθ) * cos(θ)
   188                              <1> ;	y = A * sin(nθ) * sin(θ)
   189                              <1> ;
   190                              <1> ;	この時、kは(n / d)で指定する。また、ラディアン = 度 * (π / 180)
   191                              <1> ;	である事から、r = π / 180を先に計算しておく
   192                              <1> ;========================================================================
   193                              <1> ;■書式		: void fpu_rose_init(A, n, d);
   194                              <1> ;
   195                              <1> ;■引数
   196                              <1> ;	DWORD	: A
   197                              <1> ;	DWORD	: n
   198                              <1> ;	DWORD	: d
   199                              <1> ;
   200                              <1> ;■戻り値	: 無し
   201                              <1> ;************************************************************************
   202                              <1> fpu_rose_init:
   203                              <1> 		;---------------------------------------
   204                              <1> 		; 【スタックフレームの構築】
   205                              <1> 		;---------------------------------------
   206                              <1> 												; ------|--------
   207                              <1> 												;    +16| d
   208                              <1> 												;    +12| n
   209                              <1> 												;    + 8| A
   210                              <1> 												; ---------------
   211 000009BC 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   212 000009BD 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   213                              <1> 												; ---------------
   214 000009BF 68B4000000          <1> 		push	dword 180						;    - 4| dword i = 180;
   215                              <1> 
   216                              <1> 		;---------------------------------------
   217                              <1> 		; FPUを使った処理
   218                              <1> 		;
   219                              <1> 		; A(振幅), k(n/d),r(度→ラディアン)を
   220                              <1> 		; FPU内のレジスタにスタックしておく
   221                              <1> 		;---------------------------------------
   222                              <1> 												; ---------+---------+---------|---------|---------|---------|
   223                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   224                              <1> 												; ---------+---------+---------|---------|---------|---------|
   225 000009C4 D9EB                <1> 		fldpi									;   pi     |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   226 000009C6 DA75FC              <1> 		fidiv	dword [ebp - 4]					;   pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   227 000009C9 DB450C              <1> 		fild	dword [ebp +12]					;        n |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   228 000009CC DA7510              <1> 		fidiv	dword [ebp +16]					;      n/d |         |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   229 000009CF DB4508              <1> 		fild	dword [ebp + 8]					;        A |     n/d |  pi/180 |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   230                              <1> 												; ---------+---------+---------|---------|---------|---------|
   231                              <1> 												;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   232                              <1> 												; ---------+---------+---------|---------|---------|---------|
   233                              <1> 		;---------------------------------------
   234                              <1> 		; スタックフレームの破棄
   235                              <1> 		;---------------------------------------
   236 000009D2 89EC                <1> 		mov		esp, ebp
   237 000009D4 5D                  <1> 		pop		ebp
   238                              <1> 
   239 000009D5 C3                  <1> 		ret
   240                              <1> 
   241                              <1> ;************************************************************************
   242                              <1> ;	バラ曲線：計算
   243                              <1> ;------------------------------------------------------------------------
   244                              <1> ;	角度を引数として受け取り、座標を計算する。
   245                              <1> ;	（他のパラメータはFPUレジスタに設定済みと仮定）
   246                              <1> ;========================================================================
   247                              <1> ;■書式		: void fpu_rose_update(t, X, Y);
   248                              <1> ;
   249                              <1> ;■引数
   250                              <1> ;	DWORD	: 角度[度]
   251                              <1> ;	DWORD	: Y座標へのポインタ
   252                              <1> ;	DWORD	: X座標へのポインタ
   253                              <1> ;
   254                              <1> ;■戻り値	: 無し
   255                              <1> ;************************************************************************
   256                              <1> fpu_rose_update:
   257                              <1> 		;---------------------------------------
   258                              <1> 		; 【スタックフレームの構築】
   259                              <1> 		;---------------------------------------
   260                              <1> 												; ---------------
   261                              <1> 												; EBP+16| t(角度)
   262                              <1> 												; EBP+12| Y(float)
   263                              <1> 												; EBP+ 8| X(float)
   264                              <1> 												; ---------------
   265 000009D6 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   266 000009D7 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   267                              <1> 												; ------|--------
   268                              <1> 
   269                              <1> 		;---------------------------------------
   270                              <1> 		; 【レジスタの保存】
   271                              <1> 		;---------------------------------------
   272 000009D9 50                  <1> 		push	eax
   273 000009DA 53                  <1> 		push	ebx
   274                              <1> 
   275                              <1> 		;---------------------------------------
   276                              <1> 		; X/Yの保存先を設定
   277                              <1> 		;---------------------------------------
   278 000009DB 8B4508              <1> 		mov		eax, [ebp +  8]					; EAX = pX; // X座標へのポインタ
   279 000009DE 8B5D0C              <1> 		mov		ebx, [ebp + 12]					; EBX = pY; // Y座標へのポインタ
   280                              <1> 
   281                              <1> 		;---------------------------------------
   282                              <1> 		; FPUを使った処理
   283                              <1> 		; 
   284                              <1> 		; 既にスタックしてある値を元に
   285                              <1> 		; t(角度)から座標を計算する
   286                              <1> 		;---------------------------------------
   287                              <1> 												; ---------+---------+---------|---------|---------|---------|
   288                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   289                              <1> 												; ---------+---------+---------|---------|---------|---------|
   290 000009E1 DB4510              <1> 		fild	dword [ebp +16]					;        t |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   291 000009E4 D8CB                <1> 		fmul	st0, st3						;       rt |         |         |         |         |         |
   292 000009E6 D9C0                <1> 		fld		st0								;       rt |      rt |       A |       k |       r |xxxxxxxxx|
   293                              <1> 												; ---------+---------+---------|---------|---------|---------|
   294                              <1> 		; rt を θと置き換える					;       θ |      θ |       A |       k |       r |         |
   295                              <1> 												; ---------+---------+---------|---------|---------|---------|
   296 000009E8 D9FB                <1> 		fsincos									;   cos(θ)|  sin(θ)|      θ |       A |       k |       r |
   297 000009EA D9CA                <1> 		fxch	st2								;       θ |         |  cos(θ)|         |         |         |
   298 000009EC D8CC                <1> 		fmul	st0, st4						;      kθ |         |         |         |         |         |
   299 000009EE D9FE                <1> 		fsin									;  sin(kθ)|         |         |         |         |         |
   300 000009F0 D8CB                <1> 		fmul	st0, st3						; Asin(kθ)|         |         |         |         |         |
   301                              <1> 												; ---------+---------+---------|---------|---------|---------|
   302                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   303                              <1> 												; ---------+---------+---------|---------|---------|---------|
   304                              <1> 		;---------------------------------------
   305                              <1> 		; x =  A * sin(kθ) * cos(θ);
   306                              <1> 		;---------------------------------------
   307                              <1> 												; ---------+---------+---------|---------|---------|---------|
   308                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   309                              <1> 												; ---------+---------+---------|---------|---------|---------|
   310                              <1> 												; Asin(kθ)|  sin(θ)|  cos(θ)|       A |       k |       r |
   311 000009F2 D9CA                <1> 		fxch	st2								;   cos(θ)|         |Asin(kθ)|         |         |         |
   312 000009F4 D8CA                <1> 		fmul	st0, st2						;        x |         |         |         |         |         |
   313 000009F6 DB18                <1> 		fistp	dword [eax]						;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   314                              <1> 												; ---------+---------+---------|---------|---------|---------|
   315                              <1> 		;---------------------------------------
   316                              <1> 		; y = -A * sin(kθ) * sin(θ);
   317                              <1> 		;---------------------------------------
   318                              <1> 												; ---------+---------+---------|---------|---------|---------|
   319                              <1> 												;       ST0|      ST1|      ST2|      ST3|      ST4|      ST5|
   320                              <1> 												; ---------+---------+---------|---------|---------|---------|
   321                              <1> 												;   sin(θ)|Asin(kθ)|       A |       k |       r |xxxxxxxxx|
   322 000009F8 DEC9                <1> 		fmulp	st1, st0						;        y |       A |       k |       r |xxxxxxxxx|xxxxxxxxx|
   323 000009FA D9E0                <1> 		fchs									;       -y |         |         |         |xxxxxxxxx|xxxxxxxxx|
   324 000009FC DB1B                <1> 		fistp	dword [ebx]						;        A |       k |       r |xxxxxxxxx|xxxxxxxxx|xxxxxxxxx|
   325                              <1> 												; ---------+---------+---------|---------|---------|---------|
   326                              <1> 		;---------------------------------------
   327                              <1> 		; レジスタの復帰
   328                              <1> 		;---------------------------------------
   329 000009FE 5B                  <1> 		pop		ebx
   330 000009FF 58                  <1> 		pop		eax
   331                              <1> 
   332                              <1> 		;---------------------------------------
   333                              <1> 		; スタックフレームの破棄
   334                              <1> 		;---------------------------------------
   335 00000A00 89EC                <1> 		mov		esp, ebp
   336 00000A02 5D                  <1> 		pop		ebp
   337                              <1> 
   338 00000A03 C3                  <1> 		ret
   339                              <1> 
   162                                  
   163                                  ;************************************************************************
   164                                  ;	モジュール
   165                                  ;************************************************************************
   166                                  %include	"../modules/protect/vga.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	読み込みプレーンの選択
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void vga_set_read_plane(plane);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	plane	: 読み込みプレーン
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> vga_set_read_plane:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| プレーン（インデックス）
    16                              <1> 												; ------+----------------
    17 00000A04 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 00000A05 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 00000A07 50                  <1> 		push	eax
    25 00000A08 52                  <1> 		push	edx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 読み込みプレーンの選択
    29                              <1> 		;---------------------------------------
    30 00000A09 8A6508              <1> 		mov		ah, [ebp + 8]					; AH  = プレーンを選択（3=輝度, 2～0=RGB）
    31 00000A0C 80E403              <1> 		and		ah, 0x03						; AH &= 0x03; // 余計なビットをマスク
    32 00000A0F B004                <1> 		mov		al, 0x04						; AL  = 読み込みプレーン選択レジスタ
    33 00000A11 66BACE03            <1> 		mov		dx, 0x03CE						; DX  = グラフィックス制御ポート
    34 00000A15 66EF                <1> 		out		dx, ax							; // ポート出力
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの復帰】
    38                              <1> 		;---------------------------------------
    39 00000A17 5A                  <1> 		pop		edx
    40 00000A18 58                  <1> 		pop		eax
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 【スタックフレームの破棄】
    44                              <1> 		;---------------------------------------
    45 00000A19 89EC                <1> 		mov		esp, ebp
    46 00000A1B 5D                  <1> 		pop		ebp
    47                              <1> 
    48 00000A1C C3                  <1> 		ret
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ;	書き込みプレーンを選択
    52                              <1> ;========================================================================
    53                              <1> ;■書式		: void vga_set_write_plane(plane);
    54                              <1> ;
    55                              <1> ;■引数
    56                              <1> ;	plane	: 書き込みプレーン
    57                              <1> ;
    58                              <1> ;■戻り値	: 無し
    59                              <1> ;************************************************************************
    60                              <1> vga_set_write_plane:
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 【スタックフレームの構築】
    63                              <1> 		;---------------------------------------
    64                              <1> 												; EBP+ 8| プレーン（ビット指定）
    65                              <1> 												; ------+----------------
    66 00000A1D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    67 00000A1E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    68                              <1> 												; ------+----------------
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【レジスタの保存】
    72                              <1> 		;---------------------------------------
    73 00000A20 50                  <1> 		push	eax
    74 00000A21 52                  <1> 		push	edx
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 書き込みプレーンの選択
    78                              <1> 		;---------------------------------------
    79 00000A22 8A6508              <1> 		mov		ah, [ebp + 8]					; AH = 書き込みプレーンを指定(Bit:----IRGB)
    80 00000A25 80E40F              <1> 		and		ah, 0x0F						; AH = 0x0F; // 余計なビットをマスク
    81 00000A28 B002                <1> 		mov		al, 0x02						; AL = 書き込みプレーン選択
    82 00000A2A 66BAC403            <1> 		mov		dx, 0x03C4						; DX = シーケンサ制御ポート
    83 00000A2E 66EF                <1> 		out		dx, ax							; // ポート出力
    84                              <1> 
    85                              <1> 		;---------------------------------------
    86                              <1> 		; 【レジスタの復帰】
    87                              <1> 		;---------------------------------------
    88 00000A30 5A                  <1> 		pop		edx
    89 00000A31 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 00000A32 89EC                <1> 		mov		esp, ebp
    95 00000A34 5D                  <1> 		pop		ebp
    96                              <1> 
    97 00000A35 C3                  <1> 		ret
    98                              <1> 
    99                              <1> ;************************************************************************
   100                              <1> ;	フォントの書き込み
   101                              <1> ;========================================================================
   102                              <1> ;■書式		: void vram_font_copy(font, vram, plane, color);
   103                              <1> ;
   104                              <1> ;■引数
   105                              <1> ;	font	: FONTアドレス
   106                              <1> ;	vram	: VRAMアドレス
   107                              <1> ;	plane	: 出力プレーン（１つのプレーンのみをビットで指定）
   108                              <1> ;	color	: 描画色
   109                              <1> ;
   110                              <1> ;■戻り値	: 無し
   111                              <1> ;************************************************************************
   112                              <1> vram_font_copy:
   113                              <1> 		;---------------------------------------
   114                              <1> 		; 【スタックフレームの構築】
   115                              <1> 		;---------------------------------------
   116                              <1> 												; EBP+20| 色（背景/前景色）
   117                              <1> 												; EBP+16| プレーン（ビット指定）
   118                              <1> 												; EBP+12| VRAMアドレス
   119                              <1> 												; EBP+ 8| FONTアドレス
   120                              <1> 												; ------+----------------
   121 00000A36 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   122 00000A37 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   123                              <1> 												; ------+----------------
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの保存】
   127                              <1> 		;---------------------------------------
   128 00000A39 50                  <1> 		push	eax
   129 00000A3A 53                  <1> 		push	ebx
   130 00000A3B 51                  <1> 		push	ecx
   131 00000A3C 52                  <1> 		push	edx
   132 00000A3D 56                  <1> 		push	esi
   133 00000A3E 57                  <1> 		push	edi
   134                              <1> 
   135                              <1> 		;---------------------------------------
   136                              <1> 		; 【処理の開始】
   137                              <1> 		;---------------------------------------
   138 00000A3F 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = フォントアドレス;
   139 00000A42 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   140 00000A45 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   141 00000A49 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 色;
   142                              <1> 
   143 00000A4D 84C7                <1> 		test	bh, al							; ZF = (背景色 & プレーン);
   144 00000A4F 0F94C6              <1> 		setz	dh								; AH = ZF ? 0x01 : 0x00
   145 00000A52 FECE                <1> 		dec		dh								; AH--; // 0x00 or 0xFF
   146                              <1> 
   147 00000A54 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   148 00000A56 0F94C2              <1> 		setz	dl								; AL = ZF ? 0x01 : 0x00
   149 00000A59 FECA                <1> 		dec		dl								; AL--; // 0x00 or 0xFF
   150                              <1> 
   151                              <1> 		;---------------------------------------
   152                              <1> 		; 16ドットフォントのコピー
   153                              <1> 		;---------------------------------------
   154 00000A5B FC                  <1> 		cld										; DF  = 0; // アドレス加算
   155                              <1> 
   156 00000A5C B910000000          <1> 		mov		ecx, 16							; ECX = 16; // 16ドット
   157                              <1> .10L:											; do
   158                              <1> 												; {
   159                              <1> 		;---------------------------------------
   160                              <1> 		; フォントマスクの作成
   161                              <1> 		;---------------------------------------
   162 00000A61 AC                  <1> 		lodsb									;   AL  = *ESI++; //  フォント
   163 00000A62 88C4                <1> 		mov		ah, al							;   AH ~= AL;     // !フォント（ビット反転）
   164 00000A64 F6D4                <1> 		not		ah								;   
   165                              <1> 
   166                              <1> 		;---------------------------------------
   167                              <1> 		; 前景色
   168                              <1> 		;---------------------------------------
   169 00000A66 20D0                <1> 		and		al, dl							;   AL = 前景色 & フォント;
   170                              <1> 
   171                              <1> 		;---------------------------------------
   172                              <1> 		; 背景色
   173                              <1> 		;---------------------------------------
   174 00000A68 F7C310000000        <1> 		test	ebx, 0x0010						;   if (透過モード)
   175 00000A6E 7404                <1> 		jz		.11F							;   {
   176 00000A70 2227                <1> 		and		ah, [edi]						;     AH = !フォント & [EDI] // 現在値
   177 00000A72 EB02                <1> 		jmp		.11E							;   }
   178                              <1> .11F:											;   else
   179                              <1> 												;   {
   180 00000A74 20F4                <1> 		and		ah, dh							;     AH = !フォント & 背景色;
   181                              <1> .11E:											;   }
   182                              <1> 
   183                              <1> 		;---------------------------------------
   184                              <1> 		; 前景色と背景色を合成
   185                              <1> 		;---------------------------------------
   186 00000A76 08E0                <1> 		or		al, ah							;   AL  = 背景 | 前景;
   187                              <1> 
   188                              <1> 		;---------------------------------------
   189                              <1> 		; 新しい値を出力
   190                              <1> 		;---------------------------------------
   191 00000A78 8807                <1> 		mov		[edi], al						;   [EDI] = AL; // プレーンに書き込む
   192                              <1> 
   193 00000A7A 83C750              <1> 		add		edi, 80							;   EDI += 80;
   194 00000A7D E2E2                <1> 		loop	.10L							; } while (--ECX);
   195                              <1> .10E:											; 
   196                              <1> 
   197                              <1> 		;---------------------------------------
   198                              <1> 		; 【レジスタの復帰】
   199                              <1> 		;---------------------------------------
   200 00000A7F 5F                  <1> 		pop		edi
   201 00000A80 5E                  <1> 		pop		esi
   202 00000A81 5A                  <1> 		pop		edx
   203 00000A82 59                  <1> 		pop		ecx
   204 00000A83 5B                  <1> 		pop		ebx
   205 00000A84 58                  <1> 		pop		eax
   206                              <1> 
   207                              <1> 		;---------------------------------------
   208                              <1> 		; 【スタックフレームの破棄】
   209                              <1> 		;---------------------------------------
   210 00000A85 89EC                <1> 		mov		esp, ebp
   211 00000A87 5D                  <1> 		pop		ebp
   212                              <1> 
   213 00000A88 C3                  <1> 		ret
   214                              <1> 
   215                              <1> ;************************************************************************
   216                              <1> ;	ビットパターンの書き込み
   217                              <1> ;========================================================================
   218                              <1> ;■書式		: void vram_bit_copy(bit, vram, flag);
   219                              <1> ;
   220                              <1> ;■引数
   221                              <1> ;	bit		: 出力ビットパターン
   222                              <1> ;	vram	: VRAMアドレス
   223                              <1> ;	flag	: 1:セット, 0:クリア
   224                              <1> ;
   225                              <1> ;■戻り値	: 無し
   226                              <1> ;************************************************************************
   227                              <1> vram_bit_copy:
   228                              <1> 		;---------------------------------------
   229                              <1> 		; 【スタックフレームの構築】
   230                              <1> 		;---------------------------------------
   231                              <1> 												; EBP+20| 色（背景/前景色）
   232                              <1> 												; EBP+16| プレーン（ビット指定）
   233                              <1> 												; EBP+12| VRAMアドレス
   234                              <1> 												; EBP+ 8| 出力ビットパターン
   235                              <1> 												; ------+----------------
   236 00000A89 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   237 00000A8A 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   238                              <1> 												; ------+----------------
   239                              <1> 
   240                              <1> 		;---------------------------------------
   241                              <1> 		; 【レジスタの保存】
   242                              <1> 		;---------------------------------------
   243 00000A8C 50                  <1> 		push	eax
   244 00000A8D 53                  <1> 		push	ebx
   245 00000A8E 57                  <1> 		push	edi
   246                              <1> 
   247                              <1> 		;---------------------------------------
   248                              <1> 		; 【処理の開始】
   249                              <1> 		;---------------------------------------
   250 00000A8F 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = VRAMアドレス;
   251 00000A92 0FB64510            <1> 		movzx	eax, byte [ebp +16]				; EAX = プレーン（ビット指定）;
   252 00000A96 0FB75D14            <1> 		movzx	ebx, word [ebp +20]				; EBX = 表示色;
   253                              <1> 
   254 00000A9A 84C3                <1> 		test	bl, al							; ZF = (前景色 & プレーン);
   255 00000A9C 0F94C3              <1> 		setz	bl								; BL = ZF ? 0x01 : 0x00
   256 00000A9F FECB                <1> 		dec		bl								; BL--; // 0x00 or 0xFF
   257                              <1> 
   258                              <1> 		;---------------------------------------
   259                              <1> 		; マスクデータの作成
   260                              <1> 		;---------------------------------------
   261 00000AA1 8A4508              <1> 		mov		al, [ebp + 8]					; AL = 出力ビットパターン;
   262 00000AA4 88C4                <1> 		mov		ah, al							; AH ~= AL;     // !出力ビットパターン（ビット反転）
   263 00000AA6 F6D4                <1> 		not		ah								; 
   264                              <1> 
   265                              <1> 		;---------------------------------------
   266                              <1> 		; 現在値の出力を取得
   267                              <1> 		;---------------------------------------
   268 00000AA8 2227                <1> 		and		ah, [edi]						; AH  = 現在値 & !出力ビットパターン
   269 00000AAA 20D8                <1> 		and		al, bl							; AL  = 表示色 &  出力ビットパターン
   270 00000AAC 08E0                <1> 		or		al, ah							; AL |= AH;
   271                              <1> 
   272                              <1> 		;---------------------------------------
   273                              <1> 		; 新しい値を出力
   274                              <1> 		;---------------------------------------
   275 00000AAE 8807                <1> 		mov		[edi], al						; [EDI] = BL; // プレーンに書き込む
   276                              <1> 
   277                              <1> 		;---------------------------------------
   278                              <1> 		; 【レジスタの復帰】
   279                              <1> 		;---------------------------------------
   280 00000AB0 5F                  <1> 		pop		edi
   281 00000AB1 5B                  <1> 		pop		ebx
   282 00000AB2 58                  <1> 		pop		eax
   283                              <1> 
   284                              <1> 		;---------------------------------------
   285                              <1> 		; 【スタックフレームの破棄】
   286                              <1> 		;---------------------------------------
   287 00000AB3 89EC                <1> 		mov		esp, ebp
   288 00000AB5 5D                  <1> 		pop		ebp
   289                              <1> 
   290 00000AB6 C3                  <1> 		ret
   291                              <1> 
   167                                  %include	"../modules/protect/draw_char.s"
     1                              <1> draw_char:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+20| 文字
     7                              <1> 												; EBP+16| 色
     8                              <1> 												; EBP+12| Y（行）
     9                              <1> 												; EBP+ 8| X（列）
    10                              <1> 												; ------+----------------
    11 00000AB7 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    12 00000AB8 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    13                              <1> 												; ------+----------------
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【レジスタの保存】
    17                              <1> 		;---------------------------------------
    18 00000ABA 50                  <1> 		push	eax
    19 00000ABB 53                  <1> 		push	ebx
    20 00000ABC 51                  <1> 		push	ecx
    21 00000ABD 52                  <1> 		push	edx
    22 00000ABE 56                  <1> 		push	esi
    23 00000ABF 57                  <1> 		push	edi
    24                              <1> 		;---------------------------------------
    25                              <1> 		; テストアンドセット
    26                              <1> 		;---------------------------------------
    27                              <1> %ifdef	USE_TEST_AND_SET
    28 00000AC0 68[940B0000]E89908- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    28 00000AC8 00006683C404        <1>
    29                              <1> %endif
    30                              <1> 
    31                              <1>         ;コピー元のアドレスを取得
    32 00000ACE 0FB67514            <1>         movzx   esi, byte [ebp +20]
    33 00000AD2 C1E604              <1>         shl     esi, 4
    34 00000AD5 0335[50020000]      <1>         add     esi, [FONT_ADR]
    35                              <1> 
    36                              <1>         ;コピー先のアドレスを取得
    37 00000ADB 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000ADE C1E708              <1>         shl     edi, 8
    39 00000AE1 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA0000]
    40 00000AE8 037D08              <1>         add     edi, [ebp + 8]
    41                              <1> 
    42                              <1>         ;一文字分のフォントを出力
    43 00000AEB 0FB75D10            <1> 		movzx	ebx, word [ebp +16]				; // 表示色
    44                              <1> 
    45 00000AEF 6A03E80EFFFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 読み込みプレーン：輝度(I)
    45 00000AF8 C404                <1>
    46 00000AFA 6A08E81CFFFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 書き込みプレーン：輝度(I)
    46 00000B03 C404                <1>
    47 00000B05 536A085756E827FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x08, ebx
    47 00000B0E FF6683C410          <1>
    48                              <1> 
    49 00000B13 6A02E8EAFEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 読み込みプレーン：赤(R)
    49 00000B1C C404                <1>
    50 00000B1E 6A04E8F8FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 書き込みプレーン：赤(R)
    50 00000B27 C404                <1>
    51 00000B29 536A045756E803FFFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x04, ebx
    51 00000B32 FF6683C410          <1>
    52                              <1> 
    53 00000B37 6A01E8C6FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 読み込みプレーン：緑(G)
    53 00000B40 C404                <1>
    54 00000B42 6A02E8D4FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 書き込みプレーン：緑(G)
    54 00000B4B C404                <1>
    55 00000B4D 536A025756E8DFFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x02, ebx
    55 00000B56 FF6683C410          <1>
    56                              <1> 
    57 00000B5B 6A00E8A2FEFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 読み込みプレーン：青(B)
    57 00000B64 C404                <1>
    58 00000B66 6A01E8B0FEFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 書き込みプレーン：青(B)
    58 00000B6F C404                <1>
    59 00000B71 536A015756E8BBFEFF- <1> 		cdecl	vram_font_copy, esi, edi, 0x01, ebx
    59 00000B7A FF6683C410          <1>
    60                              <1> 
    61                              <1> %ifdef	USE_TEST_AND_SET
    62                              <1> 		;---------------------------------------
    63                              <1> 		; テストアンドセット
    64                              <1> 		;---------------------------------------
    65 00000B7F C705[940B0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    65 00000B87 0000                <1>
    66                              <1> %endif
    67                              <1> 
    68                              <1> 		;---------------------------------------
    69                              <1> 		; 【レジスタの復帰】
    70                              <1> 		;---------------------------------------
    71 00000B89 5F                  <1> 		pop		edi
    72 00000B8A 5E                  <1> 		pop		esi
    73 00000B8B 5A                  <1> 		pop		edx
    74 00000B8C 59                  <1> 		pop		ecx
    75 00000B8D 5B                  <1> 		pop		ebx
    76 00000B8E 58                  <1> 		pop		eax
    77                              <1> 
    78                              <1> 		;---------------------------------------
    79                              <1> 		; 【スタックフレームの破棄】
    80                              <1> 		;---------------------------------------
    81 00000B8F 89EC                <1> 		mov		esp, ebp
    82 00000B91 5D                  <1> 		pop		ebp
    83                              <1> 
    84 00000B92 C3                  <1> 		ret
    85                              <1> 
    86                              <1> %ifdef USE_TEST_AND_SET
    87 00000B93 00                  <1> ALIGN 4, db 0
    88 00000B94 00000000            <1> IN_USE:	dd	0
    89                              <1> %endif
    90                              <1> 
   168                                  %include	"../modules/protect/draw_font.s"
     1                              <1> draw_font:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												; EBP+12| Y（行）
     7                              <1> 												; EBP+ 8| X（列）
     8                              <1> 												; ---------------
     9 00000B98 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    10 00000B99 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    11                              <1> 												; ---------------
    12                              <1> 
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 00000B9B 50                  <1> 		push	eax
    17 00000B9C 53                  <1> 		push	ebx
    18 00000B9D 51                  <1> 		push	ecx
    19 00000B9E 52                  <1> 		push	edx
    20 00000B9F 56                  <1> 		push	esi
    21 00000BA0 57                  <1> 		push	edi
    22                              <1> 
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 表示位置
    25                              <1> 		;---------------------------------------
    26 00000BA1 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    27 00000BA4 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    28                              <1> 
    29 00000BA7 B900000000          <1>         mov     ecx, 0
    30 00000BAC 81F900010000        <1> .10L:   cmp     ecx, 256
    31 00000BB2 731F                <1>         jae     .10E
    32                              <1> 
    33 00000BB4 89C8                <1>         mov     eax, ecx
    34 00000BB6 83E00F              <1>         and     eax, 0x0F
    35 00000BB9 01F0                <1>         add     eax, esi            ;列 0 => 11110000 として端っこによるようにする
    36                              <1> 
    37 00000BBB 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    38 00000BBD C1EB04              <1> 		shr		ebx, 4							;   EBX /= 16
    39 00000BC0 01FB                <1> 		add		ebx, edi						;   EBX += Y;       ;行 １６で割ったときに商がいくつか
    40                              <1> 
    41 00000BC2 516A075350E8EBFEFF- <1> 		cdecl	draw_char, eax, ebx, 0x07, ecx	;   draw_char();
    41 00000BCB FF6683C410          <1>
    42                              <1> 
    43 00000BD0 41                  <1> 		inc		ecx								;   // for (... ECX++)
    44 00000BD1 EBD9                <1> 		jmp		.10L							; 
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 00000BD3 5F                  <1> 		pop		edi
    51 00000BD4 5E                  <1> 		pop		esi
    52 00000BD5 5A                  <1> 		pop		edx
    53 00000BD6 59                  <1> 		pop		ecx
    54 00000BD7 5B                  <1> 		pop		ebx
    55 00000BD8 58                  <1> 		pop		eax
    56                              <1> 
    57                              <1> 		;---------------------------------------
    58                              <1> 		; 【スタックフレームの破棄】
    59                              <1> 		;---------------------------------------
    60 00000BD9 89EC                <1> 		mov		esp, ebp
    61 00000BDB 5D                  <1> 		pop		ebp
    62                              <1> 
    63 00000BDC C3                  <1> 		ret
    64                              <1> 
   169                                  %include	"../modules/protect/draw_str.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	文字列の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_str(col, row, color, p);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	p		: 文字列のアドレス
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_str:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| *p（文字列のアドレス）
    20                              <1> 												; EBP+16| color（色）
    21                              <1> 												; EBP+12| row（行）
    22                              <1> 												; EBP+ 8| col（列）
    23                              <1> 												; ---------------
    24 00000BDD 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    25 00000BDE 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    26                              <1> 												; ---------------
    27                              <1> 
    28                              <1> 		;---------------------------------------
    29                              <1> 		; 【レジスタの保存】
    30                              <1> 		;---------------------------------------
    31 00000BE0 50                  <1> 		push	eax
    32 00000BE1 53                  <1> 		push	ebx
    33 00000BE2 51                  <1> 		push	ecx
    34 00000BE3 52                  <1> 		push	edx
    35 00000BE4 56                  <1> 		push	esi
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 文字列の表示
    39                              <1> 		;---------------------------------------
    40 00000BE5 8B4D08              <1> 		mov		ecx, [ebp + 8]					; ECX = 列;
    41 00000BE8 8B550C              <1> 		mov		edx, [ebp +12]					; EDX = 行;
    42 00000BEB 0FB75D10            <1> 		movzx	ebx, word [ebp + 16]			; EBX = 表示色;
    43 00000BEF 8B7514              <1> 		mov		esi, [ebp +20]					; ESI = 文字列のアドレス;
    44                              <1> 
    45 00000BF2 FC                  <1> 		cld										; DF = 0; // アドレス加算
    46                              <1> .10L:											; do
    47                              <1> 												; {
    48 00000BF3 AC                  <1> 		lodsb									;   AL = *ESI++; // 文字を取得
    49 00000BF4 3C00                <1> 		cmp		al, 0							;   if (0 == AL)
    50 00000BF6 741A                <1> 		je		.10E							;     break;
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 1文字表示
    54                              <1> 		;---------------------------------------
    55                              <1> %ifdef	USE_SYSTEM_CALL
    56 00000BF8 CD81                <1> 		int		0x81							;   sys_call(1, X, Y, 色, 文字);
    57                              <1> %else
    58                              <1> 		cdecl	draw_char, ecx, edx, ebx, eax	;   draw_char();
    59                              <1> %endif
    60                              <1> 
    61                              <1> 		; 次の文字の位置を調整
    62 00000BFA 41                  <1> 		inc		ecx								;   ECX++;           // 列を加算
    63 00000BFB 83F950              <1> 		cmp		ecx, 80							;   if (80 <= ECX)   // 80文字以上？
    64 00000BFE 7C10                <1> 		jl		.12E							;   {
    65 00000C00 B900000000          <1> 		mov		ecx, 0							;     ECX = 0;       // 列を初期化
    66 00000C05 42                  <1> 		inc		edx								;     EDX++;         // 行を加算
    67 00000C06 83FA1E              <1> 		cmp		edx, 30							;     if (30 <= EDX) // 30行以上？
    68 00000C09 7C05                <1> 		jl		.12E							;     {
    69 00000C0B BA00000000          <1> 		mov		edx, 0							;       EDX = 0;     // 行を初期化
    70                              <1> 												;     }
    71                              <1> .12E:											;   }
    72 00000C10 EBE1                <1> 		jmp		.10L							;   
    73                              <1> .10E:											; } while (1);
    74                              <1> 
    75                              <1> 		;---------------------------------------
    76                              <1> 		; 【レジスタの復帰】
    77                              <1> 		;---------------------------------------
    78 00000C12 5E                  <1> 		pop		esi
    79 00000C13 5A                  <1> 		pop		edx
    80 00000C14 59                  <1> 		pop		ecx
    81 00000C15 5B                  <1> 		pop		ebx
    82 00000C16 58                  <1> 		pop		eax
    83                              <1> 
    84                              <1> 		;---------------------------------------
    85                              <1> 		; 【スタックフレームの破棄】
    86                              <1> 		;---------------------------------------
    87 00000C17 89EC                <1> 		mov		esp, ebp
    88 00000C19 5D                  <1> 		pop		ebp
    89                              <1> 
    90 00000C1A C3                  <1> 		ret
    91                              <1> 
   170                                  %include	"../modules/protect/draw_color_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	カラーバーの表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_color_bar(col, row);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> draw_color_bar:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												; EBP+ 8| X（列）
    18                              <1> 												; EBP+12| Y（行）
    19                              <1> 												; ---------------
    20 00000C1B 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 00000C1C 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ---------------
    23                              <1> 		;---------------------------------------
    24                              <1> 		; 【レジスタの保存】
    25                              <1> 		;---------------------------------------
    26 00000C1E 50                  <1> 		push	eax
    27 00000C1F 53                  <1> 		push	ebx
    28 00000C20 51                  <1> 		push	ecx
    29 00000C21 52                  <1> 		push	edx
    30 00000C22 56                  <1> 		push	esi
    31 00000C23 57                  <1> 		push	edi
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 表示位置
    35                              <1> 		;---------------------------------------
    36 00000C24 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = X（列）
    37 00000C27 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; カラーバーを表示
    41                              <1> 		;---------------------------------------
    42 00000C2A B900000000          <1> 		mov		ecx, 0							; for (ECX = 0;
    43 00000C2F 83F910              <1> .10L:	cmp		ecx, 16							;      ECX < 16;
    44 00000C32 732E                <1> 		jae		.10E							; 
    45                              <1> 												;      ECX++)
    46                              <1> 												; {
    47                              <1> 												;   // 桁位置の計算
    48 00000C34 89C8                <1> 		mov		eax, ecx						;   EAX  = ECX;
    49 00000C36 83E001              <1> 		and		eax, 0x01						;   EAX &= 0x01;
    50 00000C39 C1E003              <1> 		shl		eax, 3							;   EAX *= 8;  // 8文字分乗算
    51 00000C3C 01F0                <1> 		add		eax, esi						;   EAX += X;
    52                              <1> 												;   
    53                              <1> 												;   // 行位置の計算
    54 00000C3E 89CB                <1> 		mov		ebx, ecx						;   EBX  = ECX;
    55 00000C40 D1EB                <1> 		shr		ebx, 1							;   EBX /= 2
    56 00000C42 01FB                <1> 		add		ebx, edi						;   EBX += Y;
    57                              <1> 												;   
    58                              <1> 												;   // 表示色の取得
    59 00000C44 89CA                <1> 		mov		edx, ecx						;   EDX  = ECX;
    60 00000C46 D1E2                <1> 		shl		edx, 1							;   EDX *= 2;
    61 00000C48 8B92[750C0000]      <1> 		mov		edx, [.t0 + edx]				;   EDX += Y;
    62                              <1> 
    63 00000C4E 68[6C0C0000]525350- <1> 		cdecl	draw_str, eax, ebx, edx, .s0	;   draw_str();
    63 00000C56 E882FFFFFF6683C410  <1>
    64                              <1> 
    65 00000C5F 41                  <1> 		inc		ecx								;   // for (... ECX++)
    66 00000C60 EBCD                <1> 		jmp		.10L							; 
    67                              <1> .10E:											; }
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 【レジスタの復帰】
    71                              <1> 		;---------------------------------------
    72 00000C62 5F                  <1> 		pop		edi
    73 00000C63 5E                  <1> 		pop		esi
    74 00000C64 5A                  <1> 		pop		edx
    75 00000C65 59                  <1> 		pop		ecx
    76 00000C66 5B                  <1> 		pop		ebx
    77 00000C67 58                  <1> 		pop		eax
    78                              <1> 
    79                              <1> 		;---------------------------------------
    80                              <1> 		; 【スタックフレームの破棄】
    81                              <1> 		;---------------------------------------
    82 00000C68 89EC                <1> 		mov		esp, ebp
    83 00000C6A 5D                  <1> 		pop		ebp
    84                              <1> 
    85 00000C6B C3                  <1> 		ret
    86                              <1> 
    87 00000C6C 202020202020202000  <1> .s0:	db '        ', 0						; 8文字分のスペース（表示色だけを変更）
    88                              <1> 
    89 00000C75 00000008            <1> .t0:	dw	0x0000, 0x0800						; カラーバーの背景色
    90 00000C79 00010009            <1> 		dw	0x0100, 0x0900
    91 00000C7D 0002000A            <1> 		dw	0x0200, 0x0A00
    92 00000C81 0003000B            <1> 		dw	0x0300, 0x0B00
    93 00000C85 0004000C            <1> 		dw	0x0400, 0x0C00
    94 00000C89 0005000D            <1> 		dw	0x0500, 0x0D00
    95 00000C8D 0006000E            <1> 		dw	0x0600, 0x0E00
    96 00000C91 0007000F            <1> 		dw	0x0700, 0x0F00
    97                              <1> 
   171                                  %include	"../modules/protect/draw_pixel.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ピクセルの描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_pixel(X, Y, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X		: X座標
     8                              <1> ;	Y		: Y座標
     9                              <1> ;	color	: 描画色
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> draw_pixel:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ------|--------
    18                              <1> 												; EBP+16| 色
    19                              <1> 												; EBP+12| Y
    20                              <1> 												; EBP+ 8| X
    21                              <1> 												; ------|--------
    22 00000C95 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    23 00000C96 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    24                              <1> 												; ------+--------
    25                              <1> 		;---------------------------------------
    26                              <1> 		; 【レジスタの保存】
    27                              <1> 		;---------------------------------------
    28 00000C98 50                  <1> 		push	eax
    29 00000C99 53                  <1> 		push	ebx
    30 00000C9A 51                  <1> 		push	ecx
    31 00000C9B 57                  <1> 		push	edi
    32                              <1>         
    33                              <1> 		;---------------------------------------
    34                              <1> 		; Y座標を80倍する（640/8）
    35                              <1> 		;---------------------------------------
    36                              <1> 
    37 00000C9C 8B7D0C              <1>         mov     edi, [ebp +12]
    38 00000C9F C1E704              <1>         shl     edi, 4
    39 00000CA2 8DBCBF00000A00      <1>         lea     edi, [edi * 4 + edi + 0xA_0000]
    40                              <1> 
    41 00000CA9 8B5D08              <1>         mov     ebx, [ebp + 8]
    42 00000CAC 89D9                <1>         mov     ecx, ebx
    43 00000CAE C1EB03              <1>         shr     ebx, 3
    44 00000CB1 01DF                <1>         add     edi, ebx
    45                              <1> 
    46 00000CB3 83E107              <1>         and     ecx, 0x07
    47 00000CB6 BB80000000          <1>         mov     ebx, 0x80
    48 00000CBB D3EB                <1>         shr     ebx, cl
    49                              <1> 
    50 00000CBD 8B4D10              <1>         mov     ecx, [ebp +16]
    51                              <1> 
    52                              <1> %ifdef	USE_TEST_AND_SET
    53 00000CC0 68[940B0000]E89906- <1> 		cdecl	test_and_set, IN_USE			; TEST_AND_SET(IN_USE); // リソースの空き待ち
    53 00000CC8 00006683C404        <1>
    54                              <1> %endif
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; プレーン毎に出力
    58                              <1> 		;---------------------------------------
    59 00000CCE 6A03E82FFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x03		; // 輝度(I)プレーンを選択
    59 00000CD7 C404                <1>
    60 00000CD9 6A08E83DFDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x08		; // 輝度(I)プレーンを選択
    60 00000CE2 C404                <1>
    61 00000CE4 516A085753E89BFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x08, ecx
    61 00000CED FF6683C410          <1>
    62                              <1> 
    63 00000CF2 6A02E80BFDFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x02		; // 赤(R)プレーンを選択
    63 00000CFB C404                <1>
    64 00000CFD 6A04E819FDFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x04		; // 赤(R)プレーンを選択
    64 00000D06 C404                <1>
    65 00000D08 516A045753E877FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x04, ecx
    65 00000D11 FF6683C410          <1>
    66                              <1> 
    67 00000D16 6A01E8E7FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x01		; // 緑(G)プレーンを選択
    67 00000D1F C404                <1>
    68 00000D21 6A02E8F5FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x02		; // 緑(G)プレーンを選択
    68 00000D2A C404                <1>
    69 00000D2C 516A025753E853FDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x02, ecx
    69 00000D35 FF6683C410          <1>
    70                              <1> 
    71 00000D3A 6A00E8C3FCFFFF6683- <1> 		cdecl	vga_set_read_plane, 0x00		; // 青(B)プレーンを選択
    71 00000D43 C404                <1>
    72 00000D45 6A01E8D1FCFFFF6683- <1> 		cdecl	vga_set_write_plane, 0x01		; // 青(B)プレーンを選択
    72 00000D4E C404                <1>
    73 00000D50 516A015753E82FFDFF- <1> 		cdecl	vram_bit_copy, ebx, edi, 0x01, ecx
    73 00000D59 FF6683C410          <1>
    74                              <1> 
    75                              <1> 
    76                              <1> %ifdef	USE_TEST_AND_SET
    77                              <1> 		;---------------------------------------
    78                              <1> 		; テストアンドセット
    79                              <1> 		;---------------------------------------
    80 00000D5E C705[940B0000]0000- <1> 		mov		[IN_USE], dword 0				; 変数のクリア
    80 00000D66 0000                <1>
    81                              <1> %endif
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【レジスタの復帰】
    85                              <1> 		;---------------------------------------
    86 00000D68 5F                  <1> 		pop		edi
    87 00000D69 59                  <1> 		pop		ecx
    88 00000D6A 5B                  <1> 		pop		ebx
    89 00000D6B 58                  <1> 		pop		eax
    90                              <1> 
    91                              <1> 		;---------------------------------------
    92                              <1> 		; 【スタックフレームの破棄】
    93                              <1> 		;---------------------------------------
    94 00000D6C 89EC                <1> 		mov		esp, ebp
    95 00000D6E 5D                  <1> 		pop		ebp
    96                              <1> 
    97 00000D6F C3                  <1> 		ret
    98                              <1> 
   172                                  %include	"../modules/protect/draw_line.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	直線の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_line(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_line:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ---------------
    20                              <1> 												;    +24| 色
    21                              <1> 												;    +20| Y1
    22                              <1> 												;    +16| X1
    23                              <1> 												;    +12| Y0
    24                              <1> 												;    + 8| X0
    25                              <1> 												; ---------------
    26 00000D70 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 00000D71 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ---------------
    29 00000D73 6A00                <1> 		push	dword 0							;    - 4| sum   = 0; // 相対軸の積算値
    30 00000D75 6A00                <1> 		push	dword 0							;    - 8| x0    = 0; // X座標
    31 00000D77 6A00                <1> 		push	dword 0							;    -12| dx    = 0; // X増分
    32 00000D79 6A00                <1> 		push	dword 0							;    -16| inc_x = 0; // X座標増分(1 or -1)
    33 00000D7B 6A00                <1> 		push	dword 0							;    -20| y0    = 0; // Y座標
    34 00000D7D 6A00                <1> 		push	dword 0							;    -24| dy    = 0; // Y増分
    35 00000D7F 6A00                <1> 		push	dword 0							;    -28| inc_y = 0; // Y座標増分(1 or -1)
    36                              <1> 												; ------|--------
    37                              <1> 
    38                              <1> 		;---------------------------------------
    39                              <1> 		; 【レジスタの保存】
    40                              <1> 		;---------------------------------------
    41 00000D81 50                  <1> 		push	eax
    42 00000D82 53                  <1> 		push	ebx
    43 00000D83 51                  <1> 		push	ecx
    44 00000D84 52                  <1> 		push	edx
    45 00000D85 56                  <1> 		push	esi
    46 00000D86 57                  <1> 		push	edi
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 幅を計算（X軸）
    50                              <1> 		;---------------------------------------
    51 00000D87 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    52 00000D8A 8B5D10              <1> 		mov		ebx, [ebp +16]					; EBX = X1;
    53 00000D8D 29C3                <1> 		sub		ebx, eax						; EBX = X1 - X0; // 幅
    54 00000D8F 7D09                <1> 		jge		.10F							; if (幅 < 0)
    55                              <1> 												; {
    56 00000D91 F7DB                <1> 		neg		ebx								;   幅   *= -1;
    57 00000D93 BEFFFFFFFF          <1> 		mov		esi, -1							;   // X座標の増分
    58 00000D98 EB05                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61 00000D9A BE01000000          <1> 		mov		esi, 1							;   // X座標の増分
    62                              <1> .10E:											; }
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 高さを計算（Y軸）
    66                              <1> 		;---------------------------------------
    67 00000D9F 8B4D0C              <1> 		mov		ecx, [ebp +12]					; ECX = Y0
    68 00000DA2 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1
    69 00000DA5 29CA                <1> 		sub		edx, ecx						; EDX = Y1 - Y0; // 高さ
    70 00000DA7 7D09                <1> 		jge		.20F							; if (高さ < 0)
    71                              <1> 												; {
    72 00000DA9 F7DA                <1> 		neg		edx								;   高さ *= -1;
    73 00000DAB BFFFFFFFFF          <1> 		mov		edi, -1							;   // Y座標の増分
    74 00000DB0 EB05                <1> 		jmp		.20E							; }
    75                              <1> .20F:											; else
    76                              <1> 												; {
    77 00000DB2 BF01000000          <1> 		mov		edi, 1							;   // Y座標の増分
    78                              <1> .20E:											; }
    79                              <1> 
    80                              <1> 		;---------------------------------------
    81                              <1> 		; X軸
    82                              <1> 		;---------------------------------------
    83 00000DB7 8945F8              <1> 		mov		[ebp - 8], eax					;   // X軸:開始座標
    84 00000DBA 895DF4              <1> 		mov		[ebp -12], ebx					;   // X軸:描画幅
    85 00000DBD 8975F0              <1> 		mov		[ebp -16], esi					;   // X軸:増分(基準軸：1 or -1)
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; Y軸
    89                              <1> 		;---------------------------------------
    90 00000DC0 894DEC              <1> 		mov		[ebp -20], ecx					;   // Y軸:開始座標
    91 00000DC3 8955E8              <1> 		mov		[ebp -24], edx					;   // Y軸:描画幅
    92 00000DC6 897DE4              <1> 		mov		[ebp -28], edi					;   // Y軸:増分(基準軸：1 or -1)
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 基準軸を決める
    96                              <1> 		;---------------------------------------
    97 00000DC9 39D3                <1> 		cmp		ebx, edx						; if (幅 <= 高さ)
    98 00000DCB 7F08                <1> 		jg		.22F							; {
    99                              <1> 												;   
   100 00000DCD 8D75EC              <1> 		lea		esi, [ebp -20]					;   // Y軸が基準軸
   101 00000DD0 8D7DF8              <1> 		lea		edi, [ebp - 8]					;   // X軸が相対軸
   102                              <1> 												;   
   103 00000DD3 EB06                <1> 		jmp		.22E							; }
   104                              <1> .22F:											; else
   105                              <1> 												; {
   106 00000DD5 8D75F8              <1> 		lea		esi, [ebp - 8]					;   // X軸が基準軸
   107 00000DD8 8D7DEC              <1> 		lea		edi, [ebp -20]					;   // Y軸が相対軸
   108                              <1> .22E:											; }
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 繰り返し回数(基準軸のドット数)
   112                              <1> 		;---------------------------------------
   113 00000DDB 8B4EFC              <1> 		mov		ecx, [esi - 4]					; ECX = 基準軸描画幅;
   114 00000DDE 83F900              <1> 		cmp		ecx, 0							; if (0 == ECX)
   115 00000DE1 7505                <1> 		jnz		.30E							; {
   116 00000DE3 B901000000          <1> 		mov		ecx, 1							;   ECX = 1;
   117                              <1> .30E:											; }
   118                              <1> 
   119                              <1> 		;---------------------------------------
   120                              <1> 		; 線を描画
   121                              <1> 		;---------------------------------------
   122                              <1> .50L:											; do
   123                              <1> 												; {
   124                              <1> %ifdef	USE_SYSTEM_CALL
   125 00000DE8 89C8                <1> 		mov		eax, ecx						;   // 繰り返し回数を保存
   126                              <1> 
   127 00000DEA 8B5D18              <1> 		mov		ebx, [ebp +24]					;   EBX = 表示色;
   128 00000DED 8B4DF8              <1> 		mov		ecx, [ebp - 8]					;   ECX = X座標;
   129 00000DF0 8B55EC              <1> 		mov		edx, [ebp -20]					;   EDX = Y座標;
   130 00000DF3 CD82                <1> 		int		0x82							;   sys_call(1, X, Y, 色, 文字); BX(C), CX(X), DX(Y)
   131                              <1> 
   132 00000DF5 89C1                <1> 		mov		ecx, eax
   133                              <1> %else
   136                              <1> 		cdecl	draw_pixel, dword [ebp - 8], 							dword [ebp -20], 							dword [ebp +24]		;   // 点の描画
   137                              <1> %endif
   138                              <1> 												;   // 基準軸を更新(1ドット分)
   139 00000DF7 8B46F8              <1> 		mov		eax, [esi - 8]					;   EAX = 基準軸増分(1 or -1);
   140 00000DFA 0106                <1> 		add		[esi - 0], eax					;   
   141                              <1> 
   142                              <1> 												;   // 相対軸を更新
   143 00000DFC 8B45FC              <1> 		mov		eax, [ebp - 4]					;   EAX  = sum; // 相対軸の積算値;
   144 00000DFF 0347FC              <1> 		add		eax, [edi - 4]					;   EAX += dy;  // 増分(相対軸の描画幅)
   145 00000E02 8B5EFC              <1> 		mov		ebx, [esi - 4]					;   EBX  = dx;  // 増分(基準軸の描画幅)
   146                              <1> 
   147 00000E05 39D8                <1> 		cmp		eax, ebx						;   if (積算値 <= 相対軸の増分)
   148 00000E07 7C07                <1> 		jl		.52E							;   {
   149 00000E09 29D8                <1> 		sub		eax, ebx						;     EAX -= EBX; // 積算値から相対軸の増分を減算
   150                              <1> 												;     
   151                              <1> 												;     // 相対軸の座標を更新(1ドット分)
   152 00000E0B 8B5FF8              <1> 		mov		ebx, [edi - 8]					;     EBX =  相対軸増分;
   153 00000E0E 011F                <1> 		add		[edi - 0], ebx					;     
   154                              <1> .52E:											;   }
   155 00000E10 8945FC              <1> 		mov		[ebp - 4], eax					;   // 積算値を更新
   156                              <1> 												;   
   157 00000E13 E2D3                <1> 		loop	.50L							;   
   158                              <1> .50E:											; } while (ループ回数--);
   159                              <1> 
   160                              <1> 		;---------------------------------------
   161                              <1> 		; 【レジスタの復帰】
   162                              <1> 		;---------------------------------------
   163 00000E15 5F                  <1> 		pop		edi
   164 00000E16 5E                  <1> 		pop		esi
   165 00000E17 5A                  <1> 		pop		edx
   166 00000E18 59                  <1> 		pop		ecx
   167 00000E19 5B                  <1> 		pop		ebx
   168 00000E1A 58                  <1> 		pop		eax
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 【スタックフレームの破棄】
   172                              <1> 		;---------------------------------------
   173 00000E1B 89EC                <1> 		mov		esp, ebp
   174 00000E1D 5D                  <1> 		pop		ebp
   175                              <1> 
   176 00000E1E C3                  <1> 		ret
   177                              <1> 
   173                                  %include	"../modules/protect/draw_rect.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	矩形の描画
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rect(X0, Y0, X1, Y1, color);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	X0		: 始点のX座標
     8                              <1> ;	Y0		: 始点のY座標
     9                              <1> ;	X1		: 終点のX座標
    10                              <1> ;	Y1		: 終点のY座標
    11                              <1> ;	color	: 描画色
    12                              <1> ;
    13                              <1> ;■戻り値	: 無し
    14                              <1> ;************************************************************************
    15                              <1> draw_rect:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 【スタックフレームの構築】
    18                              <1> 		;---------------------------------------
    19                              <1> 												; ------|--------
    20                              <1> 												; EBP+24| 色
    21                              <1> 												; EBP+20| Y1
    22                              <1> 												; EBP+16| X1
    23                              <1> 												; EBP+12| Y0
    24                              <1> 												; EBP+ 8| X0
    25                              <1> 												; ---------------
    26 00000E1F 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    27 00000E20 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    28                              <1> 												; ------|--------
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; 【レジスタの保存】
    32                              <1> 		;---------------------------------------
    33 00000E22 50                  <1> 		push		eax
    34 00000E23 53                  <1> 		push		ebx
    35 00000E24 51                  <1> 		push		ecx
    36 00000E25 52                  <1> 		push		edx
    37 00000E26 56                  <1> 		push		esi
    38                              <1> 
    39                              <1> 		;---------------------------------------
    40                              <1> 		; 矩形を描画
    41                              <1> 		;---------------------------------------
    42 00000E27 8B4508              <1> 		mov		eax, [ebp + 8]					; EAX = X0;
    43 00000E2A 8B5D0C              <1> 		mov		ebx, [ebp +12]					; EBX = Y0;
    44 00000E2D 8B4D10              <1> 		mov		ecx, [ebp +16]					; ECX = X1;
    45 00000E30 8B5514              <1> 		mov		edx, [ebp +20]					; EDX = Y1;
    46 00000E33 8B7518              <1> 		mov		esi, [ebp +24]					; ESI = 色;
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 座標軸の大小を確定
    50                              <1> 		;---------------------------------------
    51 00000E36 39C8                <1> 		cmp		eax, ecx						; if (X1 < X0)
    52 00000E38 7C01                <1> 		jl		.10E							; {
    53 00000E3A 91                  <1> 		xchg	eax, ecx						;   X0とX1を入れ替える;
    54                              <1> .10E:											; }
    55                              <1> 
    56 00000E3B 39D3                <1> 		cmp		ebx, edx						; if (Y1 < Y0)
    57 00000E3D 7C02                <1> 		jl		.20E							; {
    58 00000E3F 87DA                <1> 		xchg	ebx, edx						;   Y0とY1を入れ替える;
    59                              <1> .20E:											; }
    60                              <1> 
    61                              <1> 		;---------------------------------------
    62                              <1> 		; 矩形を描画
    63                              <1> 		;---------------------------------------
    64 00000E41 5653515350E825FFFF- <1> 		cdecl	draw_line, eax, ebx, ecx, ebx, esi	; 上線
    64 00000E4A FF6683C414          <1>
    65 00000E4F 5652505350E817FFFF- <1> 		cdecl	draw_line, eax, ebx, eax, edx, esi	; 左線
    65 00000E58 FF6683C414          <1>
    66                              <1> 
    67 00000E5D 4A                  <1> 		dec		edx									; EDX--; // 下線は1ドット上げる
    68 00000E5E 5652515250E808FFFF- <1> 		cdecl	draw_line, eax, edx, ecx, edx, esi	; 下線
    68 00000E67 FF6683C414          <1>
    69 00000E6C 42                  <1> 		inc		edx
    70                              <1> 
    71 00000E6D 49                  <1> 		dec		ecx									; ECX--; // 右線は1ドット左に移動
    72 00000E6E 5652515351E8F8FEFF- <1> 		cdecl	draw_line, ecx, ebx, ecx, edx, esi	; 右線
    72 00000E77 FF6683C414          <1>
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 00000E7C 5E                  <1> 		pop		esi
    78 00000E7D 5A                  <1> 		pop		edx
    79 00000E7E 59                  <1> 		pop		ecx
    80 00000E7F 5B                  <1> 		pop		ebx
    81 00000E80 58                  <1> 		pop		eax
    82                              <1> 
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの破棄】
    85                              <1> 		;---------------------------------------
    86 00000E81 89EC                <1> 		mov		esp, ebp
    87 00000E83 5D                  <1> 		pop		ebp
    88                              <1> 
    89 00000E84 C3                  <1> 		ret
    90                              <1> 
   174                                  %include	"../modules/protect/itoa.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	数値を文字に変換
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void itoa(num, buff, size, radix, flags);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	num		: 変換する数値
     8                              <1> ;	buff	: 保存先バッファアドレス
     9                              <1> ;	size	: 保存先バッファサイズ
    10                              <1> ;	radix	: 基数（2、8、10又は16を設定する）
    11                              <1> ;	flags	: フラグ
    12                              <1> ;			:   B2 : 1=空白を'0'（ゼロ）で埋める
    13                              <1> ;			:      : 0=空白を' '（スペース）で埋める
    14                              <1> ;			:   B1 : 1=＋/-符号を表示する
    15                              <1> ;			:      : 0=＋/-符号を表示しない
    16                              <1> ;			:   B0 : 1=符号付き正数として扱う
    17                              <1> ;			:      : 0=符号無し正数として扱う
    18                              <1> ;
    19                              <1> ;■戻り値	: 無し
    20                              <1> ;************************************************************************
    21                              <1> itoa:
    22                              <1> 		;---------------------------------------
    23                              <1> 		; 【スタックフレームの構築】
    24                              <1> 		;---------------------------------------
    25                              <1> 												; ------|--------
    26                              <1> 												;    +24| フラグ
    27                              <1> 												;    +20| 基数
    28                              <1> 												;    +16| バッファサイズ
    29                              <1> 												;    +12| バッファアドレス
    30                              <1> 												;    + 8| 数値
    31                              <1> 												; ------|--------
    32                              <1> 												;    + 4| EIP（戻り番地）
    33 00000E85 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    34 00000E86 89E5                <1> 		mov		ebp, esp						; ------+--------
    35                              <1> 
    36                              <1> 		;---------------------------------------
    37                              <1> 		; 【レジスタの保存】
    38                              <1> 		;---------------------------------------
    39 00000E88 50                  <1> 		push	eax
    40 00000E89 53                  <1> 		push	ebx
    41 00000E8A 51                  <1> 		push	ecx
    42 00000E8B 52                  <1> 		push	edx
    43 00000E8C 56                  <1> 		push	esi
    44 00000E8D 57                  <1> 		push	edi
    45                              <1> 
    46                              <1> 		;---------------------------------------
    47                              <1> 		; 引数を取得
    48                              <1> 		;---------------------------------------
    49 00000E8E 8B4508              <1> 		mov		eax, [ebp + 8]					; val  = 数値;
    50 00000E91 8B750C              <1> 		mov		esi, [ebp +12]					; dst  = バッファアドレス;
    51 00000E94 8B4D10              <1> 		mov		ecx, [ebp +16]					; size = 残りバッファサイズ;
    52                              <1> 
    53 00000E97 89F7                <1> 		mov		edi, esi						; // バッファの最後尾
    54 00000E99 01CF                <1> 		add		edi, ecx						; dst  = &dst[size - 1];
    55 00000E9B 4F                  <1> 		dec		edi								; 
    56                              <1> 
    57 00000E9C 8B5D18              <1> 		mov		ebx, [ebp +24]					; flags = オプション;
    58                              <1> 
    59                              <1> 		;---------------------------------------
    60                              <1> 		; 符号付き判定
    61                              <1> 		;---------------------------------------
    62 00000E9F F7C301000000        <1> 		test	ebx, 0b0001						; if (flags & 0x01)// 符号付き
    63 00000EA5 7408                <1> .10Q:	je		.10E							; {
    64 00000EA7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    65 00000EAA 7D03                <1> .12Q:	jge		.12E							;   {
    66 00000EAC 83CB02              <1> 		or		ebx, 0b0010						;     flags |=  2; // 符号表示
    67                              <1> .12E:											;   }
    68                              <1> .10E:											; }
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 符号出力判定
    72                              <1> 		;---------------------------------------
    73 00000EAF F7C302000000        <1> 		test	ebx, 0b0010						; if (flags & 0x02)// 符号出力判定
    74 00000EB5 7410                <1> .20Q:	je		.20E							; {
    75 00000EB7 83F800              <1> 		cmp		eax, 0							;   if (val < 0)
    76 00000EBA 7D07                <1> .22Q:	jge		.22F							;   {
    77 00000EBC F7D8                <1> 		neg		eax								;     val *= -1;   // 符号反転
    78 00000EBE C6062D              <1> 		mov		[esi], byte '-'					;     *dst = '-';  // 符号表示
    79 00000EC1 EB03                <1> 		jmp		.22E							;   }
    80                              <1> .22F:											;   else
    81                              <1> 												;   {
    82 00000EC3 C6062B              <1> 		mov		[esi], byte '+'					;     *dst = '+';  // 符号表示
    83                              <1> .22E:											;   }
    84 00000EC6 49                  <1> 		dec		ecx								;   size--;        // 残りバッファサイズの減算
    85                              <1> .20E:											; }
    86                              <1> 
    87                              <1> 		;---------------------------------------
    88                              <1> 		; ASCII変換
    89                              <1> 		;---------------------------------------
    90 00000EC7 8B5D14              <1> 		mov		ebx, [ebp +20]					; BX = 基数;
    91                              <1> .30L:											; do
    92                              <1> 												; {
    93 00000ECA BA00000000          <1> 		mov		edx, 0							;   
    94 00000ECF F7F3                <1> 		div		ebx								;   DX = DX:AX % 基数;
    95                              <1> 												;   AX = DX:AX / 基数;
    96                              <1> 												;   
    97 00000ED1 89D6                <1> 		mov		esi, edx						;   // テーブル参照
    98 00000ED3 8A96[FE0E0000]      <1> 		mov		dl, byte [.ascii + esi]			;   DL = ASCII[DX];
    99                              <1> 												;   
   100 00000ED9 8817                <1> 		mov		[edi], dl						;   *dst = DL;
   101 00000EDB 4F                  <1> 		dec		edi								;   dst--;
   102                              <1> 												;   
   103 00000EDC 83F800              <1> 		cmp		eax, 0							;   
   104 00000EDF E0E9                <1> 		loopnz	.30L							; } while (AX);
   105                              <1> .30E:
   106                              <1> 
   107                              <1> 		;---------------------------------------
   108                              <1> 		; 空欄を埋める
   109                              <1> 		;---------------------------------------
   110 00000EE1 83F900              <1> 		cmp		ecx, 0							; if (size)
   111 00000EE4 740E                <1> .40Q:	je		.40E							; {
   112 00000EE6 B020                <1> 		mov		al, ' '							;   AL = ' ';  // ' 'で埋める（デフォルト値）
   113 00000EE8 66837D1804          <1> 		cmp		[ebp +24], word 0b0100			;   if (flags & 0x04)
   114 00000EED 7502                <1> .42Q:	jne		.42E							;   {
   115 00000EEF B030                <1> 		mov		al, '0'							;     AL = '0'; // '0'で埋める
   116                              <1> .42E:											;   }
   117 00000EF1 FD                  <1> 		std										;   // DF = 1（-方向）
   118 00000EF2 F3AA                <1> 		rep stosb								;   while (--CX) *DI-- = ' ';
   119                              <1> .40E:											; }
   120                              <1> 
   121                              <1> 		;---------------------------------------
   122                              <1> 		; 【レジスタの復帰】
   123                              <1> 		;---------------------------------------
   124 00000EF4 5F                  <1> 		pop		edi
   125 00000EF5 5E                  <1> 		pop		esi
   126 00000EF6 5A                  <1> 		pop		edx
   127 00000EF7 59                  <1> 		pop		ecx
   128 00000EF8 5B                  <1> 		pop		ebx
   129 00000EF9 58                  <1> 		pop		eax
   130                              <1> 
   131                              <1> 		;---------------------------------------
   132                              <1> 		; 【スタックフレームの破棄】
   133                              <1> 		;---------------------------------------
   134 00000EFA 89EC                <1> 		mov		esp, ebp
   135 00000EFC 5D                  <1> 		pop		ebp
   136                              <1> 
   137 00000EFD C3                  <1> 		ret
   138                              <1> 
   139 00000EFE 303132333435363738- <1> .ascii	db		"0123456789ABCDEF"				; 変換テーブル
   139 00000F07 39414243444546      <1>
   140                              <1> 
   175                                  %include	"../modules/protect/rtc.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD rtc_get_time(dst);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	dst		: 保存先アドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    10                              <1> ;************************************************************************
    11                              <1> rtc_get_time:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; ------|--------
    16                              <1> 												; EBP+ 8| 保存先アドレス
    17                              <1> 												; ---------------
    18 00000F0E 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    19 00000F0F 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    20                              <1> 												; ---------------
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 00000F11 53                  <1> 		push	ebx
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; RTCから時刻を取得
    28                              <1> 		;---------------------------------------
    29 00000F12 B00A                <1> 		mov		al, 0x0A						; // レジスタA
    30 00000F14 E670                <1> 		out		0x70, al						; outp(0x70, AL);
    31 00000F16 E471                <1> 		in		al, 0x71						; AL = レジスタA;
    32 00000F18 A880                <1> 		test	al, 0x80						; if (DM & UIP) // 更新中
    33 00000F1A 7407                <1> 		je		.10F							; {
    34 00000F1C B801000000          <1> 		mov		eax, 1							;   ret = 1; // データ更新中
    35 00000F21 EB27                <1> 		jmp		.10E							; }
    36                              <1> .10F:											; else
    37                              <1> 												; {
    38                              <1> 												;   // RAM[0x04]:時
    39 00000F23 B004                <1> 		mov		al, 0x04						;   AL = 0x04;
    40 00000F25 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    41 00000F27 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 時データ
    42                              <1> 												;   
    43 00000F29 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    44                              <1> 												;   
    45                              <1> 												;   // RAM[0x02]:分
    46 00000F2C B002                <1> 		mov		al, 0x02						;   AL = 0x02;
    47 00000F2E E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    48 00000F30 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 分データ
    49                              <1> 												;   
    50 00000F32 C1E008              <1> 		shl		eax, 8							;   EAX <<= 8;      // データを退避
    51                              <1> 												;   
    52                              <1> 												;   // RAM[0x00]:秒
    53 00000F35 B000                <1> 		mov		al, 0x00						;   AL = 0x00;
    54 00000F37 E670                <1> 		out		0x70, al						;   outp(0x70, AL);
    55 00000F39 E471                <1> 		in		al, 0x71						;   AL = inp(0x71); // 秒データ
    56                              <1> 												;   
    57 00000F3B 25FFFFFF00          <1> 		and		eax, 0x00_FF_FF_FF				;   // 下位3バイトのみ有効
    58                              <1> 												;   
    59 00000F40 8B5D08              <1> 		mov		ebx, [ebp + 8]					;   dst = 保存先;
    60 00000F43 8903                <1> 		mov		[ebx], eax						;   [dst] = 時刻;
    61                              <1> 												;   
    62 00000F45 B800000000          <1> 		mov		eax, 0							;   ret = 0; // 正常終了
    63                              <1> .10E:											; }
    64                              <1> 
    65                              <1> 		;---------------------------------------
    66                              <1> 		; 【レジスタの復帰】
    67                              <1> 		;---------------------------------------
    68 00000F4A 5B                  <1> 		pop		ebx
    69                              <1> 
    70                              <1> 		;---------------------------------------
    71                              <1> 		; 【スタックフレームの破棄】
    72                              <1> 		;---------------------------------------
    73 00000F4B 89EC                <1> 		mov		esp, ebp
    74 00000F4D 5D                  <1> 		pop		ebp
    75                              <1> 
    76 00000F4E C3                  <1> 		ret
    77                              <1> 
   176                                  %include	"../modules/protect/draw_time.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	時刻の表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_time(col, row, color, time);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	col		: 列
     8                              <1> ;	row		: 行
     9                              <1> ;	color	: 描画色
    10                              <1> ;	time	: 時刻データ
    11                              <1> ;
    12                              <1> ;■戻り値	: 無し
    13                              <1> ;************************************************************************
    14                              <1> draw_time:
    15                              <1> 		;---------------------------------------
    16                              <1> 		; 【スタックフレームの構築】
    17                              <1> 		;---------------------------------------
    18                              <1> 												; ------|--------
    19                              <1> 												; EBP+20| 時刻データ
    20                              <1> 												; EBP+16| 色
    21                              <1> 												; EBP+12| Y（行）
    22                              <1> 												; EBP+ 8| X（列）
    23                              <1> 												; ---------------
    24 00000F4F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    25 00000F50 89E5                <1> 		mov		ebp, esp						; EBP+ 4| EIP（戻り番地）
    26                              <1> 												; ---------------
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの保存】
    29                              <1> 		;---------------------------------------
    30 00000F52 50                  <1> 		push	eax
    31 00000F53 53                  <1> 		push	ebx
    32                              <1> 
    33                              <1> 		;---------------------------------------
    34                              <1> 		; 
    35                              <1> 		;---------------------------------------
    36 00000F54 8B4514              <1> 		mov		eax, [ebp +20]					; EAX = 時刻データ;
    37 00000F57 3B05[D40F0000]      <1> 		cmp		eax, [.last]					; if (今回 != 前回)
    38 00000F5D 7467                <1> 		je		.10E							; {
    39                              <1> 												;   
    40 00000F5F A3[D40F0000]        <1> 		mov		[.last], eax					;   // 前回の時刻値を更新
    41                              <1> 												;   
    42 00000F64 BB00000000          <1> 		mov		ebx, 0							;   EBX = 0;
    43 00000F69 88C3                <1> 		mov		bl, al							;   EBX = 秒;
    44 00000F6B 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .sec, 2, 16, 0b0100	;   // 時刻を文字列に変換
    44 00000F72 [E20F0000]53E809FF- <1>
    44 00000F7A FFFF6683C414        <1>
    45                              <1> 
    46 00000F80 88E3                <1> 		mov		bl, ah							;   EBX = 分;
    47 00000F82 6A046A106A0268-     <1> 		cdecl	itoa, ebx, .min, 2, 16, 0b0100	;   // 時刻を文字列に変換
    47 00000F89 [DF0F0000]53E8F2FE- <1>
    47 00000F91 FFFF6683C414        <1>
    48                              <1> 
    49 00000F97 C1E810              <1> 		shr		eax, 16							;   EBX = 時;
    50 00000F9A 6A046A106A0268-     <1> 		cdecl	itoa, eax, .hour, 2, 16, 0b0100	;   // 時刻を文字列に変換
    50 00000FA1 [DC0F0000]50E8DAFE- <1>
    50 00000FA9 FFFF6683C414        <1>
    51                              <1> 
    52                              <1> 												;   // 時刻を表示
    53 00000FAF 68[DC0F0000]FF7510- <1> 		cdecl	draw_str, dword [ebp + 8], dword [ebp +12], dword [ebp +16], .hour
    53 00000FB7 FF750CFF7508E81BFC- <1>
    53 00000FC0 FFFF6683C410        <1>
    54                              <1> 												;     
    55                              <1> 												;   }
    56                              <1> .10E:											; }
    57                              <1> 
    58                              <1> 		;---------------------------------------
    59                              <1> 		; 【レジスタの復帰】
    60                              <1> 		;---------------------------------------
    61 00000FC6 5B                  <1> 		pop		ebx
    62 00000FC7 58                  <1> 		pop		eax
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 【スタックフレームの破棄】
    66                              <1> 		;---------------------------------------
    67 00000FC8 89EC                <1> 		mov		esp, ebp
    68 00000FCA 5D                  <1> 		pop		ebp
    69                              <1> 
    70 00000FCB C3                  <1> 		ret
    71                              <1> 
    72                              <1> ALIGN 2, db 0
    73 00000FCC 0000000000000000    <1> .temp:	dq	0
    74 00000FD4 0000000000000000    <1> .last:	dq	0
    75 00000FDC 5A5A3A              <1> .hour:	db	"ZZ:"
    76 00000FDF 5A5A3A              <1> .min:	db	"ZZ:"
    77 00000FE2 5A5A00              <1> .sec:	db	"ZZ", 0
   177                                  %include	"../modules/protect/interrupt.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込みベクタの初期化
     3                              <1> ;************************************************************************
     4 00000FE5 90<rept>            <1> ALIGN 4
     5 00000FE8 FF07                <1> IDTR:	dw 		8 * 256 - 1					; idt_limit
     6 00000FEA 00001000            <1> 		dd 		VECT_BASE					; idt location
     7                              <1> 
     8                              <1> ;************************************************************************
     9                              <1> ;	割り込みテーブルを初期化
    10                              <1> ;------------------------------------------------------------------------
    11                              <1> ;	
    12                              <1> ;	まず、全ての割り込みアドレスにデフォルト処理を設定すし、その後、
    13                              <1> ;	必要な割り込みだけ設定しなおす。
    14                              <1> ;	
    15                              <1> ;	割り込みアドレスは、VECT_BASEで指定され、256の割り込みがあるので
    16                              <1> ;	0x0800バイト占有することになる。
    17                              <1> ;	
    18                              <1> ;	           |____________| _V___
    19                              <1> ;	  VECT_BASE| IntDefault |  |   
    20                              <1> ;	           | IntDefault |  | 8 * 256
    21                              <1> ;	           |      :     |  |   
    22                              <1> ;	           |____________| _|___
    23                              <1> ;	      +0800|////////////|
    24                              <1> ;	           |            |
    25                              <1> ;	
    26                              <1> ;	一つの割り込み設定は8バイトで構成される。
    27                              <1> ;	
    28                              <1> ;	           |____________|____________| 
    29                              <1> ;	        [0]| Address Lo[15: 0]       | 
    30                              <1> ;	        [2]| Selector                | 
    31                              <1> ;	        [4]| Flags                   | 
    32                              <1> ;	        [6]|_Address Lo[32:16]_______| 
    33                              <1> ;	           |/////////////////////////| 
    34                              <1> ;	           |            |            | 
    35                              <1> ;	
    36                              <1> ;========================================================================
    37                              <1> ;■書式		: void init_int(void);
    38                              <1> ;
    39                              <1> ;■引数		: 無し
    40                              <1> ;
    41                              <1> ;■戻り値	: 無し
    42                              <1> ;************************************************************************
    43                              <1> init_int:
    44                              <1> 		;---------------------------------------
    45                              <1> 		; 【レジスタの保存】
    46                              <1> 		;---------------------------------------
    47 00000FEE 50                  <1> 		push	eax
    48 00000FEF 53                  <1> 		push	ebx
    49 00000FF0 51                  <1> 		push	ecx
    50 00000FF1 57                  <1> 		push	edi
    51                              <1> 
    52                              <1> 		;---------------------------------------
    53                              <1> 		; 全ての割り込みにデフォルト処理を設定
    54                              <1> 		;---------------------------------------
    55 00000FF2 8D05[38110000]      <1> 		lea		eax, [int_default]				; EAX   = 割り込み処理アドレス;
    56 00000FF8 BB008E0800          <1> 		mov		ebx, 0x0008_8E00				; EBX   = セグメントセレクタ;
    57 00000FFD 6693                <1> 		xchg	ax, bx							; // 下位ワードを交換
    58                              <1> 
    59 00000FFF B900010000          <1> 		mov		ecx, 256						; ECX   = 割り込みベクタ数
    60 00001004 BF00001000          <1> 		mov		edi, VECT_BASE					; EDI   = 割り込みベクタテーブル
    61                              <1> 
    62                              <1> .10L:											; do
    63                              <1> 												; {
    64 00001009 891F                <1> 		mov		[edi + 0], ebx					;   [EDI + 0] = 割り込みディスクリプタ（下位）
    65 0000100B 894704              <1> 		mov		[edi + 4], eax					;   [EDI + 4] = 割り込みディスクリプタ（上位）
    66 0000100E 83C708              <1> 		add		edi, 8							;   EDI += 8;
    67 00001011 E2F6                <1> 		loop	.10L							; } while (ECX--);
    68                              <1> 
    69                              <1> 		;---------------------------------------
    70                              <1> 		; 割り込みディスクリプタの設定
    71                              <1> 		;---------------------------------------
    72 00001013 0F011D[E80F0000]    <1> 		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
    73                              <1> 
    74                              <1> 		;---------------------------------------
    75                              <1> 		; 【レジスタの復帰】
    76                              <1> 		;---------------------------------------
    77 0000101A 5F                  <1> 		pop		edi
    78 0000101B 59                  <1> 		pop		ecx
    79 0000101C 5B                  <1> 		pop		ebx
    80 0000101D 58                  <1> 		pop		eax
    81                              <1> 
    82 0000101E C3                  <1> 		ret
    83                              <1> 
    84                              <1> ;************************************************************************
    85                              <1> ;	スタックの内容を表示して無限ループを実行
    86                              <1> ;************************************************************************
    87                              <1> int_stop:
    88 0000101F FB                  <1> 		sti										; // 割り込み許可
    89                              <1> 
    90                              <1> 		;---------------------------------------
    91                              <1> 		; EAXで示される文字列を表示
    92                              <1> 		;---------------------------------------
    93 00001020 50680F0600006A0F6A- <1> 		cdecl	draw_str, 25, 15, 0x060F, eax	; draw_str(EAX);
    93 00001029 19E8AEFBFFFF6683C4- <1>
    93 00001032 10                  <1>
    94                              <1> 
    95                              <1> 		;---------------------------------------
    96                              <1> 		; スタックのデータを文字列に変換
    97                              <1> 		;---------------------------------------
    98 00001033 8B0424              <1> 		mov		eax, [esp + 0]					; EAX = ESP[ 0];
    99 00001036 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p1, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
    99 0000103D [FB100000]50E83EFE- <1>
    99 00001045 FFFF6683C414        <1>
   100                              <1> 
   101 0000104B 8B442404            <1> 		mov		eax, [esp + 4]					; EAX = ESP[ 4];
   102 0000104F 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p2, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   102 00001056 [0C110000]50E825FE- <1>
   102 0000105E FFFF6683C414        <1>
   103                              <1> 
   104 00001064 8B442408            <1> 		mov		eax, [esp + 8]					; EAX = ESP[ 8];
   105 00001068 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p3, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   105 0000106F [1D110000]50E80CFE- <1>
   105 00001077 FFFF6683C414        <1>
   106                              <1> 
   107 0000107D 8B44240C            <1> 		mov		eax, [esp +12]					; EAX = ESP[12];
   108 00001081 6A046A106A0868-     <1> 		cdecl	itoa, eax, .p4, 8, 16, 0b0100	; itoa(EAX, 8, 16, 0b0100);
   108 00001088 [2E110000]50E8F3FD- <1>
   108 00001090 FFFF6683C414        <1>
   109                              <1> 
   110                              <1> 		;---------------------------------------
   111                              <1> 		; 文字列の表示
   112                              <1> 		;---------------------------------------
   113 00001096 68[F4100000]68040F- <1> 		cdecl	draw_str, 25, 16, 0x0F04, .s1	; draw_str("ESP+ 0:-------- ");
   113 0000109E 00006A106A19E834FB- <1>
   113 000010A7 FFFF6683C410        <1>
   114 000010AD 68[05110000]68040F- <1> 		cdecl	draw_str, 25, 17, 0x0F04, .s2	; draw_str("   + 4:-------- ");
   114 000010B5 00006A116A19E81DFB- <1>
   114 000010BE FFFF6683C410        <1>
   115 000010C4 68[16110000]68040F- <1> 		cdecl	draw_str, 25, 18, 0x0F04, .s3	; draw_str("   + 8:-------- ");
   115 000010CC 00006A126A19E806FB- <1>
   115 000010D5 FFFF6683C410        <1>
   116 000010DB 68[27110000]68040F- <1> 		cdecl	draw_str, 25, 19, 0x0F04, .s4	; draw_str("   +12:-------- ");
   116 000010E3 00006A136A19E8EFFA- <1>
   116 000010EC FFFF6683C410        <1>
   117                              <1> 
   118                              <1> 		;---------------------------------------
   119                              <1> 		; 無限ループ
   120                              <1> 		;---------------------------------------
   121 000010F2 EBFE                <1> 		jmp		$								; while (1) ; // 無限ループ
   122                              <1> 
   123 000010F4 4553502B20303A      <1> .s1		db	"ESP+ 0:"
   124 000010FB 5F5F5F5F5F5F5F5F20- <1> .p1		db	"________ ", 0
   124 00001104 00                  <1>
   125 00001105 2020202B20343A      <1> .s2		db	"   + 4:"
   126 0000110C 5F5F5F5F5F5F5F5F20- <1> .p2		db	"________ ", 0
   126 00001115 00                  <1>
   127 00001116 2020202B20383A      <1> .s3		db	"   + 8:"
   128 0000111D 5F5F5F5F5F5F5F5F20- <1> .p3		db	"________ ", 0
   128 00001126 00                  <1>
   129 00001127 2020202B31323A      <1> .s4		db	"   +12:"
   130 0000112E 5F5F5F5F5F5F5F5F20- <1> .p4		db	"________ ", 0
   130 00001137 00                  <1>
   131                              <1> 
   132                              <1> ;************************************************************************
   133                              <1> ;	割り込み処理：デフォルトの処理
   134                              <1> ;************************************************************************
   135                              <1> int_default:
   136 00001138 9C                  <1> 		pushf									; // EFLAGS(IF==0)
   137 00001139 0E                  <1> 		push	cs								; // CS
   138 0000113A 68[1F100000]        <1> 		push	int_stop						; // スタック表示処理
   139                              <1> 
   140 0000113F B8[45110000]        <1> 		mov		eax, .s0						; // 割り込み種別
   141 00001144 CF                  <1> 		iret
   142                              <1> 
   143 00001145 203C2020202053544F- <1> .s0		db	" <    STOP    > ", 0
   143 0000114E 50202020203E2000    <1>
   144                              <1> 
   145                              <1> ;************************************************************************
   146                              <1> ;	割り込み処理：ゼロ除算
   147                              <1> ;************************************************************************
   148                              <1> int_zero_div:
   149 00001156 9C                  <1> 		pushf									; // EFLAGS
   150 00001157 0E                  <1> 		push	cs								; // CS
   151 00001158 68[1F100000]        <1> 		push	int_stop						; // スタック表示処理
   152                              <1> 
   153 0000115D B8[63110000]        <1> 		mov		eax, .s0						; // 割り込み種別
   154 00001162 CF                  <1> 		iret
   155                              <1> 
   156 00001163 203C20205A45524F20- <1> .s0		db	" <  ZERO DIV  > ", 0
   156 0000116C 44495620203E2000    <1>
   157                              <1> 
   178                                  %include	"../modules/protect/pic.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込みコントローラの初期化
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void init_pic(void);
     5                              <1> ;
     6                              <1> ;■引数		: 無し
     7                              <1> ;
     8                              <1> ;■戻り値	: 無し
     9                              <1> ;************************************************************************
    10                              <1> init_pic:
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 【レジスタの保存】
    13                              <1> 		;---------------------------------------
    14 00001174 50                  <1> 		push	eax
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; マスタPICの設定
    18                              <1> 		;---------------------------------------
    19                              <1> 		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
    19 00001175 B011                <2>  mov al, %2
    19 00001177 E620                <2>  out %1, al
    20                              <1> 		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
    20 00001179 B020                <2>  mov al, %2
    20 0000117B E621                <2>  out %1, al
    21                              <1> 		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
    21 0000117D B004                <2>  mov al, %2
    21 0000117F E621                <2>  out %1, al
    22                              <1> 		outp	0x21, 0x05						; // MASTER.ICW4 = 0x05;
    22 00001181 B005                <2>  mov al, %2
    22 00001183 E621                <2>  out %1, al
    23                              <1> 		outp	0x21, 0xFF						; // マスタ割り込みマスク
    23 00001185 B0FF                <2>  mov al, %2
    23 00001187 E621                <2>  out %1, al
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; スレーブPICの設定
    27                              <1> 		;---------------------------------------
    28                              <1> 		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
    28 00001189 B011                <2>  mov al, %2
    28 0000118B E6A0                <2>  out %1, al
    29                              <1> 		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
    29 0000118D B028                <2>  mov al, %2
    29 0000118F E6A1                <2>  out %1, al
    30                              <1> 		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
    30 00001191 B002                <2>  mov al, %2
    30 00001193 E6A1                <2>  out %1, al
    31                              <1> 		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
    31 00001195 B001                <2>  mov al, %2
    31 00001197 E6A1                <2>  out %1, al
    32                              <1> 		outp	0xA1, 0xFF						; // スレーブ割り込みマスク
    32 00001199 B0FF                <2>  mov al, %2
    32 0000119B E6A1                <2>  out %1, al
    33                              <1> 
    34                              <1> 		;---------------------------------------
    35                              <1> 		; 【レジスタの復帰】
    36                              <1> 		;---------------------------------------
    37 0000119D 58                  <1> 		pop		eax
    38                              <1> 
    39 0000119E C3                  <1> 		ret
    40                              <1> 
   179                                  %include	"../modules/protect/int_rtc.s"
     1                              <1> rtc_int_en:
     2                              <1> 		;---------------------------------------
     3                              <1> 		; 【スタックフレームの構築】
     4                              <1> 		;---------------------------------------
     5                              <1> 												; ------|--------
     6                              <1> 												;    + 8| ビット
     7                              <1> 												; ------|--------
     8                              <1> 												;    + 4| EIP（戻り番地）
     9 0000119F 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    10 000011A0 89E5                <1> 		mov		ebp, esp						; ------+--------
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【レジスタの保存】
    14                              <1> 		;---------------------------------------
    15 000011A2 50                  <1> 		push	eax
    16                              <1> 
    17                              <1> 		;---------------------------------------
    18                              <1> 		; 割り込み許可設定
    19                              <1> 		;---------------------------------------
    20                              <1> 		outp	0x70, 0x0B						; outp(0x70, AL);   // レジスタBを選択
    20 000011A3 B00B                <2>  mov al, %2
    20 000011A5 E670                <2>  out %1, al
    21                              <1> 
    22 000011A7 E471                <1> 		in		al, 0x71						; AL  = port(0x71); // レジスタBの
    23 000011A9 0A4508              <1> 		or		al, [ebp + 8]					; AL |= ビット;     // 指定されたビットをセット
    24                              <1> 
    25 000011AC E671                <1> 		out		0x71, al						; outp(0x71, AL);   // レジスタBに書き込み
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; 【レジスタの復帰】
    29                              <1> 		;---------------------------------------
    30 000011AE 58                  <1> 		pop		eax
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 【スタックフレームの破棄】
    34                              <1> 		;---------------------------------------
    35 000011AF 89EC                <1> 		mov		esp, ebp
    36 000011B1 5D                  <1> 		pop		ebp
    37                              <1> 
    38 000011B2 C3                  <1> 		ret 
    39                              <1> 
    40                              <1> int_rtc:
    41 000011B3 60                  <1>         pusha
    42 000011B4 1E                  <1>         push    ds
    43 000011B5 06                  <1>         push    es
    44                              <1> 
    45 000011B6 66B81000            <1>         mov     ax, 0x0010      ; データ用セグメントセレクタの設定
    46 000011BA 8ED8                <1>         mov     ds, ax
    47 000011BC 8EC0                <1>         mov     es, ax
    48                              <1> 
    49 000011BE 68[54020000]E846FD- <1>         cdecl   rtc_get_time, RTC_TIME      ; get_time
    49 000011C6 FFFF6683C404        <1>
    50                              <1> 
    51                              <1>         outp    0x70, 0x0C      
    51 000011CC B00C                <2>  mov al, %2
    51 000011CE E670                <2>  out %1, al
    52 000011D0 E471                <1>         in      al, 0x71
    53                              <1> 
    54                              <1> 		;---------------------------------------
    55                              <1> 		; 割り込みフラグをクリア(EOI)
    56                              <1> 		;---------------------------------------
    57                              <1> 		outp	0xA0, 0x20						; outp(0xA0, EOI); // スレーブPIC
    57 000011D2 B020                <2>  mov al, %2
    57 000011D4 E6A0                <2>  out %1, al
    58                              <1> 		outp	0x20, 0x20						; outp(0x20, EOI); // マスタPIC
    58 000011D6 B020                <2>  mov al, %2
    58 000011D8 E620                <2>  out %1, al
    59                              <1> 
    60                              <1>         		;---------------------------------------
    61                              <1> 		; 【レジスタの復帰】
    62                              <1> 		;---------------------------------------
    63 000011DA 07                  <1> 		pop		es								; 
    64 000011DB 1F                  <1> 		pop		ds								; 
    65 000011DC 61                  <1> 		popa									; 
    66                              <1> 
    67 000011DD CF                  <1> 		iret									; 割り込み処理の終了
   180                                  %include	"../modules/protect/int_keyboard.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込み処理：キーボード
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	KBC（キーボードコントローラ）からキーコードを取得して、
     5                              <1> ;	専用のリングバッファに保存する。
     6                              <1> ;************************************************************************
     7                              <1> int_keyboard:
     8                              <1> 		;---------------------------------------
     9                              <1> 		; 【レジスタの保存】
    10                              <1> 		;---------------------------------------
    11 000011DE 60                  <1> 		pusha
    12 000011DF 1E                  <1> 		push	ds
    13 000011E0 06                  <1> 		push	es
    14                              <1> 
    15                              <1> 		;---------------------------------------
    16                              <1> 		; データ用セグメントの設定
    17                              <1> 		;---------------------------------------
    18 000011E1 66B81000            <1> 		mov		ax, 0x0010						; 
    19 000011E5 8ED8                <1> 		mov		ds, ax							; 
    20 000011E7 8EC0                <1> 		mov		es, ax							; 
    21                              <1> 
    22                              <1> 		;---------------------------------------
    23                              <1> 		; KBCのバッファ読み取り
    24                              <1> 		;---------------------------------------
    25 000011E9 E460                <1> 		in		al, 0x60						; AL = キーコードの取得
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; キーコードの保存
    29                              <1> 		;---------------------------------------
    30 000011EB 5068[04120000]E856- <1> 		cdecl	ring_wr, _KEY_BUFF, eax			; ring_wr(_KEY_BUFF, EAX); // キーコードの保存
    30 000011F3 0000006683C408      <1>
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 割り込み終了コマンド送信
    34                              <1> 		;---------------------------------------
    35                              <1> 		outp	0x20, 0x20						; outp(); // マスタPIC:EOIコマンド
    35 000011FA B020                <2>  mov al, %2
    35 000011FC E620                <2>  out %1, al
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 【レジスタの復帰】
    39                              <1> 		;---------------------------------------
    40 000011FE 07                  <1> 		pop		es								; 
    41 000011FF 1F                  <1> 		pop		ds								; 
    42 00001200 61                  <1> 		popa
    43                              <1> 
    44 00001201 CF                  <1> 		iret									; 割り込みからの復帰
    45                              <1> 
    46 00001202 00<rept>            <1> ALIGN 4, db 0
    47 00001204 00<rept>            <1> _KEY_BUFF:	times ring_buff_size db 0
    48                              <1> 
   181                                  %include	"../modules/protect/ring_buff.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	リングバッファからデータを取得
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: DWORD ring_rd(buff, data);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	buff	: リングバッファ
     8                              <1> ;	data	: 読み込んだデータの保存先アドレス
     9                              <1> ;
    10                              <1> ;■戻り値	: データあり(0以外)、データ無し(0)
    11                              <1> ;************************************************************************
    12                              <1> ring_rd:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【スタックフレームの構築】
    15                              <1> 		;---------------------------------------
    16                              <1> 												; ------|--------
    17                              <1> 												;    +12| リングデータ
    18                              <1> 												;    + 8| データアドレス
    19                              <1> 												; ------|--------
    20                              <1> 												;    + 4| EIP（戻り番地）
    21 0000121C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    22 0000121D 89E5                <1> 		mov		ebp, esp						; ------+--------
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 【レジスタの保存】
    26                              <1> 		;---------------------------------------
    27 0000121F 53                  <1> 		push	ebx
    28 00001220 56                  <1> 		push	esi
    29 00001221 57                  <1> 		push	edi
    30                              <1> 
    31                              <1> 		;---------------------------------------
    32                              <1> 		; 引数を取得
    33                              <1> 		;---------------------------------------
    34 00001222 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
    35 00001225 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = データアドレス;
    36                              <1> 
    37                              <1> 		;---------------------------------------
    38                              <1> 		; 読み込み位置を確認
    39                              <1> 		;---------------------------------------
    40 00001228 B800000000          <1> 		mov		eax, 0							; EAX = 0;          // データ無し
    41 0000122D 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;         // 読み込み位置
    42 0000122F 3B5E04              <1> 		cmp		ebx, [esi + ring_buff.wp]		; if (EBX != wp)    // 書き込み位置と異なる
    43 00001232 7411                <1> 		je		.10E							; {
    44                              <1> 												;   
    45 00001234 8A441E08            <1> 		mov		al, [esi + ring_buff.item + ebx] ;   AL = BUFF[rp]; // キーコードを保存
    46                              <1> 												;   
    47 00001238 8807                <1> 		mov		[edi], al						;   [EDI] = AL;     // データを保存
    48                              <1> 												;   
    49 0000123A 43                  <1> 		inc		ebx								;   EBX++;          // 次の読み込み位置
    50 0000123B 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= 0x0F     // サイズの制限
    51 0000123E 891E                <1> 		mov		[esi + ring_buff.rp], ebx		;   rp = EBX;       // 読み込み位置を保存
    52                              <1> 												;   
    53 00001240 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // データあり
    54                              <1> .10E:											; }
    55                              <1> 
    56                              <1> 		;---------------------------------------
    57                              <1> 		; 【レジスタの復帰】
    58                              <1> 		;---------------------------------------
    59 00001245 5F                  <1> 		pop		edi
    60 00001246 5E                  <1> 		pop		esi
    61 00001247 5B                  <1> 		pop		ebx
    62                              <1> 
    63                              <1> 		;---------------------------------------
    64                              <1> 		; 【スタックフレームの破棄】
    65                              <1> 		;---------------------------------------
    66 00001248 89EC                <1> 		mov		esp, ebp
    67 0000124A 5D                  <1> 		pop		ebp
    68                              <1> 
    69 0000124B C3                  <1> 		ret
    70                              <1> 
    71                              <1> ;************************************************************************
    72                              <1> ;	リングバッファにデータを格納
    73                              <1> ;========================================================================
    74                              <1> ;■書式		: DWORD ring_wr(buff, data);
    75                              <1> ;
    76                              <1> ;■引数
    77                              <1> ;	buff	: リングバッファ
    78                              <1> ;	data	: 書き込むデータ
    79                              <1> ;
    80                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    81                              <1> ;************************************************************************
    82                              <1> ring_wr:
    83                              <1> 		;---------------------------------------
    84                              <1> 		; 【スタックフレームの構築】
    85                              <1> 		;---------------------------------------
    86                              <1> 												; ------|--------
    87                              <1> 												;    +12| リングデータ
    88                              <1> 												;    + 8| データ
    89                              <1> 												; ------|--------
    90                              <1> 												;    + 4| EIP（戻り番地）
    91 0000124C 55                  <1> 		push	ebp								; EBP+ 0| EBP（元の値）
    92 0000124D 89E5                <1> 		mov		ebp, esp						; ------+--------
    93                              <1> 
    94                              <1> 		;---------------------------------------
    95                              <1> 		; 【レジスタの保存】
    96                              <1> 		;---------------------------------------
    97 0000124F 53                  <1> 		push	ebx
    98 00001250 51                  <1> 		push	ecx
    99 00001251 56                  <1> 		push	esi
   100                              <1> 
   101                              <1> 		;---------------------------------------
   102                              <1> 		; 引数を取得
   103                              <1> 		;---------------------------------------
   104 00001252 8B7508              <1> 		mov		esi, [ebp + 8]					; ESI = リングバッファ;
   105                              <1> 
   106                              <1> 		;---------------------------------------
   107                              <1> 		; 書き込み位置を確認
   108                              <1> 		;---------------------------------------
   109 00001255 B800000000          <1> 		mov		eax, 0							; EAX  = 0;         // 失敗
   110 0000125A 8B5E04              <1> 		mov		ebx, [esi + ring_buff.wp]		; EBX  = wp;        // 書き込み位置
   111 0000125D 89D9                <1> 		mov		ecx, ebx						; ECX  = EBX;
   112 0000125F 41                  <1> 		inc		ecx								; ECX++;            // 次の書き込み位置
   113 00001260 83E10F              <1> 		and		ecx, RING_INDEX_MASK			; ECX &= 0x0F       // サイズの制限
   114                              <1> 												; 
   115 00001263 3B0E                <1> 		cmp		ecx, [esi + ring_buff.rp]		; if (ECX != rp)    // 読み込み位置と異なる
   116 00001265 740F                <1> 		je		.10E							; {
   117                              <1> 												; 
   118 00001267 8A450C              <1> 		mov		al, [ebp +12]					;   AL = データ;
   119                              <1> 												; 
   120 0000126A 88441E08            <1> 		mov		[esi + ring_buff.item + ebx], al ;   BUFF[wp] = AL; // キーコードを保存
   121 0000126E 894E04              <1> 		mov		[esi + ring_buff.wp], ecx		;   wp = ECX;       // 書き込み位置を保存
   122 00001271 B801000000          <1> 		mov		eax, 1							;   EAX = 1;        // 成功
   123                              <1> .10E:											; }
   124                              <1> 
   125                              <1> 		;---------------------------------------
   126                              <1> 		; 【レジスタの復帰】
   127                              <1> 		;---------------------------------------
   128 00001276 5E                  <1> 		pop		esi
   129 00001277 59                  <1> 		pop		ecx
   130 00001278 5B                  <1> 		pop		ebx
   131                              <1> 
   132                              <1> 		;---------------------------------------
   133                              <1> 		; 【スタックフレームの破棄】
   134                              <1> 		;---------------------------------------
   135 00001279 89EC                <1> 		mov		esp, ebp
   136 0000127B 5D                  <1> 		pop		ebp
   137                              <1> 
   138 0000127C C3                  <1> 		ret
   139                              <1> 
   140                              <1> ;************************************************************************
   141                              <1> ;	リングバッファ内要素の表示
   142                              <1> ;========================================================================
   143                              <1> ;■書式		: void ring_show(col, row, buff);
   144                              <1> ;
   145                              <1> ;■引数
   146                              <1> ;	col		: 列
   147                              <1> ;	row		: 行
   148                              <1> ;	buff	: リングバッファ
   149                              <1> ;
   150                              <1> ;■戻り値	: 無し
   151                              <1> ;************************************************************************
   152                              <1> draw_key:
   153                              <1> 		;---------------------------------------
   154                              <1> 		; 【スタックフレームの構築】
   155                              <1> 		;---------------------------------------
   156                              <1> 												; ------|--------
   157                              <1> 												; EBP+16| リングバッファ
   158                              <1> 												; EBP+12| Y（行）
   159                              <1> 												; EBP+ 8| X（列）
   160                              <1> 												; ------|--------
   161 0000127D 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
   162 0000127E 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   163                              <1> 												; ------|--------
   164                              <1> 
   165                              <1> 		;---------------------------------------
   166                              <1> 		; 【レジスタの保存】
   167                              <1> 		;---------------------------------------
   168 00001280 60                  <1> 		pusha
   169                              <1> 
   170                              <1> 		;---------------------------------------
   171                              <1> 		; 引数を取得
   172                              <1> 		;---------------------------------------
   173 00001281 8B5508              <1> 		mov		edx, [ebp + 8]					; EDX = X（列）;
   174 00001284 8B7D0C              <1> 		mov		edi, [ebp +12]					; EDI = Y（行）;
   175 00001287 8B7510              <1> 		mov		esi, [ebp +16]					; ESI = リングバッファ;
   176                              <1> 
   177                              <1> 		;---------------------------------------
   178                              <1> 		; リングバッファの情報を取得
   179                              <1> 		;---------------------------------------
   180 0000128A 8B1E                <1> 		mov		ebx, [esi + ring_buff.rp]		; EBX = rp;             // 読み込み位置
   181 0000128C 8D7608              <1> 		lea		esi, [esi + ring_buff.item]		; ESI = &KEY_BUFF[EBX];
   182 0000128F B910000000          <1> 		mov		ecx, RING_ITEM_SIZE				; ECX = RING_ITEM_SIZE; // 要素数
   183                              <1> 
   184                              <1> 		;---------------------------------------
   185                              <1> 		; 文字に変換しながら表示
   186                              <1> 		;---------------------------------------
   187                              <1> .10L:											; do
   188                              <1> 												; {
   189 00001294 4B                  <1> 		dec		ebx								;   EBX--; // 読み込み位置
   190 00001295 83E30F              <1> 		and		ebx, RING_INDEX_MASK			;   EBX &= RING_INDEX_MASK;
   191 00001298 8A041E              <1> 		mov		al, [esi + ebx]					;   EAX  = KEY_BUFF[EBX];
   192                              <1> 												;   
   193 0000129B 6A046A106A0268-     <1> 		cdecl	itoa, eax, .tmp, 2, 16, 0b0100	;   // キーコードを文字列に変換
   193 000012A2 [CC120000]50E8D9FB- <1>
   193 000012AA FFFF6683C414        <1>
   194 000012B0 68[CC120000]6A0257- <1> 		cdecl	draw_str, edx, edi, 0x02, .tmp	;   // 変換した文字列を表示
   194 000012B8 52E81FF9FFFF6683C4- <1>
   194 000012C1 10                  <1>
   195                              <1> 												;   
   196 000012C2 83C203              <1> 		add		edx, 3							;   // 表示位置を更新（3文字分）
   197                              <1> 												;   
   198 000012C5 E2CD                <1> 		loop	.10L							;   
   199                              <1> .10E:											; } while (ECX--);
   200                              <1> 
   201                              <1> 		;---------------------------------------
   202                              <1> 		; 【レジスタの復帰】
   203                              <1> 		;---------------------------------------
   204 000012C7 61                  <1> 		popa
   205                              <1> 
   206                              <1> 		;---------------------------------------
   207                              <1> 		; 【スタックフレームの破棄】
   208                              <1> 		;---------------------------------------
   209 000012C8 89EC                <1> 		mov		esp, ebp
   210 000012CA 5D                  <1> 		pop		ebp
   211                              <1> 
   212 000012CB C3                  <1> 		ret
   213                              <1> 
   214 000012CC 2D2D2000            <1> .tmp	db "-- ", 0
   215                              <1> 
   182                                  %include	"../modules/protect/timer.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	タイマーの設定
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	タイマー（カウンタ0）割り込み許可
     5                              <1> ;========================================================================
     6                              <1> ;■書式		: void int_en_timer0(void);
     7                              <1> ;
     8                              <1> ;■引数		: 無し
     9                              <1> ;
    10                              <1> ;■戻り値	: 無し
    11                              <1> ;************************************************************************
    12                              <1> int_en_timer0:
    13                              <1> 		;---------------------------------------
    14                              <1> 		; 【レジスタの保存】
    15                              <1> 		;---------------------------------------
    16 000012D0 50                  <1> 		push	eax
    17                              <1> 
    18                              <1> 		;---------------------------------------
    19                              <1> 		;	8254 Timer
    20                              <1> 		;	0x2e9c(11932)=10[ms] @ CLK=1,193,182[Hz]
    21                              <1> 		;---------------------------------------
    22                              <1> 		 outp	 0x43, 0b_00_11_010_0			; // カウンタ0, 下位/上位で書き込み, モード2, バイナリ
    22 000012D1 B034                <2>  mov al, %2
    22 000012D3 E643                <2>  out %1, al
    23                              <1> 		 outp	 0x40, 0x9C						; // 下位バイト
    23 000012D5 B09C                <2>  mov al, %2
    23 000012D7 E640                <2>  out %1, al
    24                              <1> 		 outp	 0x40, 0x2E						; // 上位バイト
    24 000012D9 B02E                <2>  mov al, %2
    24 000012DB E640                <2>  out %1, al
    25                              <1> 
    26                              <1> 		;---------------------------------------
    27                              <1> 		; 【レジスタの復帰】
    28                              <1> 		;---------------------------------------
    29 000012DD 58                  <1> 		pop		eax
    30                              <1> 
    31 000012DE C3                  <1> 		ret
    32                              <1> 
   183                                  %include	"../modules/protect/draw_rotation_bar.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	画面左下に、回転する棒を表示
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void draw_rotation_bar(void);
     5                              <1> ;
     6                              <1> ;■引数		: 無し
     7                              <1> ;
     8                              <1> ;■戻り値	: 無し
     9                              <1> ;************************************************************************
    10                              <1> draw_rotation_bar:
    11                              <1> 		;---------------------------------------
    12                              <1> 		; 【レジスタの保存】
    13                              <1> 		;---------------------------------------
    14 000012DF 50                  <1> 		push	eax
    15                              <1> 
    16                              <1> 		;---------------------------------------
    17                              <1> 		; タイマー割り込みカウンタを確認
    18                              <1> 		;---------------------------------------
    19 000012E0 A1[F8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX  = タイマー割り込みカウンタ
    20 000012E5 C1E804              <1> 		shr		eax, 4							; EAX /= 4;    // 16で除算
    21 000012E8 3B05[10130000]      <1> 		cmp		eax, [.index]					; if (EAX != 前回値)
    22 000012EE 741E                <1> 		je		.10E							; {
    23                              <1> 												;   
    24 000012F0 A3[10130000]        <1> 		mov		[.index], eax					;   前回値 = EAX;
    25 000012F5 83E003              <1> 		and		eax, 0x03						;   EAX &= 0x03; // 0～3に限定
    26                              <1> 												;   
    27 000012F8 8A80[14130000]      <1> 		mov		al, [.table + eax]				;   AL = table[index];
    28 000012FE 506A0F6A1D6A00E8AD- <1> 		cdecl	draw_char, 0, 29, 0x000F, eax	;   draw_char(); // 文字を表示
    28 00001307 F7FFFF6683C410      <1>
    29                              <1> 												;   
    30                              <1> .10E:											; }
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 【レジスタの復帰】
    34                              <1> 		;---------------------------------------
    35 0000130E 58                  <1> 		pop		eax
    36                              <1> 
    37 0000130F C3                  <1> 		ret
    38                              <1> 
    39                              <1> ALIGN 4, db 0
    40 00001310 00000000            <1> .index:		dd 0								; 前回値
    41 00001314 7C2F2D5C            <1> .table:		db	"|/-\"							; 表示キャラクタ
   184                                  %include	"../modules/protect/call_gate.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	コールゲート関数
     3                              <1> ;************************************************************************
     4                              <1> call_gate:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【スタックフレームの構築】
     7                              <1> 		;---------------------------------------
     8                              <1> 												; ------|--------
     9                              <1> 												; EBP+12| X（列）
    10                              <1> 												; EBP+16| Y（行）
    11                              <1> 												; EBP+20| 色
    12                              <1> 												; EBP+24| 文字
    13                              <1> 												; ---------------
    14                              <1> 												; EBP+ 8| CS（コードセグメント）
    15 00001318 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    16 00001319 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    17                              <1> 												; ---------------
    18                              <1> 		;---------------------------------------
    19                              <1> 		; 【レジスタの保存】
    20                              <1> 		;---------------------------------------
    21 0000131B 60                  <1> 		pusha
    22 0000131C 1E                  <1> 		push	ds
    23 0000131D 06                  <1> 		push	es
    24                              <1> 
    25                              <1> 		;---------------------------------------
    26                              <1> 		; データ用セグメントの設定
    27                              <1> 		;---------------------------------------
    28 0000131E 66B81000            <1> 		mov		ax, 0x0010						; 
    29 00001322 8ED8                <1> 		mov		ds, ax							; 
    30 00001324 8EC0                <1> 		mov		es, ax							; 
    31                              <1> 
    32                              <1> 		;---------------------------------------
    33                              <1> 		; 文字を表示
    34                              <1> 		;---------------------------------------
    35 00001326 8B450C              <1> 		mov		eax, dword [ebp +12]			; EAX = X（列）;
    36 00001329 8B5D10              <1> 		mov		ebx, dword [ebp +16]			; EBX = Y（行）;
    37 0000132C 8B4D14              <1> 		mov		ecx, dword [ebp +20]			; ECX = 色;
    38 0000132F 8B5518              <1> 		mov		edx, dword [ebp +24]			; EDX = 文字;
    39 00001332 52515350E8A2F8FFFF- <1> 		cdecl	draw_str, eax, ebx , ecx, edx	; draw_str();
    39 0000133B 6683C410            <1>
    40                              <1> 
    41                              <1> 		;---------------------------------------
    42                              <1> 		; 【レジスタの復帰】
    43                              <1> 		;---------------------------------------
    44 0000133F 07                  <1> 		pop		es								; 
    45 00001340 1F                  <1> 		pop		ds								; 
    46 00001341 61                  <1> 		popa									; 
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; 【スタックフレームの破棄】
    50                              <1> 		;---------------------------------------
    51 00001342 89EC                <1> 		mov		esp, ebp
    52 00001344 5D                  <1> 		pop		ebp
    53                              <1> 
    54 00001345 CA1000              <1> 		retf	4 * 4
    55                              <1> 
   185                                  %include	"../modules/protect/trap_gate.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	システムコール：1文字出力
     3                              <1> ;************************************************************************
     4                              <1> trap_gate_81:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 1文字出力
     7                              <1> 		;---------------------------------------
     8 00001348 50535251E866F7FFFF- <1> 		cdecl	draw_char, ecx, edx, ebx, eax	; // 1文字出力
     8 00001351 6683C410            <1>
     9                              <1> 
    10 00001355 CF                  <1> 		iret
    11                              <1> 
    12                              <1> ;************************************************************************
    13                              <1> ;	システムコール：点の描画
    14                              <1> ;************************************************************************
    15                              <1> trap_gate_82:
    16                              <1> 		;---------------------------------------
    17                              <1> 		; 点の描画
    18                              <1> 		;---------------------------------------
    19 00001356 535251E837F9FFFF66- <1> 		cdecl	draw_pixel, ecx, edx, ebx		; // 点の描画
    19 0000135F 83C40C              <1>
    20                              <1> 
    21 00001362 CF                  <1> 		iret
    22                              <1> 
   186                                  %include	"../modules/protect/test_and_set.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	RTCから時刻データを取得する
     3                              <1> ;========================================================================
     4                              <1> ;■書式		: void test_and_set(local);
     5                              <1> ;
     6                              <1> ;■引数
     7                              <1> ;	local	: ローカル変数のアドレス
     8                              <1> ;
     9                              <1> ;■戻り値	: 無し
    10                              <1> ;************************************************************************
    11                              <1> test_and_set:
    12                              <1> 		;---------------------------------------
    13                              <1> 		; 【スタックフレームの構築】
    14                              <1> 		;---------------------------------------
    15                              <1> 												; EBP+ 8| ローカル変数のアドレス
    16                              <1> 												; ------+----------------
    17 00001363 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    18 00001364 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    19                              <1> 												; ------+----------------
    20                              <1> 
    21                              <1> 		;---------------------------------------
    22                              <1> 		; 【レジスタの保存】
    23                              <1> 		;---------------------------------------
    24 00001366 50                  <1> 		push	eax
    25 00001367 53                  <1> 		push	ebx
    26                              <1> 
    27                              <1> 		;---------------------------------------
    28                              <1> 		; テストアンドセット
    29                              <1> 		;---------------------------------------
    30 00001368 B800000000          <1> 		mov		eax, 0							; local  = 0;
    31 0000136D 8B5D08              <1> 		mov		ebx, [ebp + 8]					; global = アドレス;
    32                              <1> 
    33                              <1> .10L:											; for ( ; ; )
    34                              <1> 												; {
    35 00001370 F00FAB03            <1> 		lock bts [ebx], eax						;   CF = TEST_AND_SET(IN_USE, 1);
    36 00001374 7307                <1> 		jnc		.10E							;   if (0 == CF)
    37                              <1> 												;     break;
    38                              <1> 												;   
    39                              <1> .12L:											;   for ( ; ; )
    40                              <1> 												;   {
    41 00001376 0FA303              <1> 		bt		[ebx], eax						;     CF = TEST(IN_USE, 1);
    42 00001379 72FB                <1> 		jc		.12L							;     if (0 == CF)
    43                              <1> 												;       break;
    44 0000137B EBF3                <1> 		jmp		.10L							;   }
    45                              <1> .10E:											; }
    46                              <1> 
    47                              <1> 		;---------------------------------------
    48                              <1> 		; 【レジスタの復帰】
    49                              <1> 		;---------------------------------------
    50 0000137D 5B                  <1> 		pop		ebx
    51 0000137E 58                  <1> 		pop		eax
    52                              <1> 
    53                              <1> 		;---------------------------------------
    54                              <1> 		; 【スタックフレームの破棄】
    55                              <1> 		;---------------------------------------
    56 0000137F 89EC                <1> 		mov		esp, ebp
    57 00001381 5D                  <1> 		pop		ebp
    58                              <1> 
    59 00001382 C3                  <1> 		ret
   187                                  %include	"../modules/protect/int_nm.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	割り込み処理：#NM(DNA:デバイス使用不可)
     3                              <1> ;************************************************************************
     4                              <1> int_nm:
     5                              <1> 		;---------------------------------------
     6                              <1> 		; 【レジスタの保存】
     7                              <1> 		;---------------------------------------
     8 00001383 60                  <1> 		pusha
     9 00001384 1E                  <1> 		push	ds
    10 00001385 06                  <1> 		push	es
    11                              <1> 
    12                              <1> 		;---------------------------------------
    13                              <1> 		; カーネル用セレクタを設定
    14                              <1> 		;---------------------------------------
    15 00001386 66B81000            <1> 		mov		ax, DS_KERNEL					;
    16 0000138A 8ED8                <1> 		mov		ds, ax							;
    17 0000138C 8EC0                <1> 		mov		es, ax							;
    18                              <1> 
    19                              <1> 		;---------------------------------------
    20                              <1> 		; タスクスイッチフラグをクリア
    21                              <1> 		;---------------------------------------
    22 0000138E 0F06                <1> 		clts									; CR0.TS = 0;
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 前回/今回FPUを使用するタスク
    26                              <1> 		;---------------------------------------
    27 00001390 8B3D[DC130000]      <1> 		mov		edi, [.last_tss]				; EDI = 前回FPUを使用したタスクのTSS
    28 00001396 0F00CE              <1> 		str		esi								; ESI = 今回FPUを使用したタスクのTSS
    29 00001399 83E6F8              <1> 		and		esi, ~0x0007					; // 特権レベルをマスク
    30                              <1> 
    31                              <1> 		;---------------------------------------
    32                              <1> 		; FPUの初回利用をチェック
    33                              <1> 		;---------------------------------------
    34 0000139C 83FF00              <1> 		cmp		edi, 0							; if (0 != EDI)     // 前回使用したタスク
    35 0000139F 7420                <1> 		je		.10F							; {
    36                              <1> 												;   
    37 000013A1 39FE                <1> 		cmp		esi, edi						;   if (ESI != EDI) // 異なるタスク
    38 000013A3 741A                <1> 		je		.12E							;   {
    39                              <1> 												;     
    40 000013A5 FA                  <1> 		cli										;     // 割り込み禁止
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; 前回のFPUコンテキストを保存
    44                              <1> 		;---------------------------------------
    45 000013A6 89FB                <1> 		mov		ebx, edi						;     // 前回のタスク
    46 000013A8 E833000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
    47 000013AD E841000000          <1> 		call	save_fpu_context				;     // FPUのコンテキストを保存
    48                              <1> 
    49                              <1> 		;---------------------------------------
    50                              <1> 		; 今回のFPUコンテキストを復帰
    51                              <1> 		;---------------------------------------
    52 000013B2 89F3                <1> 		mov		ebx, esi						;     // 今回のタスク
    53 000013B4 E827000000          <1> 		call	get_tss_base					;     // TSSアドレスを取得
    54 000013B9 E843000000          <1> 		call	load_fpu_context				;     // FPUのコンテキストを復帰
    55                              <1> 												;     
    56 000013BE FB                  <1> 		sti										;     // 割り込み許可
    57                              <1> .12E:											;   }
    58 000013BF EB0E                <1> 		jmp		.10E							; }
    59                              <1> .10F:											; else
    60                              <1> 												; {
    61                              <1> 												;   
    62 000013C1 FA                  <1> 		cli										;   // 割り込み禁止
    63                              <1> 
    64                              <1> 		;---------------------------------------
    65                              <1> 		; 今回のFPUコンテキストを復帰
    66                              <1> 		;---------------------------------------
    67 000013C2 89F3                <1> 		mov		ebx, esi						;   // 今回のタスク
    68 000013C4 E817000000          <1> 		call	get_tss_base					;   // 現在のタスクのTSSアドレスを取得
    69 000013C9 E833000000          <1> 		call	load_fpu_context				;   // FPUのコンテキストを復帰
    70                              <1> 												;   
    71 000013CE FB                  <1> 		sti										;   // 割り込み許可
    72                              <1> .10E:											; }
    73                              <1> 												; 
    74 000013CF 8935[DC130000]      <1> 		mov		[.last_tss], esi				; // FPUを使用したタスクを保存
    75                              <1> 
    76                              <1> 		;---------------------------------------
    77                              <1> 		; 【レジスタの復帰】
    78                              <1> 		;---------------------------------------
    79 000013D5 07                  <1> 		pop		es
    80 000013D6 1F                  <1> 		pop		ds
    81 000013D7 61                  <1> 		popa
    82                              <1> 
    83 000013D8 CF                  <1> 		iret
    84                              <1> 
    85 000013D9 00<rept>            <1> ALIGN 4, db 0
    86 000013DC 00000000            <1> .last_tss:	dd		0
    87                              <1> 
    88                              <1> ;************************************************************************
    89                              <1> ; GDTのセレクタのベースアドレスを取得
    90                              <1> ;------------------------------------------------------------------[IN]--
    91                              <1> ;	EBX : セレクタ
    92                              <1> ;-----------------------------------------------------------------[OUT]--
    93                              <1> ;	EAX : ベースアドレス
    94                              <1> ;************************************************************************
    95                              <1> get_tss_base:
    96 000013E0 8B83[BA050000]      <1> 		mov		eax, [GDT + ebx + 2]			; EAX   = TSS[23: 0];
    97 000013E6 C1E008              <1> 		shl		eax, 8							; EAX <<= 8;
    98 000013E9 8A83[BF050000]      <1>         mov     al,  [GDT + ebx + 7]            ;  AL   = TSS[31:24];
    99 000013EF C1C808              <1> 		ror		eax, 8							; EAX >>= 8;
   100                              <1> 
   101 000013F2 C3                  <1> 		ret
   102                              <1> 
   103                              <1> ;************************************************************************
   104                              <1> ; FPUのコンテキストを保存
   105                              <1> ;------------------------------------------------------------------[IN]--
   106                              <1> ;	EAX : TSSの先頭アドレス
   107                              <1> ;************************************************************************
   108                              <1> save_fpu_context:
   109 000013F3 DD7068              <1> 		fnsave	[eax + 104]						; // FPUコンテキストを保存
   110 000013F6 C780D4000000010000- <1> 		mov		[eax + 104 + 108], dword 1		; saved = 1;
   110 000013FF 00                  <1>
   111                              <1> 
   112 00001400 C3                  <1> 		ret
   113                              <1> 
   114                              <1> ;************************************************************************
   115                              <1> ; FPUのコンテキストを復帰
   116                              <1> ;------------------------------------------------------------------[IN]--
   117                              <1> ;	EAX : TSSの先頭アドレス
   118                              <1> ;************************************************************************
   119                              <1> load_fpu_context:
   120 00001401 83B8D400000000      <1> 		cmp		[eax + 104 + 108], dword 0		; if (0 == saved)
   121 00001408 7504                <1> 		jne		.10F							; {
   122 0000140A DBE3                <1> 		fninit									;    // FPUの初期化
   123 0000140C EB03                <1> 		jmp		.10E							; }
   124                              <1> .10F:											; else
   125                              <1> 												; {
   126 0000140E DD6068              <1> 		frstor	[eax + 104]						;   // FPUコンテキストを復帰
   127                              <1> .10E:											; }
   128 00001411 C3                  <1> 		ret
   129                              <1> 
   188                                  %include	"../modules/protect/wait_tick.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	ウェイト
     3                              <1> ;------------------------------------------------------------------------
     4                              <1> ;	指定された回数、システム割り込みが発生するまで待つ
     5                              <1> ;========================================================================
     6                              <1> ;■書式		: void wait_tick(tick);
     7                              <1> ;
     8                              <1> ;■引数
     9                              <1> ;	tick	: システム割り込み回数
    10                              <1> ;
    11                              <1> ;■戻り値	: 無し
    12                              <1> ;************************************************************************
    13                              <1> wait_tick:
    14                              <1> 		;---------------------------------------
    15                              <1> 		; 【スタックフレームの構築】
    16                              <1> 		;---------------------------------------
    17                              <1> 												; ---------------
    18                              <1> 												; EBP+ 8| ウェイト
    19                              <1> 												; ---------------
    20 00001412 55                  <1> 		push	ebp								; EBP+ 4| EIP（戻り番地）
    21 00001413 89E5                <1> 		mov		ebp, esp						; EBP+ 0| EBP（元の値）
    22                              <1> 												; ------|--------
    23                              <1> 
    24                              <1> 		;---------------------------------------
    25                              <1> 		; 【レジスタの保存】
    26                              <1> 		;---------------------------------------
    27 00001415 50                  <1> 		push	eax
    28 00001416 51                  <1> 		push	ecx
    29                              <1> 
    30                              <1> 		;---------------------------------------
    31                              <1> 		; ウェイト
    32                              <1> 		;---------------------------------------
    33 00001417 8B4D08              <1> 		mov		ecx, [ebp +  8]					; ECX = ウェイト回数
    34 0000141A A1[F8060000]        <1> 		mov		eax, [TIMER_COUNT]				; EAX = TIMER;
    35                              <1> 												; do
    36                              <1> 												; {
    37 0000141F 3905[F8060000]      <1> .10L:	cmp		[TIMER_COUNT], eax				;   while (TIMER != EAX)
    38 00001425 74F8                <1> 		je		.10L							;     ;
    39 00001427 40                  <1> 		inc		eax								;   EAX++;
    40 00001428 E2F5                <1> 		loop	.10L							; } while (--ECX);
    41                              <1> 
    42                              <1> 		;---------------------------------------
    43                              <1> 		; レジスタの復帰
    44                              <1> 		;---------------------------------------
    45 0000142A 59                  <1> 		pop		ecx
    46 0000142B 58                  <1> 		pop		eax
    47                              <1> 
    48                              <1> 		;---------------------------------------
    49                              <1> 		; スタックフレームの破棄
    50                              <1> 		;---------------------------------------
    51 0000142C 89EC                <1> 		mov		esp, ebp
    52 0000142E 5D                  <1> 		pop		ebp
    53                              <1> 
    54 0000142F C3                  <1> 		ret
    55                              <1> 
   189                                  %include	"../modules/protect/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3 00001430 6655                <1>         push    bp
     4 00001432 6689E5              <1>         mov     bp,sp
     5                              <1> 
     6 00001435 6651                <1>         push    cx
     7 00001437 6656                <1>         push    si
     8 00001439 6657                <1>         push    di
     9                              <1> 
    10 0000143B FC                  <1>         cld
    11 0000143C 66678B7E08          <1>         mov     di, [bp + 8]
    12 00001441 66678B760C          <1>         mov     si, [bp + 12]
    13 00001446 66678B4E10          <1>         mov     cx, [bp + 16]
    14                              <1> 
    15 0000144B F3A4                <1>         rep movsb
    16                              <1> 
    17 0000144D 665F                <1>         pop     di
    18 0000144F 665E                <1>         pop     si
    19 00001451 6659                <1>         pop     cx
    20                              <1> 
    21 00001453 6689EC              <1>         mov     sp, bp
    22 00001456 665D                <1>         pop     bp
    23                              <1> 
    24 00001458 C3                  <1>         ret
   190                                  
   191                                  ;************************************************************************
   192                                  ;	パディング
   193                                  ;************************************************************************
   194 00001459 00<rept>                		times KERNEL_SIZE - ($ - $$) db 0x00	; パディング
   195                                  
