     1                                  ;************************************************************************
     2                                  ;	BIOSでロードされる最初のセクタ
     3                                  ;	
     4                                  ;	プログラム全体を通して、セグメントの値は0x0000とする。
     5                                  ;	(DS==ES==0)
     6                                  ;	
     7                                  ;************************************************************************
     8                                  
     9                                  ;************************************************************************
    10                                  ;	マクロ
    11                                  ;************************************************************************
    12                                  %include	"../include/define.s"
     1                              <1> ;************************************************************************
     2                              <1> ;	メモリイメージ
     3                              <1> ;************************************************************************
     4                              <1> 
     5                              <1> 		;---------------------------------------
     6                              <1> 		;           |            | 
     7                              <1> 		;           |____________| 
     8                              <1> 		; 0000_7A00 |            | ( 512) スタック
     9                              <1> 		;           |____________| 
    10                              <1> 		; 0000_7C00 |            | (  8K) ブート
    11                              <1> 		;           =            = 
    12                              <1> 		;           |____________| 
    13                              <1> 		; 0000_9C00 |            | (  8K) カーネル（一時展開）
    14                              <1> 		;           =            = 
    15                              <1> 		;           |____________| 
    16                              <1> 		; 0000_BC00 |////////////| 
    17                              <1> 		;           =            = 
    18                              <1> 		;           |____________| 
    19                              <1> 		; 0010_0000 |       (2K) | 割り込みディスクリプタテーブル
    20                              <1> 		;           |____________| 
    21                              <1> 		; 0010_0800 |       (2K) | カーネルスタック
    22                              <1> 		;           |____________| 
    23                              <1> 		; 0010_1000 |       (8K) | カーネルプログラム
    24                              <1> 		;           |            | 
    25                              <1> 		;           =            = 
    26                              <1> 		;           |____________| 
    27                              <1> 		; 0010_3000 |       (8K) | タスク用スタック
    28                              <1> 		;           |            | （各タスク1K）
    29                              <1> 		;           =            = 
    30                              <1> 		;           |____________| 
    31                              <1> 		; 0010_5000 |            | Dir
    32                              <1> 		;      6000 |____________| Page
    33                              <1> 		; 0010_7000 |            | Dir
    34                              <1> 		;      8000 |____________| Page
    35                              <1> 		; 0010_9000 |////////////| 
    36                              <1> 		;           |            | 
    37                              <1> 
    38                              <1> 		BOOT_SIZE			equ		(1024 * 8)		; ブートサイズ
    39                              <1> 		KERNEL_SIZE			equ		(1024 * 8)		; カーネルサイズ
    40                              <1> 
    41                              <1> 		BOOT_LOAD			equ		0x7C00			; ブートプログラムのロード位置
    42                              <1> 		BOOT_END			equ		(BOOT_LOAD + BOOT_SIZE)
    43                              <1> 
    44                              <1> 		KERNEL_LOAD			equ		0x0010_1000
    45                              <1> 
    46                              <1> 		SECT_SIZE			equ		(512)			; セクタサイズ
    47                              <1> 
    48                              <1> 		BOOT_SECT			equ		(BOOT_SIZE   / SECT_SIZE)	; ブートプログラムのセクタ数
    49                              <1> 		KERNEL_SECT			equ		(KERNEL_SIZE / SECT_SIZE)	; カーネルのセクタ数
    50                              <1> 
    51                              <1> 		E820_RECORD_SIZE	equ		20
    52                              <1> 
    53                              <1> 		VECT_BASE			equ		0x0010_0000		;	0010_0000:0010_07FF
    54                              <1> 
    55                              <1> 
    56                              <1> 		STACK_BASE			equ		0x0010_3000		; タスク用スタックエリア
    57                              <1> 		STACK_SIZE			equ		1024			; スタックサイズ
    58                              <1> 
    59                              <1> 		SP_TASK_0			equ		STACK_BASE + (STACK_SIZE * 1)
    60                              <1> 		SP_TASK_1			equ		STACK_BASE + (STACK_SIZE * 2)
    61                              <1> 		SP_TASK_2			equ		STACK_BASE + (STACK_SIZE * 3)
    62                              <1> 		SP_TASK_3			equ		STACK_BASE + (STACK_SIZE * 4)
    63                              <1> 		SP_TASK_4			equ		STACK_BASE + (STACK_SIZE * 5)
    64                              <1> 		SP_TASK_5			equ		STACK_BASE + (STACK_SIZE * 6)
    65                              <1> 		SP_TASK_6			equ		STACK_BASE + (STACK_SIZE * 7)
    66                              <1> 
    67                              <1> 		CR3_BASE			equ		0x0010_5000		; ページ変換テーブル：タスク3用
    68                              <1> 
    69                              <1> 		PARAM_TASK_4		equ		0x0010_8000		; 描画パラメータ：タスク4用
    70                              <1> 		PARAM_TASK_5		equ		0x0010_9000		; 描画パラメータ：タスク5用
    71                              <1> 		PARAM_TASK_6		equ		0x0010_A000		; 描画パラメータ：タスク6用
    72                              <1> 
    73                              <1> 		CR3_TASK_4			equ		0x0020_0000		; ページ変換テーブル：タスク4用
    74                              <1> 		CR3_TASK_5			equ		0x0020_2000		; ページ変換テーブル：タスク5用
    75                              <1> 		CR3_TASK_6			equ		0x0020_4000		; ページ変換テーブル：タスク6用
    76                              <1> 
    77                              <1> 
    78                              <1> ;************************************************************************
    79                              <1> ;	ディスクイメージ
    80                              <1> ;************************************************************************
    81                              <1> 		;(SECT/SUM)  file img                 
    82                              <1> 		;                       ____________  
    83                              <1> 		;( 16/  0)   0000_0000 |       (8K) | ブート
    84                              <1> 		;                      =            = 
    85                              <1> 		;                      |____________| 
    86                              <1> 		;( 16/ 16)   0000_2000 |       (8K) | カーネル
    87                              <1> 		;                      =            = 
    88                              <1> 		;                      |____________| 
    89                              <1> 		;(256/ 32)   0000_4000 |     (128K) | FAT-1
    90                              <1> 		;                      |            | 
    91                              <1> 		;                      |            | 
    92                              <1> 		;                      =            = 
    93                              <1> 		;                      |____________| 
    94                              <1> 		;(256/288)   0002_4000 |     (128K) | FAT-2
    95                              <1> 		;                      |            | 
    96                              <1> 		;                      |            | 
    97                              <1> 		;                      =            = 
    98                              <1> 		;                      |____________| 
    99                              <1> 		;( 32/544)   0004_4000 |      (16K) | ルートディレクトリ領域
   100                              <1> 		;                      |            | (32セクタ/512エントリ)
   101                              <1> 		;                      =            = 
   102                              <1> 		;                      |____________| 
   103                              <1> 		;(   /576)   0004_8000 |            | データ領域
   104                              <1> 		;                      |            | 
   105                              <1> 		;                      =            = 
   106                              <1> 		;                      |            | 
   107                              <1> 		;                      |____________| 
   108                              <1> 		;(   /640)   0005_0000 |////////////| 
   109                              <1> 		;                      |            | 
   110                              <1> 
   111                              <1> 		FAT_SIZE			equ		(1024 * 128)	; FAT-1/2
   112                              <1> 		ROOT_SIZE			equ		(1024 *  16)	; ルートディレクトリ領域
   113                              <1> 
   114                              <1> 		ENTRY_SIZE			equ		32				; エントリサイズ
   115                              <1> 
   116                              <1> 		; BOOT イメージは異なるファイルなので、FAT アドレスの定義には加算しない
   117                              <1> 		FAT_OFFSET			equ		(BOOT_SIZE + KERNEL_SIZE)
   118                              <1> 		FAT1_START			equ		(KERNEL_SIZE)
   119                              <1> 		FAT2_START			equ		(FAT1_START + FAT_SIZE)
   120                              <1> 		ROOT_START			equ		(FAT2_START + FAT_SIZE)
   121                              <1> 		FILE_START			equ		(ROOT_START + ROOT_SIZE)
   122                              <1> 
   123                              <1> 		; ファイル属性
   124                              <1> 		ATTR_READ_ONLY		equ		0x01
   125                              <1> 		ATTR_HIDDEN			equ		0x02
   126                              <1> 		ATTR_SYSTEM			equ		0x04
   127                              <1> 		ATTR_VOLUME_ID		equ		0x08
   128                              <1> 		ATTR_DIRECTORY		equ		0x10
   129                              <1> 		ATTR_ARCHIVE		equ		0x20
   130                              <1> 
    13                                  %include	"../include/macro.s"
     1                              <1> ;************************************************************************
     2                              <1> ; 関数呼び出し用マクロ
     3                              <1> ;
     4                              <1> ; 使い方：
     5                              <1> ;	cdecl	func [, param1[, param2[, ...]]]
     6                              <1> ;
     7                              <1> ;************************************************************************
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1> 	%rep  %0 - 1
    11                              <1> 		push	%{-1:-1}
    12                              <1> 		%rotate -1
    13                              <1> 	%endrep 
    14                              <1> 	%rotate -1
    15                              <1> 
    16                              <1> 		call	%1
    17                              <1> 
    18                              <1> 	%if 1 < %0
    19                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    20                              <1> 	%endif
    21                              <1> 
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> ;************************************************************************
    25                              <1> ; 割り込みベクタ設定用
    26                              <1> ;
    27                              <1> ; 使い方：
    28                              <1> ;	set_vect	ベクタ番号, 割り込み処理 [, フラグ]
    29                              <1> ;
    30                              <1> ;************************************************************************
    31                              <1> %macro  set_vect 1-*.nolist
    32                              <1> 		push	eax
    33                              <1> 		push	edi
    34                              <1> 
    35                              <1> 		mov		edi, VECT_BASE + (%1 * 8)		; ベクタアドレス;
    36                              <1> 		mov		eax, %2
    37                              <1> 
    38                              <1> 	%if 3 == %0
    39                              <1> 		mov		[edi + 4], %3					; フラグ
    40                              <1> 	%endif
    41                              <1> 
    42                              <1> 		mov		[edi + 0], ax					; 例外アドレス[15: 0]
    43                              <1> 		shr		eax, 16							; 
    44                              <1> 		mov		[edi + 6], ax					; 例外アドレス[31:16]
    45                              <1> 
    46                              <1> 		pop		edi
    47                              <1> 		pop		eax
    48                              <1> %endmacro
    49                              <1> 
    50                              <1> ;************************************************************************
    51                              <1> ; ポート出力用
    52                              <1> ;
    53                              <1> ; 使い方：
    54                              <1> ;	outp	ポート番号, 出力値
    55                              <1> ;
    56                              <1> ;************************************************************************
    57                              <1> %macro  outp 2
    58                              <1> 		mov		al, %2
    59                              <1> 		out		%1, al
    60                              <1> %endmacro
    61                              <1> 
    62                              <1> ;************************************************************************
    63                              <1> ; ディスクリプタの情報を設定
    64                              <1> ;
    65                              <1> ; 使い方：
    66                              <1> ;	set_desc	ディスクリプタ, ベース
    67                              <1> ;
    68                              <1> ;************************************************************************
    69                              <1> %macro  set_desc 2-* 
    70                              <1> 		push	eax
    71                              <1> 		push	edi
    72                              <1> 
    73                              <1> 		mov		edi, %1							; ディスクリプタアドレス
    74                              <1> 		mov		eax, %2							; ベースアドレス
    75                              <1> 
    76                              <1> 	%if 3 == %0
    77                              <1> 		mov		[edi + 0], %3					; リミット
    78                              <1> 	%endif
    79                              <1> 
    80                              <1> 		mov		[edi + 2], ax					; ベース（[15: 0]）
    81                              <1> 		shr		eax, 16							; 
    82                              <1> 		mov		[edi + 4], al					; ベース（[23:16]）
    83                              <1> 		mov		[edi + 7], ah					; ベース（[31:24]）
    84                              <1> 
    85                              <1> 		pop		edi
    86                              <1> 		pop		eax
    87                              <1> %endmacro
    88                              <1> 
    89                              <1> ;************************************************************************
    90                              <1> ; ゲートディスクリプタのオフセットを設定
    91                              <1> ;
    92                              <1> ; 使い方：
    93                              <1> ;	set_gate	ディスクリプタ, オフセット
    94                              <1> ;
    95                              <1> ;************************************************************************
    96                              <1> %macro  set_gate 2-* 
    97                              <1> 		push	eax
    98                              <1> 		push	edi
    99                              <1> 
   100                              <1> 		mov		edi, %1							; ディスクリプタアドレス
   101                              <1> 		mov		eax, %2							; ベースアドレス
   102                              <1> 
   103                              <1> 		mov		[edi + 0], ax					; ベース（[15: 0]）
   104                              <1> 		shr		eax, 16							; 
   105                              <1> 		mov		[edi + 6], ax					; ベース（[31:16]）
   106                              <1> 
   107                              <1> 		pop		edi
   108                              <1> 		pop		eax
   109                              <1> %endmacro
   110                              <1> 
   111                              <1> ;************************************************************************
   112                              <1> ;	構造体
   113                              <1> ;************************************************************************
   114                              <1> 
   115                              <1> ;-----------------------------------------------
   116                              <1> ;	ドライブパラメータ
   117                              <1> ;-----------------------------------------------
   118                              <1> struc drive
   119 00000000 <res 00000002>      <1> 		.no				resw	1				; ドライブ番号
   120 00000002 <res 00000002>      <1> 		.cyln			resw	1				; C:シリンダ
   121 00000004 <res 00000002>      <1> 		.head			resw	1				; H:ヘッド
   122 00000006 <res 00000002>      <1> 		.sect			resw	1				; S:セクタ
   123                              <1> endstruc
   124                              <1> 
   125                              <1> ;-----------------------------------------------
   126                              <1> ;	リングバッファ
   127                              <1> ;-----------------------------------------------
   128                              <1> %define		RING_ITEM_SIZE		(1 << 4)
   129                              <1> %define		RING_INDEX_MASK		(RING_ITEM_SIZE - 1)
   130                              <1> 
   131                              <1> struc ring_buff
   132 00000000 <res 00000004>      <1> 		.rp				resd	1				; RP:書き込み位置
   133 00000004 <res 00000004>      <1> 		.wp				resd	1				; WP:読み込み位置
   134 00000008 <res 00000010>      <1> 		.item			resb	RING_ITEM_SIZE	; バッファ
   135                              <1> endstruc
   136                              <1> 
   137                              <1> ;-----------------------------------------------
   138                              <1> ;	バラ曲線描画パラメータ
   139                              <1> ;-----------------------------------------------
   140                              <1> struc rose
   141 00000000 <res 00000004>      <1> 		.x0				resd	1				; 左上座標：X0
   142 00000004 <res 00000004>      <1> 		.y0				resd	1				; 左上座標：Y0
   143 00000008 <res 00000004>      <1> 		.x1				resd	1				; 右下座標：X1
   144 0000000C <res 00000004>      <1> 		.y1				resd	1				; 右下座標：Y1
   145                              <1> 
   146 00000010 <res 00000004>      <1> 		.n				resd	1				; 変数：n
   147 00000014 <res 00000004>      <1> 		.d				resd	1				; 変数：d
   148                              <1> 
   149 00000018 <res 00000004>      <1> 		.color_x		resd	1				; 描画色：X軸
   150 0000001C <res 00000004>      <1> 		.color_y		resd	1				; 描画色：Y軸
   151 00000020 <res 00000004>      <1> 		.color_z		resd	1				; 描画色：枠
   152 00000024 <res 00000004>      <1> 		.color_s		resd	1				; 描画色：文字
   153 00000028 <res 00000004>      <1> 		.color_f		resd	1				; 描画色：グラフ描画色
   154 0000002C <res 00000004>      <1> 		.color_b		resd	1				; 描画色：グラフ消去色
   155                              <1> 
   156 00000030 <res 00000010>      <1> 		.title			resb	16				; タイトル
   157                              <1> endstruc
   158                              <1> 
    14                                  
    15                                  		ORG		BOOT_LOAD						; ロードアドレスをアセンブラに指示
    16                                  
    17                                  ;************************************************************************
    18                                  ;	エントリポイント
    19                                  ;************************************************************************
    20                                  entry:
    21                                  		;---------------------------------------
    22                                  		; BPB(BIOS Parameter Block)
    23                                  		;---------------------------------------
    24 00000000 EB3C                    		jmp		ipl								; 0x00( 3) ブートコードへのジャンプ命令
    25 00000002 90                      		times	3 - ($ - $$) db 0x90			; 
    26 00000003 4F454D2D4E414D45        		db		'OEM-NAME'						; 0x03( 8) OEM名
    27                                  												; -------- --------------------------------
    28 0000000B 0002                    		dw		512								; 0x0B( 2) セクタのバイト数
    29 0000000D 01                      		db		1								; 0x0D( 1) クラスタのセクタ数
    30 0000000E 2000                    		dw		32								; 0x0E( 2) 予約セクタ数
    31 00000010 02                      		db		2								; 0x10( 1) FAT数
    32 00000011 0002                    		dw		512								; 0x11( 2) ルートエントリ数
    33 00000013 F0FF                    		dw		0xFFF0							; 0x13( 2) 総セクタ数16
    34 00000015 F8                      		db		0xF8							; 0x15( 1) メディアタイプ
    35 00000016 0001                    		dw		256								; 0x16( 2) FATのセクタ数
    36 00000018 1000                    		dw		0x10							; 0x18( 2) トラックのセクタ数
    37 0000001A 0200                    		dw		2								; 0x1A( 2) ヘッド数
    38 0000001C 00000000                		dd		0								; 0x1C( 4) 隠されたセクタ数
    39                                  												; -------- --------------------------------
    40 00000020 00000000                		dd		0								; 0x20( 4) 総セクタ数32
    41 00000024 80                      		db		0x80							; 0x24( 1) ドライブ番号
    42 00000025 00                      		db		0								; 0x25( 1) （予約）
    43 00000026 29                      		db		0x29							; 0x26( 1) ブートフラグ
    44 00000027 EFBE0000                		dd		0xbeef							; 0x27( 4) シリアルナンバー
    45 0000002B 424F4F5441424C4520-     		db		'BOOTABLE   '					; 0x2B(11) ボリュームラベル
    45 00000034 2020               
    46 00000036 4641543136202020        		db		'FAT16   '						; 0x36( 8) FATタイプ
    47                                  
    48                                  		;---------------------------------------
    49                                  		; IPL(Initial Program Loader)
    50                                  		;---------------------------------------
    51                                  ipl:
    52 0000003E FA                      		cli										; // 割り込み禁止
    53                                  
    54 0000003F B80000                  		mov		ax, 0x0000						; AX = 0x0000;
    55 00000042 8ED8                    		mov		ds, ax							; DS = 0x0000;
    56 00000044 8EC0                    		mov		es, ax							; ES = 0x0000;
    57 00000046 8ED0                    		mov		ss, ax							; SS = 0x0000;
    58 00000048 BC007C                  		mov		sp, BOOT_LOAD					; SP = 0x7C00;
    59                                  
    60 0000004B FB                      		sti										; // 割り込み許可
    61                                  
    62 0000004C 8816[9C00]              		mov		[BOOT + drive.no], dl			; ブートドライブを保存
    63                                  
    64                                  		;---------------------------------------
    65                                  		; 文字列を表示
    66                                  		;---------------------------------------
    67 00000050 68[7D00]E84E0083C4-     		cdecl	puts, .s0						; puts(.s0);
    67 00000058 02                 
    68                                  
    69                                  		;---------------------------------------
    70                                  		; 残りのセクタを全て読み込む
    71                                  		;---------------------------------------
    72 00000059 BB0F00                  		mov		bx, BOOT_SECT - 1				; BX = 残りのブートセクタ数;
    73 0000005C B9007E                  		mov		cx, BOOT_LOAD + SECT_SIZE		; CX = 次のロードアドレス;
    74                                  
    75 0000005F 515368[9C00]E89B00-     		cdecl	read_chs, BOOT, bx, cx			; AX = read_chs(.chs, bx, cx);
    75 00000067 83C406             
    76                                  
    77 0000006A 39D8                    		cmp		ax, bx							; if (AX != 残りのセクタ数)
    78 0000006C 740C                    .10Q:	jz		.10E							; {
    79 0000006E 68[8A00]E8300083C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
    79 00000076 02                 
    80 00000077 E84900                  		call	reboot							;   reboot(); // 再起動
    81                                  .10E:											; }
    82                                  
    83                                  		;---------------------------------------
    84                                  		; 次のステージへ移行
    85                                  		;---------------------------------------
    86 0000007A E9AA05                  		jmp		stage_2							; ブート処理の第2ステージ
    87                                  
    88                                  		;---------------------------------------
    89                                  		; データ
    90                                  		;---------------------------------------
    91 0000007D 426F6F74696E672E2E-     .s0		db	"Booting...", 0x0A, 0x0D, 0
    91 00000086 2E0A0D00           
    92 0000008A 4572726F723A736563-     .e0		db	"Error:sector read", 0
    92 00000093 746F72207265616400 
    93                                  
    94                                  ;************************************************************************
    95                                  ;	ブートドライブに関する情報
    96                                  ;************************************************************************
    97                                  ALIGN 2, db 0
    98                                  BOOT:											; ブートドライブに関する情報
    99                                  	istruc	drive
   100 0000009C 0000                    		at	drive.no,		dw	0				; ドライブ番号
   101 0000009E 0000                    		at	drive.cyln,		dw	0				; C:シリンダ
   102 000000A0 0000                    		at	drive.head,		dw	0				; H:ヘッド
   103 000000A2 0200                    		at	drive.sect,		dw	2				; S:セクタ
   104                                  	iend
   105                                  
   106                                  ;************************************************************************
   107                                  ;	モジュール
   108                                  ;************************************************************************
   109                                  %include	"../modules/real/puts.s"
     1                              <1> puts:
     2 000000A4 55                  <1>         push    bp
     3 000000A5 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 000000A7 50                  <1>         push    ax
     6 000000A8 53                  <1>         push    bx
     7 000000A9 56                  <1>         push    si
     8                              <1> 
     9 000000AA 8B7604              <1>         mov     si, [bp + 4]
    10                              <1> 
    11 000000AD B40E                <1>         mov     ah, 0x0e
    12 000000AF BB0000              <1>         mov     bx, 0x0000
    13 000000B2 FC                  <1>         cld
    14                              <1> .10L:
    15                              <1> 
    16 000000B3 AC                  <1>         lodsb
    17                              <1> 
    18 000000B4 3C00                <1>         cmp     al, 0
    19 000000B6 7404                <1>         je      .10E
    20                              <1> 
    21 000000B8 CD10                <1>         int     0x10
    22 000000BA EBF7                <1>         jmp     .10L
    23                              <1> .10E:
    24                              <1> 
    25 000000BC 5E                  <1>         pop     si
    26 000000BD 5B                  <1>         pop     bx
    27 000000BE 58                  <1>         pop     ax
    28                              <1> 
    29 000000BF 89EC                <1>         mov     sp, bp
    30 000000C1 5D                  <1>         pop     bp
    31                              <1> 
    32 000000C2 C3                  <1>         ret
   110                                  %include	"../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1> 
     3 000000C3 68[DF00]E8DBFF83C4- <1>         cdecl   puts, .s0   ;メッセージの表示
     3 000000CB 02                  <1>
     4                              <1> 
     5                              <1> ; キー入力待ち
     6                              <1> 
     7                              <1> .10L:
     8 000000CC B410                <1>         mov     ah, 0x10
     9 000000CE CD16                <1>         int     0x16
    10                              <1> 
    11 000000D0 3C20                <1>         cmp     al, ' '
    12 000000D2 75F8                <1>         jne     .10L
    13                              <1> 
    14                              <1> ;改行を出力
    15 000000D4 68[FD00]E8CAFF83C4- <1>         cdecl   puts, .s1
    15 000000DC 02                  <1>
    16                              <1> 
    17                              <1> ;再起動
    18 000000DD CD19                <1>         int     0x19    ; BIOS(0x19)
    19                              <1> 
    20                              <1> ;文字列データ
    21 000000DF 0A0D50757368205350- <1> .s0     db      0x0A, 0x0D, "Push SPACE key to reboot...", 0
    21 000000E8 414345206B65792074- <1>
    21 000000F1 6F207265626F6F742E- <1>
    21 000000FA 2E2E00              <1>
    22 000000FD 0A0D0A0D00          <1> .s1     db      0x0A, 0x0D, 0x0A, 0x0D, 0
   111                                  %include	"../modules/real/read_chs.s"
     1                              <1> read_chs:
     2                              <1>                             
     3 00000102 55                  <1>         push    bp
     4 00000103 89E5                <1>         mov     bp, sp
     5 00000105 6A03                <1>         push    3           ; リトライ回数
     6 00000107 6A00                <1>         push    0           ; 読み込みセクタ数
     7                              <1> 
     8 00000109 53                  <1>         push    bx
     9 0000010A 51                  <1>         push    cx
    10 0000010B 52                  <1>         push    dx
    11 0000010C 06                  <1>         push    es
    12 0000010D 56                  <1>         push    si
    13                              <1> 
    14 0000010E 8B7604              <1>         mov     si, [bp + 4]    ;si = srcバッファ
    15                              <1> 
    16                              <1> ; cxレジスタの設定
    17                              <1> 
    18 00000111 8A6C02              <1>         mov     ch, [si + drive.cyln + 0]   ; ch = シリンダ番号（上位バイト）
    19 00000114 8A4C03              <1>         mov     cl, [si + drive.cyln + 1]   ; cl = シリンダ番号（下位バイト）
    20 00000117 C0E106              <1>         shl     cl, 6                       ; cl <<=6 最上位２ビットにシフト
    21 0000011A 0A4C06              <1>         or      cl, [si + drive.sect]       ;セクタ番号
    22                              <1> 
    23                              <1> ; セクタ読み込み
    24 0000011D 8A7404              <1>         mov     dh, [si + drive.head]       ;dh = ヘッド番号
    25 00000120 8A14                <1>         mov     dl, [si + 0]                ;dl = ドライブ番号
    26 00000122 B80000              <1>         mov     ax, 0x0000                  
    27 00000125 8EC0                <1>         mov     es, ax
    28 00000127 8B5E08              <1>         mov     bx, [bp + 8]                ; コピー先
    29                              <1> .10L:
    30                              <1> 
    31 0000012A B402                <1>         mov     ah, 0x02                    ; セクタ読み込み
    32 0000012C 8A4606              <1>         mov     al, [bp + 6]                ; セクタ数
    33                              <1> 
    34 0000012F CD13                <1>         int     0x13           
    35 00000131 7304                <1>         jnc     .11E
    36                              <1> 
    37 00000133 B000                <1>         mov     al, 0                       
    38 00000135 EB0C                <1>         jmp     .10E
    39                              <1> 
    40                              <1> .11E:                                           ; うまく行かなかったときのループ
    41                              <1> 
    42 00000137 3C00                <1>         cmp     al, 0   
    43 00000139 7508                <1>         jne     .10E
    44                              <1> 
    45 0000013B B80000              <1>         mov     ax, 0
    46 0000013E FF4EFE              <1>         dec     word [bp - 2]                   ;リトライ回数を１引く
    47 00000141 75E7                <1>         jnz     .10L
    48                              <1> 
    49                              <1> .10E:    
    50 00000143 B400                <1>         mov     ah, 0                          
    51                              <1> 
    52                              <1> 
    53 00000145 5E                  <1>         pop     si
    54 00000146 07                  <1>         pop     es
    55 00000147 5A                  <1>         pop     dx
    56 00000148 59                  <1>         pop     cx
    57 00000149 5B                  <1>         pop     bx
    58                              <1> 
    59 0000014A 89EC                <1>         mov     sp, bp
    60 0000014C 5D                  <1>         pop     bp
    61                              <1> 
    62 0000014D C3                  <1>         ret
   112                                  
   113                                  ;************************************************************************
   114                                  ;	ブートフラグ（先頭512バイトの終了）
   115                                  ;************************************************************************
   116 0000014E 00<rept>                		times	510 - ($ - $$) db 0x00
   117 000001FE 55AA                    		db	0x55, 0xAA
   118                                  
   119                                  ;************************************************************************
   120                                  ;	リアルモード時に取得した情報
   121                                  ;************************************************************************
   122                                  FONT:											; フォント
   123 00000200 0000                    .seg:	dw	0
   124 00000202 0000                    .off:	dw	0
   125                                  ACPI_DATA:										; ACPI data
   126 00000204 00000000                .adr:	dd	0									; ACPI data address
   127 00000208 00000000                .len:	dd	0									; ACPI data length
   128                                  
   129                                  ;************************************************************************
   130                                  ;	モジュール（先頭512バイト以降に配置）
   131                                  ;************************************************************************
   132                                  %include	"../modules/real/itoa.s"
     1                              <1> itoa:
     2 0000020C 55                  <1>         push    bp
     3 0000020D 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 0000020F 50                  <1>         push    ax
     6 00000210 53                  <1>         push    bx
     7 00000211 51                  <1>         push    cx
     8 00000212 52                  <1>         push    dx
     9 00000213 56                  <1>         push    si
    10 00000214 57                  <1>         push    di
    11                              <1> 
    12                              <1> ;引数を取得
    13                              <1> 
    14 00000215 8B4604              <1>         mov     ax, [bp + 4]        ; 数値
    15 00000218 8B7606              <1>         mov     si, [bp + 6]        ; バッファアドレス
    16 0000021B 8B4E08              <1>         mov     cx, [bp + 8]        ;バッファサイズ
    17                              <1> 
    18 0000021E 89F7                <1>         mov     di, si
    19 00000220 01CF                <1>         add     di, cx
    20 00000222 4F                  <1>         dec     di      ;バッファの最後尾
    21                              <1> 
    22 00000223 8B5E0C              <1>         mov     bx, word[bp + 12] ;flags = オプション
    23                              <1> 
    24                              <1> ;符号付き判定
    25                              <1> 
    26 00000226 F7C30100            <1>         test    bx, 0b001
    27 0000022A 7408                <1> .10Q:   je      .10E
    28 0000022C 83F800              <1>         cmp     ax, 0
    29 0000022F 7D03                <1> .12Q:   jge     .12E
    30 00000231 83CB02              <1>         or      bx, 0b0010
    31                              <1> .12E:
    32                              <1> .10E:
    33                              <1> 
    34                              <1> ;符号出力判定
    35                              <1> 
    36 00000234 F7C30200            <1>         test    bx, 0b0010
    37 00000238 7410                <1> .20Q:   je      .20E
    38 0000023A 83F800              <1>         cmp     ax, 0
    39 0000023D 7D07                <1> .22Q:   jge     .22F
    40 0000023F F7D8                <1>         neg     ax
    41 00000241 C6042D              <1>         mov     [si], byte '-'   ;先頭にマイナスを表示
    42 00000244 EB03                <1>         jmp     .22E
    43                              <1> .22F:   
    44                              <1> 
    45 00000246 C6042B              <1>         mov     [si], byte '+'  ;先頭にプラスを表示
    46                              <1> 
    47                              <1> .22E:   
    48 00000249 49                  <1>         dec     cx
    49                              <1> 
    50                              <1> .20E:
    51                              <1> 
    52                              <1> ; ASCII変換
    53 0000024A 8B5E0A              <1>         mov bx, [bp + 10]        ;基数
    54                              <1> 
    55                              <1> .30L:
    56 0000024D BA0000              <1>         mov     dx, 0                   ;基数で割ることによって基数に合わせた数値にする
    57 00000250 F7F3                <1>         div     bx                     ; dx = dx:ax % bx
    58                              <1> 
    59 00000252 89D6                <1>         mov     si, dx                              
    60 00000254 8A94[7C02]          <1>         mov     dl, byte [.ascii + si]
    61                              <1> 
    62 00000258 8815                <1>         mov     [di], dl                ;diは一番うしろの数値のアドレス
    63 0000025A 4F                  <1>         dec     di
    64                              <1> 
    65 0000025B 83F800              <1>         cmp     ax, 0
    66 0000025E E0ED                <1>         loopnz  .30L
    67                              <1> .30E:
    68                              <1> 
    69                              <1> ;空欄を埋める
    70                              <1> 
    71 00000260 83F900              <1>         cmp     cx, 0
    72 00000263 740D                <1> .40Q:   je      .40E
    73 00000265 B020                <1>         mov     al, ' '
    74 00000267 837E0C04            <1>         cmp     [bp + 12], word 0b0100             ;フラグ
    75 0000026B 7502                <1> .42Q:   jne     .42E
    76 0000026D B030                <1>         mov     al, '0'
    77                              <1> .42E:
    78 0000026F FD                  <1>         std
    79 00000270 F3AA                <1>         rep stosb
    80                              <1> .40E:
    81                              <1> 
    82                              <1> ;レジスタ復帰とスタックフレームの廃棄
    83                              <1> 
    84 00000272 5F                  <1>         pop     di
    85 00000273 5E                  <1>         pop     si
    86 00000274 5A                  <1>         pop     dx 
    87 00000275 59                  <1>         pop     cx
    88 00000276 5B                  <1>         pop     bx
    89 00000277 58                  <1>         pop     ax
    90                              <1> 
    91 00000278 89EC                <1>         mov     sp, bp
    92 0000027A 5D                  <1>         pop     bp
    93                              <1> 
    94 0000027B C3                  <1>         ret
    95                              <1> 
    96 0000027C 303132333435363738- <1> .ascii:  db      "0123456789ABCDEF"          ;変換テーブル
    96 00000285 39414243444546      <1>
   133                                  %include	"../modules/real/get_drive_param.s"
     1                              <1> get_drive_param:
     2                              <1>         
     3 0000028C 55                  <1>         push    bp
     4 0000028D 89E5                <1>         mov     bp, sp
     5                              <1> 
     6 0000028F 53                  <1>         push    bx
     7 00000290 51                  <1>         push    cx
     8 00000291 06                  <1>         push    es
     9 00000292 56                  <1>         push    si
    10 00000293 57                  <1>         push    di
    11                              <1> 
    12 00000294 8B7604              <1>         mov     si, [bp + 4]
    13 00000297 B80000              <1>         mov     ax, 0
    14 0000029A 8EC0                <1>         mov     es, ax
    15 0000029C 89C7                <1>         mov     di, ax
    16                              <1> 
    17 0000029E B408                <1>         mov     ah, 8                   ;get drive parameters
    18 000002A0 8A14                <1>         mov     dl, [si + drive.no]     ;dl = ドライブ番号
    19 000002A2 CD13                <1>         int     0x13                    ;cf = bios(0x13, 8)
    20 000002A4 721B                <1> .10Q:   jc      .10F
    21                              <1> .10T:   
    22 000002A6 88C8                <1>         mov     al, cl                  ;ax = セクタ数
    23 000002A8 25F300              <1>         and     ax, 0xF3                ;下位6ビットのみ有効
    24                              <1> 
    25 000002AB C0E906              <1>         shr     cl, 6                   ; cx = シリンダ数
    26 000002AE C1C908              <1>         ror     cx, 8                   ;
    27 000002B1 41                  <1>         inc     cx
    28                              <1> 
    29 000002B2 0FB6DE              <1>         movzx   bx, dh
    30 000002B5 43                  <1>         inc     bx
    31                              <1> 
    32 000002B6 894C02              <1>         mov     [si + drive.cyln], cx    ; drive.syln シリンダ数
    33 000002B9 895C04              <1>         mov     [si + drive.head], bx    ; drive.head ヘッド数
    34 000002BC 894406              <1>         mov     [si + drive.sect], ax    ; drive.sect セクタ数
    35                              <1> 
    36 000002BF EB03                <1>         jmp     .10E
    37                              <1> 
    38                              <1> .10F:   
    39 000002C1 B80000              <1>         mov     ax, 0
    40                              <1> .10E:
    41                              <1> 
    42 000002C4 5F                  <1>         pop     di
    43 000002C5 5E                  <1>         pop     si
    44 000002C6 07                  <1>         pop     es
    45 000002C7 59                  <1>         pop     cx
    46 000002C8 5B                  <1>         pop     bx
    47                              <1> 
    48 000002C9 89EC                <1>         mov     sp, bp
    49 000002CB 5D                  <1>         pop     bp
    50                              <1> 
    51 000002CC C3                  <1>         ret
   134                                  %include	"../modules/real/get_font_adr.s"
     1                              <1> get_font_adr:     
     2                              <1>                             ;    +4|  フォントアドレス格納場所        
     3 000002CD 55                  <1>         push    bp          ;    +2|   IP戻り値
     4 000002CE 89E5                <1>         mov     bp, sp      ;  BP+0|   BP
     5                              <1> 
     6                              <1> 
     7 000002D0 50                  <1>         push    ax
     8 000002D1 53                  <1>         push    bx
     9 000002D2 56                  <1>         push    si
    10 000002D3 06                  <1>         push    es
    11 000002D4 55                  <1>         push    bp
    12                              <1> 
    13 000002D5 8B7604              <1>         mov     si, [bp + 4]        ;引数であるフォントアドレス格納場所を取得
    14                              <1>         
    15 000002D8 B83011              <1>         mov     ax, 0x1130       ;BIOS から フォントアドレスを取得するためのもの
    16 000002DB B706                <1>         mov     bh, 0x06           ;サイズの指定 8x16 font (vga/mcga)
    17 000002DD CD10                <1>         int     10h
    18                              <1> 
    19 000002DF 8C04                <1>         mov     [si + 0], es      ;dst[0] = セグメント
    20 000002E1 896C02              <1>         mov     [si + 2], bp      ;dst[1] = オフセット
    21                              <1> 
    22 000002E4 5D                  <1>         pop     bp 
    23 000002E5 07                  <1>         pop     es
    24 000002E6 5E                  <1>         pop     si
    25 000002E7 5B                  <1>         pop     bx
    26 000002E8 58                  <1>         pop     ax
    27                              <1> 
    28 000002E9 89EC                <1>         mov     sp, bp
    29 000002EB 5D                  <1>         pop     bp
    30                              <1> 
    31 000002EC C3                  <1>         ret
   135                                  %include	"../modules/real/get_mem_info.s"
     1                              <1> get_mem_info:
     2                              <1> 
     3 000002ED 6650                <1>         push    eax
     4 000002EF 6653                <1>         push    ebx
     5 000002F1 6651                <1>         push    ecx
     6 000002F3 6652                <1>         push    edx
     7 000002F5 56                  <1>         push    si
     8 000002F6 57                  <1>         push    di
     9 000002F7 55                  <1>         push    bp
    10                              <1> 
    11 000002F8 BD0000              <1>         mov     bp, 0                   ; lines = 0 //行数
    12 000002FB 66BB00000000        <1>         mov     ebx, 0                  ; index = 0
    13                              <1> .10L:
    14                              <1> 
    15 00000301 66B820E80000        <1>         mov    eax, 0x0000E820          ; EAX = 0xE820
    16                              <1> 
    17 00000307 66B914000000        <1>         mov     ecx, E820_RECORD_SIZE   ;ebx = インデックス
    18 0000030D 66BA50414D53        <1>         mov     edx, 'PAMS'             ; ecx = サイズ
    19 00000313 BF[9203]            <1>         mov     di, .b0                 ; edx = 'SMAP'
    20 00000316 CD15                <1>         int     0x15                    ; es:di = バッファ
    21                              <1> 
    22 00000318 663D50414D53        <1>         cmp     eax, 'PAMS'
    23 0000031E 7402                <1>         je      .12E
    24 00000320 EB4E                <1>         jmp     .10E
    25                              <1> .12E:
    26 00000322 7302                <1>         jnc     .14E
    27 00000324 EB4A                <1>         jmp     .10E
    28                              <1> 
    29                              <1> .14E:
    30 00000326 57E87C0083C402      <1>         cdecl   put_mem_info, di       ; 1レコード分のメモリ情報を表示
    31                              <1> 
    32                              <1>         ; acpi data のアドレスを取得
    33                              <1> 
    34 0000032D 668B4510            <1>         mov     eax, [di + 16]          ; eax = レコードタイプ
    35 00000331 66B803000000        <1>         mov     eax, 3                  ; 3 の時 acpiデータが有る
    36 00000337 750F                <1>         jne     .15E
    37                              <1> 
    38 00000339 668B05              <1>         mov     eax, [di + 0]
    39 0000033C 66A3[0402]          <1>         mov     [ACPI_DATA.adr], eax         
    40                              <1> 
    41 00000340 668B4508            <1>         mov     eax, [di + 8]
    42 00000344 66A3[0802]          <1>         mov     [ACPI_DATA.len], eax 
    43                              <1> .15E:
    44 00000348 6683FB00            <1>         cmp     ebx, 0              ;   if(ebx != 0) // 最終レコードを取得するとebx に0が入る
    45 0000034C 741C                <1>         jz      .16E
    46                              <1> 
    47 0000034E 45                  <1>         inc     bp                  ;line++
    48 0000034F 83E507              <1>         and     bp, 0x07            ;lines &= 0x07
    49 00000352 7516                <1>         jnz     .16E                ;if lines==0
    50                              <1> 
    51 00000354 68[7C03]E84AFD83C4- <1>         cdecl   puts, .s2
    51 0000035C 02                  <1>
    52                              <1> 
    53 0000035D B410                <1>         mov     ah, 0x10            ; al = bios(0x16, 0x10) キー入力待ち
    54 0000035F CD16                <1>         int     0x16
    55                              <1> 
    56 00000361 68[8603]E83DFD83C4- <1>         cdecl   puts, .s3
    56 00000369 02                  <1>
    57                              <1> .16E:
    58 0000036A 6683FB00            <1>         cmp     ebx, 0
    59 0000036E 7591                <1>         jne     .10L
    60                              <1> .10E:
    61 00000370 5D                  <1> 	pop	bp
    62 00000371 5F                  <1> 	pop	di
    63 00000372 5E                  <1> 	pop	si
    64 00000373 665A                <1> 	pop	edx
    65 00000375 6659                <1> 	pop	ecx
    66 00000377 665B                <1> 	pop	ebx
    67 00000379 6658                <1> 	pop	eax
    68                              <1> 
    69 0000037B C3                  <1> 	ret
    70                              <1> 
    71                              <1> 
    72 0000037C 3C6D6F72652E2E2E3E- <1> .s2:    db "<more...>", 0
    72 00000385 00                  <1>
    73 00000386 0D2020202020202020- <1> .s3:    db 0x0D, "         ", 0x0D, 0
    73 0000038F 200D00              <1>
    74                              <1> 
    75                              <1> 
    76 00000392 00<rept>            <1> .b0:	times E820_RECORD_SIZE db 0
    77                              <1> 
    78                              <1> put_mem_info:
    79                              <1>         
    80 000003A6 55                  <1>         push    bp
    81 000003A7 89E5                <1>         mov     bp, sp
    82                              <1> 
    83 000003A9 53                  <1>         push    bx
    84 000003AA 56                  <1>         push    si
    85                              <1> 
    86 000003AB 8B7604              <1>         mov     si, [bp + 4]
    87                              <1> 
    88 000003AE 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    88 000003B5 [8504]FF7406E84FFE- <1>
    88 000003BD 83C40A              <1>
    89 000003C0 6A046A106A0468-     <1>         cdecl   itoa, word [si + 4], .p2 + 4, 4, 16, 0b0100
    89 000003C7 [8904]FF7404E83DFE- <1>
    89 000003CF 83C40A              <1>
    90 000003D2 6A046A106A0468-     <1>         cdecl   itoa, word [si + 2], .p3 + 0, 4, 16, 0b0100
    90 000003D9 [8E04]FF7402E82BFE- <1>
    90 000003E1 83C40A              <1>
    91 000003E4 6A046A106A0468-     <1>         cdecl   itoa, word [si + 0], .p3 + 4, 4, 16, 0b0100
    91 000003EB [9204]FF34E81AFE83- <1>
    91 000003F3 C40A                <1>
    92                              <1> 
    93 000003F5 6A046A106A0468-     <1>         cdecl   itoa, word [si + 14], .p4 + 0, 4, 16, 0b0100
    93 000003FC [9704]FF740EE808FE- <1>
    93 00000404 83C40A              <1>
    94 00000407 6A046A106A0468-     <1>         cdecl   itoa, word [si + 12], .p4 + 4, 4, 16, 0b0100
    94 0000040E [9B04]FF740CE8F6FD- <1>
    94 00000416 83C40A              <1>
    95 00000419 6A046A106A0468-     <1>         cdecl   itoa, word [si + 10], .p5 + 0, 4, 16, 0b0100
    95 00000420 [A004]FF740AE8E4FD- <1>
    95 00000428 83C40A              <1>
    96 0000042B 6A046A106A0468-     <1>         cdecl   itoa, word [si + 8], .p5 + 4, 4, 16, 0b0100
    96 00000432 [A404]FF7408E8D2FD- <1>
    96 0000043A 83C40A              <1>
    97                              <1> 
    98 0000043D 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    98 00000444 [8504]FF7406E8C0FD- <1>
    98 0000044C 83C40A              <1>
    99 0000044F 6A046A106A0468-     <1>         cdecl   itoa, word [si + 6], .p2 + 0, 4, 16, 0b0100
    99 00000456 [8504]FF7406E8AEFD- <1>
    99 0000045E 83C40A              <1>
   100                              <1> 
   101 00000461 68[8404]E83DFC83C4- <1>         cdecl   puts, .s1
   101 00000469 02                  <1>
   102                              <1> 
   103 0000046A 8B5C10              <1>         mov     bx, [si + 16]   ;Type文字列を表示したい
   104 0000046D 83E307              <1>         and     bx, 0x07                
   105 00000470 D1E3                <1>         shl     bx, 1
   106 00000472 81C3[0605]          <1>         add     bx, .t0         ;テーブルの先頭アドレスを加算
   107 00000476 FF37E829FC83C402    <1>         cdecl   puts, word[bx]
   108                              <1> 
   109 0000047E 5E                  <1>         pop     si
   110 0000047F 5B                  <1> 	pop	bx
   111                              <1> 
   112 00000480 89EC                <1> 	mov	sp, bp
   113 00000482 5D                  <1> 	pop	bp
   114                              <1> 
   115 00000483 C3                  <1> 	ret
   116                              <1> 
   117                              <1> 
   118                              <1> 
   119 00000484 20                  <1> .s1:	db " "
   120 00000485 5A5A5A5A5A5A5A5A5F  <1> .p2:	db "ZZZZZZZZ_"
   121 0000048E 5A5A5A5A5A5A5A5A20  <1> .p3:	db "ZZZZZZZZ "
   122 00000497 5A5A5A5A5A5A5A5A5F  <1> .p4:	db "ZZZZZZZZ_"
   123 000004A0 5A5A5A5A5A5A5A5A20  <1> .p5:	db "ZZZZZZZZ "
   124 000004A9 5A5A5A5A5A5A5A5A00  <1> .p6:	db "ZZZZZZZZ", 0
   125                              <1> 
   126 000004B2 2028556E6B6E6F776E- <1> .s4:	db " (Unknown)", 0x0A, 0x0D, 0
   126 000004BB 290A0D00            <1>
   127 000004BF 2028757361626C6529- <1> .s5:	db " (usable)", 0x0A, 0x0D, 0
   127 000004C8 0A0D00              <1>
   128 000004CB 202872657365727665- <1> .s6:	db " (reserved)", 0x0A, 0x0D, 0
   128 000004D4 64290A0D00          <1>
   129 000004D9 202841435049206461- <1> .s7:	db " (ACPI data)", 0x0A, 0x0D, 0
   129 000004E2 7461290A0D00        <1>
   130 000004E8 202841435049204E56- <1> .s8:	db " (ACPI NVS)", 0x0A, 0x0D, 0
   130 000004F1 53290A0D00          <1>
   131 000004F6 2028626164206D656D- <1> .s9:	db " (bad memory)", 0x0A, 0x0D, 0
   131 000004FF 6F7279290A0D00      <1>
   132                              <1> 
   133 00000506 [B204][BF04][CB04]- <1> .t0:	dw .s4, .s5, .s6, .s7, .s8, .s9, .s4, .s4
   133 0000050C [D904][E804][F604]- <1>
   133 00000512 [B204][B204]        <1>
   134                              <1> 
   135                              <1>         
   136                                  %include	"../modules/real/kbc.s"
     1                              <1> KBC_Data_Write:
     2 00000516 55                  <1>         push    bp
     3 00000517 89E5                <1>         mov     bp, sp
     4 00000519 51                  <1>         push    cx
     5                              <1> 
     6 0000051A B90000              <1>         mov     cx, 0
     7                              <1> .10L:
     8 0000051D E464                <1>         in      al, 0x64        ; AL = inp(0x64) KBCステータス
     9 0000051F A802                <1>         test    al, 0x02        ; ZF = AL & 0x02  書き込み可能か？
    10 00000521 E0FA                <1>         loopnz  .10L
    11                              <1> 
    12 00000523 83F900              <1>         cmp     cx, 0
    13 00000526 7405                <1>         jz     .20E
    14                              <1> 
    15 00000528 8A4604              <1>         mov     al, [bp + 4]    ; AL = データ
    16 0000052B E660                <1>         out     0x60, al        ; outp(0x60, AL) 60番ポートつまりデータとしてpcが解釈
    17                              <1> .20E:
    18 0000052D 89C8                <1>         mov     ax, cx
    19                              <1>         
    20 0000052F 59                  <1>         pop     cx
    21 00000530 89EC                <1>         mov     sp, bp
    22 00000532 5D                  <1>         pop     bp
    23 00000533 C3                  <1>         ret                     ;うまくいくとゼロ以外が帰る
    24                              <1> 
    25                              <1> KBC_Data_Read:
    26 00000534 55                  <1>         push    bp
    27 00000535 89E5                <1>         mov     bp, sp
    28 00000537 51                  <1>         push    cx
    29 00000538 57                  <1>         push    di
    30                              <1> 
    31 00000539 B90000              <1>         mov     cx, 0
    32                              <1> .10L:
    33 0000053C E464                <1>         in      al, 0x64        ; AL = inp(0x64) KBCステータス
    34 0000053E A801                <1>         test    al, 0x01        ; ZF = AL & 0x01  読み込み可能か？
    35 00000540 E1FA                <1>         loopz  .10L
    36                              <1> 
    37 00000542 83F900              <1>         cmp     cx, 0
    38 00000545 7409                <1>         jz     .20E
    39                              <1> 
    40 00000547 B400                <1>         mov     ah, 0x00        ; ah = 0x00
    41 00000549 E460                <1>         in      al, 0x60        ; al = inp(0x60)
    42                              <1> 
    43 0000054B 8B7E04              <1>         mov     di, [bp + 4]    ; di = ptr
    44 0000054E 8905                <1>         mov     [di + 0], ax    ; 
    45                              <1> .20E:
    46 00000550 89C8                <1>         mov     ax, cx
    47                              <1>         
    48 00000552 5F                  <1>         pop     di
    49 00000553 59                  <1>         pop     cx
    50 00000554 89EC                <1>         mov     sp, bp
    51 00000556 5D                  <1>         pop     bp
    52 00000557 C3                  <1>         ret
    53                              <1> 
    54                              <1> KBC_Cmd_Write:         ; KBC_Data_Writeとほぼ同じ
    55 00000558 55                  <1>         push    bp
    56 00000559 89E5                <1>         mov     bp, sp
    57 0000055B 51                  <1>         push    cx
    58                              <1> 
    59 0000055C B90000              <1>         mov     cx, 0
    60                              <1> .10L:
    61 0000055F E464                <1>         in      al, 0x64        
    62 00000561 A802                <1>         test    al, 0x02        
    63 00000563 E0FA                <1>         loopnz  .10L
    64                              <1> 
    65 00000565 83F900              <1>         cmp     cx, 0
    66 00000568 7405                <1>         jz     .20E
    67                              <1> 
    68 0000056A 8A4604              <1>         mov     al, [bp + 4]   
    69 0000056D E664                <1>         out     0x64, al        ; outp(0x64, AL)  64ポート つまり コマンド書き込みとしてPCが解釈
    70                              <1> .20E:
    71 0000056F 89C8                <1>         mov     ax, cx
    72                              <1>         
    73 00000571 59                  <1>         pop     cx
    74 00000572 89EC                <1>         mov     sp, bp
    75 00000574 5D                  <1>         pop     bp
    76 00000575 C3                  <1>         ret
   137                                  %include	"../modules/real/lba_chs.s"
     1                              <1> lba_chs:
     2                              <1> ;■書式		: void lba_chs(drive, drv_chs, lba);
     3                              <1> ;
     4                              <1> ;■引数
     5                              <1> ;	drive	: drive構造体のアドレス
     6                              <1> ;			:（ドライブパラメータが格納されている）
     7                              <1> ;	drv_chs	: drive構造体のアドレス
     8                              <1> ;			:（変換後のシリンダ番号、ヘッド番号そしてセクタ番号を保存する）
     9                              <1> ;	lba		: LBA
    10                              <1> ;
    11                              <1> ;■戻り値	: 成功(0以外)、失敗(0)
    12                              <1> 
    13 00000576 55                  <1>         push    bp
    14 00000577 89E5                <1>         mov     bp, sp
    15                              <1> 
    16 00000579 50                  <1>         push    ax
    17 0000057A 53                  <1>         push    bx 
    18 0000057B 52                  <1>         push    dx
    19 0000057C 56                  <1>         push    si
    20 0000057D 57                  <1>         push    di
    21                              <1> 
    22 0000057E 8B7604              <1>         mov     si, [bp + 4]
    23 00000581 8B7E06              <1>         mov     di, [bp + 6]
    24                              <1> 
    25 00000584 8A4404              <1>         mov     al, [si + drive.head]       ;最大ヘッド数
    26 00000587 F66406              <1>         mul     byte [si + drive.sect]      ; 上 * 最大シリンダ数 
    27 0000058A 89C3                <1>         mov     bx, ax
    28 0000058C BA0000              <1>         mov     dx, 0                       ;LBA上位2バイト
    29 0000058F 8B4608              <1>         mov     ax, [bp + 8]                ; 下位バイト
    30 00000592 F7F3                <1>         div     bx                          ; dx:ax % bx ; 残り
    31                              <1>                                             ; dx:ax / bx ; シリンダ番号
    32 00000594 894502              <1>         mov     [di + drive.cyln], ax       ; シリンダ番号
    33                              <1> 
    34 00000597 89D0                <1>         mov     ax, dx
    35 00000599 F67406              <1>         div     byte [si + drive.sect]      ; ah = ax % 最大セクタ数
    36                              <1> 
    37 0000059C 0FB6D4              <1>         movzx   dx, ah                      ; dx = セクタ番号
    38 0000059F 42                  <1>         inc     dx                              ; 自然数にするため
    39                              <1> 
    40 000005A0 B400                <1>         mov     ah, 0x00                    ; AX = ヘッド位置
    41                              <1> 
    42 000005A2 894504              <1>         mov     [di + drive.head], ax       ;  ヘッダ番号
    43 000005A5 895506              <1>         mov     [di + drive.sect], dx       ; drv_chs.sect = セクタ番号
    44                              <1> 
    45 000005A8 5F                  <1>         pop     di
    46 000005A9 5E                  <1>         pop     si
    47 000005AA 5A                  <1>         pop     dx
    48 000005AB 5B                  <1>         pop     bx
    49 000005AC 58                  <1>         pop     ax
    50                              <1> 
    51 000005AD 89EC                <1>         mov     sp, bp
    52 000005AF 5D                  <1>         pop     bp
    53                              <1> 
    54 000005B0 C3                  <1>         ret
   138                                  %include	"../modules/real/read_lba.s"
     1                              <1> read_lba:
     2                              <1> 
     3 000005B1 55                  <1>         push    bp
     4 000005B2 89E5                <1>         mov     bp, sp
     5 000005B4 56                  <1>         push    si
     6                              <1> 
     7 000005B5 8B7604              <1>         mov     si, [bp + 4]        ; ドライブ情報
     8                              <1> 
     9 000005B8 8B4606              <1>         mov     ax, [bp + 6]        ; LBA
    10 000005BB 5068[E005]56E8B3FF- <1>         cdecl   lba_chs, si, .chs, ax; lba_chs(drive, .chs, ax);
    10 000005C3 83C406              <1>
    11                              <1> 
    12 000005C6 8A04                <1>         mov     al, [si + drive.no]
    13 000005C8 A2[E005]            <1>         mov     [.chs + drive.no], al; ドライブ番号
    14                              <1> 
    15 000005CB FF760AFF760868-     <1>         cdecl   read_chs, .chs, word [bp + 8], word [bp + 10] ; ax = read_chs(.chs, セクタ数, ofs)
    15 000005D2 [E005]E82BFB83C406  <1>
    16                              <1> 
    17 000005DA 5E                  <1>         pop     si
    18 000005DB 89EC                <1>         mov     sp, bp
    19 000005DD 5D                  <1>         pop     bp
    20                              <1> 
    21 000005DE C3                  <1>         ret
    22                              <1> 
    23 000005DF 90                  <1> ALIGN 2
    24 000005E0 00<rept>            <1> .chs:   times drive_size        db  0
   139                                  %include	"../modules/real/memcpy.s"
     1                              <1> memcpy:
     2                              <1> 
     3 000005E8 55                  <1>         push    bp
     4 000005E9 89E5                <1>         mov     bp,sp
     5                              <1> 
     6 000005EB 51                  <1>         push    cx
     7 000005EC 56                  <1>         push    si
     8 000005ED 57                  <1>         push    di
     9                              <1> 
    10 000005EE FC                  <1>         cld
    11 000005EF 8B7E04              <1>         mov     di, [bp + 4]
    12 000005F2 8B7606              <1>         mov     si, [bp + 6]
    13 000005F5 8B4E08              <1>         mov     cx, [bp + 8]
    14                              <1> 
    15 000005F8 F3A4                <1>         rep movsb
    16                              <1> 
    17 000005FA 5F                  <1>         pop     di
    18 000005FB 5E                  <1>         pop     si
    19 000005FC 59                  <1>         pop     cx
    20                              <1> 
    21 000005FD 89EC                <1>         mov     sp, bp
    22 000005FF 5D                  <1>         pop     bp
    23                              <1> 
    24 00000600 C3                  <1>         ret
   140                                  %include	"../modules/real/memcmp.s"
     1                              <1> memcmp:
     2 00000601 55                  <1>         push    bp
     3 00000602 89E5                <1>         mov     bp, sp
     4                              <1> 
     5 00000604 53                  <1>         push    bx
     6 00000605 51                  <1>         push    cx
     7 00000606 52                  <1>         push    dx
     8 00000607 56                  <1>         push    si
     9 00000608 57                  <1>         push    di
    10                              <1> 
    11 00000609 FC                  <1>         cld
    12 0000060A 8B7604              <1>         mov     si, [bp + 4]
    13 0000060D 8B7E06              <1>         mov     di, [bp + 6]
    14 00000610 8B4E08              <1>         mov     cx, [bp + 8]
    15                              <1> 
    16 00000613 F3A6                <1>         repe cmpsb
    17 00000615 7505                <1>         jnz     .10F
    18 00000617 B80000              <1>         mov     ax, 0
    19 0000061A EB03                <1>         jmp     .10E
    20                              <1> .10F:
    21 0000061C B8FFFF              <1>         mov     ax, -1
    22                              <1> .10E:
    23                              <1>         
    24 0000061F 5F                  <1>         pop     di
    25 00000620 5E                  <1>         pop     si
    26 00000621 5A                  <1>         pop     dx
    27 00000622 59                  <1>         pop     cx
    28 00000623 5B                  <1>         pop     bx
    29                              <1> 
    30 00000624 89EC                <1>         mov     sp, bp
    31 00000626 5D                  <1>         pop     bp
   141                                  
   142                                  ;************************************************************************
   143                                  ;	ブート処理の第2ステージ
   144                                  ;************************************************************************
   145                                  stage_2:
   146                                  		;---------------------------------------
   147                                  		; 文字列を表示
   148                                  		;---------------------------------------
   149 00000627 68[A106]E877FA83C4-     		cdecl	puts, .s0						; puts(.s0);
   149 0000062F 02                 
   150                                  
   151                                  		;---------------------------------------
   152                                  		; ドライブ情報を取得
   153                                  		;---------------------------------------
   154 00000630 68[9C00]E856FC83C4-     		cdecl	get_drive_param, BOOT			; get_drive_param(DX, BOOT.CYLN);
   154 00000638 02                 
   155 00000639 83F800                  		cmp		ax, 0							; if (0 == AX)
   156 0000063C 750C                    .10Q:	jne		.10E							; {
   157 0000063E 68[D806]E860FA83C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   157 00000646 02                 
   158 00000647 E879FA                  		call	reboot							;   reboot(); // 再起動
   159                                  .10E:											; }
   160                                  
   161                                  		;---------------------------------------
   162                                  		; ドライブ情報を表示
   163                                  		;---------------------------------------
   164 0000064A A1[9C00]                		mov		ax, [BOOT + drive.no]			; AX = ブートドライブ;
   165 0000064D 6A046A106A0268-         		cdecl	itoa, ax, .p1, 2, 16, 0b0100	; 
   165 00000654 [B906]50E8B2FB83C4-
   165 0000065C 0A                 
   166 0000065D A1[9E00]                		mov		ax, [BOOT + drive.cyln]			; 
   167 00000660 6A046A106A0468-         		cdecl	itoa, ax, .p2, 4, 16, 0b0100	; 
   167 00000667 [C106]50E89FFB83C4-
   167 0000066F 0A                 
   168 00000670 A1[A000]                		mov		ax, [BOOT + drive.head]			; AX = ヘッド数;
   169 00000673 6A046A106A0268-         		cdecl	itoa, ax, .p3, 2, 16, 0b0100	; 
   169 0000067A [CB06]50E88CFB83C4-
   169 00000682 0A                 
   170 00000683 A1[A200]                		mov		ax, [BOOT + drive.sect]			; AX = トラックあたりのセクタ数;
   171 00000686 6A046A106A0268-         		cdecl	itoa, ax, .p4, 2, 16, 0b0100	; 
   171 0000068D [D306]50E879FB83C4-
   171 00000695 0A                 
   172 00000696 68[B006]E808FA83C4-     		cdecl	puts, .s1
   172 0000069E 02                 
   173                                  
   174                                  		;---------------------------------------
   175                                  		; 次のステージへ移行
   176                                  		;---------------------------------------
   177 0000069F EB52                    		jmp		stage_3rd						; 次のステージへ移行
   178                                  
   179                                  		;---------------------------------------
   180                                  		; データ
   181                                  		;---------------------------------------
   182 000006A1 326E64207374616765-     .s0		db	"2nd stage...", 0x0A, 0x0D, 0
   182 000006AA 2E2E2E0A0D00       
   183                                  
   184 000006B0 2044726976653A3078      .s1		db	" Drive:0x"
   185 000006B9 20202C20433A3078        .p1		db	"  , C:0x"
   186 000006C1 202020202C20483A30-     .p2		db	"    , H:0x"
   186 000006CA 78                 
   187 000006CB 20202C20533A3078        .p3		db	"  , S:0x"
   188 000006D3 20200A0D00              .p4		db	"  ", 0x0A, 0x0D, 0
   189                                  
   190 000006D8 43616E277420676574-     .e0		db	"Can't get drive parameter.", 0
   190 000006E1 206472697665207061-
   190 000006EA 72616D657465722E00 
   191                                  
   192                                  ;************************************************************************
   193                                  ;	ブート処理の第3ステージ
   194                                  ;************************************************************************
   195                                  stage_3rd:
   196                                  		;---------------------------------------
   197                                  		; 文字列を表示
   198                                  		;---------------------------------------
   199 000006F3 68[7007]E8ABF983C4-     		cdecl	puts, .s0
   199 000006FB 02                 
   200                                  
   201                                  		;---------------------------------------
   202                                  		; プロテクトモードで使用するフォントは、
   203                                  		; BIOSに内蔵されたものを流用する
   204                                  		;---------------------------------------
   205 000006FC 68[0002]E8CBFB83C4-     		cdecl	get_font_adr, FONT				; // BIOSのフォントアドレスを取得
   205 00000704 02                 
   206                                  
   207                                  		;---------------------------------------
   208                                  		; フォントアドレスの表示
   209                                  		;---------------------------------------
   210 00000705 6A046A106A0468-         		cdecl	itoa, word [FONT.seg], .p1, 4, 16, 0b0100
   210 0000070C [8D07]FF36[0002]E8-
   210 00000713 F7FA83C40A         
   211 00000718 6A046A106A0468-         		cdecl	itoa, word [FONT.off], .p2, 4, 16, 0b0100
   211 0000071F [9207]FF36[0202]E8-
   211 00000726 E4FA83C40A         
   212 0000072B 68[7F07]E873F983C4-     		cdecl	puts, .s1
   212 00000733 02                 
   213                                  
   214                                  		;---------------------------------------
   215                                  		; メモリ情報の取得と表示
   216                                  		;---------------------------------------
   217 00000734 E8B6FB                  		cdecl	get_mem_info					; get_mem_info();
   218                                  
   219 00000737 66A1[0402]              		mov		eax, [ACPI_DATA.adr]			; EAX = ACPI_DATA.adr;
   220 0000073B 6683F800                		cmp		eax, 0							; if (EAX)
   221 0000073F 742D                    		je		.10E							; {
   222                                  
   223 00000741 6A046A106A0468-         		cdecl	itoa, ax, .p4, 4, 16, 0b0100	;   itoa(AX); // 下位アドレスを変換
   223 00000748 [AB07]50E8BEFA83C4-
   223 00000750 0A                 
   224 00000751 66C1E810                		shr		eax, 16							;   EAX >>= 16;
   225 00000755 6A046A106A0468-         		cdecl	itoa, ax, .p3, 4, 16, 0b0100	;   itoa(AX); // 上位アドレスを変換
   225 0000075C [A707]50E8AAFA83C4-
   225 00000764 0A                 
   226                                  
   227 00000765 68[9C07]E839F983C4-     		cdecl	puts, .s2						;   puts(.s2); // アドレスを表示
   227 0000076D 02                 
   228                                  .10E:											; }
   229                                  
   230                                  		;---------------------------------------
   231                                  		; 次のステージへ移行
   232                                  		;---------------------------------------
   233 0000076E EB42                    		jmp		stage_4							; 次のステージへ移行
   234                                  
   235                                  		;---------------------------------------
   236                                  		; データ
   237                                  		;---------------------------------------
   238 00000770 337264207374616765-     .s0:	db	"3rd stage...", 0x0A, 0x0D, 0
   238 00000779 2E2E2E0A0D00       
   239                                  
   240 0000077F 20466F6E7420416464-     .s1:	db	" Font Address="
   240 00000788 726573733D         
   241 0000078D 5A5A5A5A3A              .p1:	db	"ZZZZ:"
   242 00000792 5A5A5A5A0A0D00          .p2:	db	"ZZZZ", 0x0A, 0x0D, 0
   243 00000799 0A0D00                  		db	0x0A, 0x0D, 0
   244                                  
   245 0000079C 204143504920646174-     .s2:	db	" ACPI data="
   245 000007A5 613D               
   246 000007A7 5A5A5A5A                .p3:	db	"ZZZZ"
   247 000007AB 5A5A5A5A0A0D00          .p4:	db	"ZZZZ", 0x0A, 0x0D, 0
   248                                  
   249                                  ;************************************************************************
   250                                  ;	ブート処理の第4ステージ
   251                                  ;************************************************************************
   252                                  stage_4:
   253                                  		;---------------------------------------
   254                                  		; 文字列を表示
   255                                  		;---------------------------------------
   256 000007B2 68[7408]E8ECF883C4-     		cdecl	puts, .s0
   256 000007BA 02                 
   257                                  
   258                                  		;---------------------------------------
   259                                  		; A20ゲートの有効化
   260                                  		;---------------------------------------
   261 000007BB FA                      		cli										;   // 割り込み禁止
   262                                  												;   
   263 000007BC 68AD00E896FD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   264                                  												;   
   265 000007C5 68D000E88DFD83C402      		cdecl	KBC_Cmd_Write, 0xD0				;   // 出力ポート読み出しコマンド
   266 000007CE 68[9D08]E860FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 出力ポートデータ
   266 000007D6 02                 
   267                                  												;   
   268 000007D7 8A1E[9D08]              		mov		bl, [.key]						;   BL  = key;
   269 000007DB 80CB02                  		or		bl, 0x02						;   BL |= 0x02; // A20ゲート有効化
   270                                  												;   
   271 000007DE 68D100E874FD83C402      		cdecl	KBC_Cmd_Write, 0xD1				;   // 出力ポート書き込みコマンド
   272 000007E7 53E82BFD83C402          		cdecl	KBC_Data_Write, bx				;   // 出力ポートデータ
   273                                  												;   
   274 000007EE 68AE00E864FD83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   275                                  												;   
   276 000007F7 FB                      		sti										;   // 割り込み許可
   277                                  
   278                                  		;---------------------------------------
   279                                  		; キーボードLEDのテスト
   280                                  		;---------------------------------------
   281 000007F8 BB0000                  		mov		bx, 0							; CX = LEDの初期値;
   282                                  .10L:											; do
   283                                  												; {
   284 000007FB B400                    		mov		ah, 0x00						;   // キー入力待ち
   285 000007FD CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   286                                  												;   
   287 000007FF 3C31                    		cmp		al, '1'							;   if (AL < '1')
   288 00000801 7266                    		jb		.10E							;     break;
   289                                  												;   
   290 00000803 3C33                    		cmp		al, '3'							;   if ('3' < AL)
   291 00000805 7762                    		ja		.10E							;     break;
   292                                  												;   
   293 00000807 88C1                    		mov		cl, al							;   CL   = キー入力;
   294 00000809 FEC9                    		dec		cl								;   CL  -= 1;       // 1減算
   295 0000080B 80E103                  		and		cl, 0x03						;   CL  &= 0x03;    // 0～2に制限
   296 0000080E B80100                  		mov		ax, 0x0001						;   AX   = 0x0001;  // ビット変換用
   297 00000811 D3E0                    		shl		ax, cl							;   AX <<= CL;      // 0～2ビット左シフト
   298 00000813 31C3                    		xor		bx, ax							;   BX  ^= AX;      // ビット反転
   299                                  
   300                                  		;---------------------------------------
   301                                  		; LEDコマンドの送信
   302                                  		;---------------------------------------
   303 00000815 FA                      		cli										;   // 割り込み禁止
   304                                  												;   
   305 00000816 68AD00E83CFD83C402      		cdecl	KBC_Cmd_Write, 0xAD				;   // キーボード無効化
   306                                  												;   
   307 0000081F 68ED00E8F1FC83C402      		cdecl	KBC_Data_Write, 0xED			;   // LEDコマンド
   308 00000828 68[9D08]E806FD83C4-     		cdecl	KBC_Data_Read, .key				;   // 受信応答
   308 00000830 02                 
   309                                  												;   
   310 00000831 803E[9D08]FA            		cmp		[.key], byte 0xFA				;   if (0xFA == key)
   311 00000836 7509                    		jne		.11F							;   {
   312                                  												;     
   313 00000838 53E8DAFC83C402          		cdecl	KBC_Data_Write, bx				;     // LEDデータ出力
   314                                  												;   }
   315 0000083F EB1C                    		jmp		.11E							;   else
   316                                  .11F:											;   {
   317 00000841 6A046A106A0268-         		cdecl	itoa, word [.key], .e1, 2, 16, 0b0100
   317 00000848 [9908]FF36[9D08]E8-
   317 0000084F BBF983C40A         
   318 00000854 68[9808]E84AF883C4-     		cdecl	puts, .e0						;     // 受信コードを表示
   318 0000085C 02                 
   319                                  .11E:											;   }
   320                                  												;   
   321 0000085D 68AE00E8F5FC83C402      		cdecl	KBC_Cmd_Write, 0xAE				;   // キーボード有効化
   322                                  												;   
   323 00000866 FB                      		sti										;   // 割り込み許可
   324                                  												;   
   325 00000867 EB92                    		jmp		.10L							; } while (1);
   326                                  .10E:
   327                                  
   328                                  		;---------------------------------------
   329                                  		; 文字列を表示
   330                                  		;---------------------------------------
   331 00000869 68[8308]E835F883C4-     		cdecl	puts, .s1
   331 00000871 02                 
   332                                  
   333                                  		;---------------------------------------
   334                                  		; 次のステージへ移行
   335                                  		;---------------------------------------
   336 00000872 EB2B                    		jmp		stage_5							; 次のステージへ移行
   337                                  
   338 00000874 347468207374616765-     .s0:	db	"4th stage...", 0x0A, 0x0D, 0
   338 0000087D 2E2E2E0A0D00       
   339 00000883 204132302047617465-     .s1:	db	" A20 Gate Enabled.", 0x0A, 0x0D, 0
   339 0000088C 20456E61626C65642E-
   339 00000895 0A0D00             
   340 00000898 5B                      .e0:	db	"["
   341 00000899 5A5A5D00                .e1:	db	"ZZ]", 0
   342                                  
   343 0000089D 0000                    .key:	dw	0
   344                                  
   345                                  ;************************************************************************
   346                                  ;	ブート処理の第5ステージ
   347                                  ;************************************************************************
   348                                  stage_5:
   349                                  		;---------------------------------------
   350                                  		; 文字列を表示
   351                                  		;---------------------------------------
   352 0000089F 68[CB08]E8FFF783C4-     		cdecl	puts, .s0
   352 000008A7 02                 
   353                                  
   354                                  		;---------------------------------------
   355                                  		; カーネルを読み込む
   356                                  		;---------------------------------------
   357 000008A8 68009C6A106A1068-       		cdecl	read_lba, BOOT, BOOT_SECT, KERNEL_SECT, BOOT_END
   357 000008B0 [9C00]E8FCFC83C408 
   358                                  												; AX = read_lba(.lba, ...);
   359 000008B8 83F810                  		cmp		ax, KERNEL_SECT					; if (AX != CX)
   360 000008BB 740C                    .10Q:	jz		.10E							; {
   361 000008BD 68[DA08]E8E1F783C4-     .10T:	cdecl	puts, .e0						;   puts(.e0);
   361 000008C5 02                 
   362 000008C6 E8FAF7                  		call	reboot							;   reboot(); // 再起動
   363                                  .10E:											; }
   364                                  												; 
   365                                  
   366                                  		;---------------------------------------
   367                                  		; 次のステージへ移行
   368                                  		;---------------------------------------
   369 000008C9 EB29                    		jmp		stage_6							; 次のステージへ移行
   370                                  
   371 000008CB 357468207374616765-     .s0		db	"5th stage...", 0x0A, 0x0D, 0
   371 000008D4 2E2E2E0A0D00       
   372 000008DA 204661696C75726520-     .e0		db	" Failure load kernel...", 0x0A, 0x0D, 0
   372 000008E3 6C6F6164206B65726E-
   372 000008EC 656C2E2E2E0A0D00   
   373                                  
   374                                  ;************************************************************************
   375                                  ;	ブート処理の第6ステージ
   376                                  ;************************************************************************
   377                                  stage_6:
   378                                  		;---------------------------------------
   379                                  		; 文字列を表示
   380                                  		;---------------------------------------
   381 000008F4 68[0D09]E8AAF783C4-     		cdecl	puts, .s0
   381 000008FC 02                 
   382                                  
   383                                  		;---------------------------------------
   384                                  		; ユーザーからの入力待ち
   385                                  		;---------------------------------------
   386                                  .10L:											; do
   387                                  												; {
   388 000008FD B400                    		mov		ah, 0x00						;   // キー入力待ち
   389 000008FF CD16                    		int		0x16							;   AL = BIOS(0x16, 0x00);
   390 00000901 3C20                    		cmp		al, ' '							;   ZF = AL == ' ';
   391 00000903 75F8                    		jne		.10L							; } while (!ZF);
   392                                  												; 
   393                                  
   394                                  		;---------------------------------------
   395                                  		; ビデオモードの設定
   396                                  		;---------------------------------------
   397 00000905 B81200                  		mov		ax, 0x0012						; VGA 640x480
   398 00000908 CD10                    		int		0x10							; BIOS(0x10, 0x12); // ビデオモードの設定
   399                                  
   400                                  		;---------------------------------------
   401                                  		; 次のステージへ移行
   402                                  		;---------------------------------------
   403 0000090A E9FB00                  		jmp		stage_7							; 次のステージへ移行
   404                                  
   405 0000090D 367468207374616765-     .s0		db	"6th stage...", 0x0A, 0x0D, 0x0A, 0x0D
   405 00000916 2E2E2E0A0D0A0D     
   406 0000091D 205B50757368205350-     		db	" [Push SPACE key to protect mode...]", 0x0A, 0x0D, 0
   406 00000926 414345206B65792074-
   406 0000092F 6F2070726F74656374-
   406 00000938 206D6F64652E2E2E5D-
   406 00000941 0A0D00             
   407                                  
   408                                  ;************************************************************************
   409                                  ;	ファイル読み込み
   410                                  ;************************************************************************
   411                                  read_file:
   412                                  		;---------------------------------------
   413                                  		; 【レジスタの保存】
   414                                  		;---------------------------------------
   415 00000944 50                      		push	ax
   416 00000945 53                      		push	bx
   417 00000946 51                      		push	cx
   418                                  
   419                                  		;---------------------------------------
   420                                  		; デフォルトの文字列を設定
   421                                  		;---------------------------------------
   422 00000947 6A1068[9209]680078-     		cdecl	memcpy, 0x7800, .s0, .s1 - .s0
   422 0000094F E896FC83C406       
   423                                  
   424                                  		;---------------------------------------
   425                                  		; 
   426                                  		; 
   427                                  		;          |____________| 
   428                                  		; 0000_7600|            | FAT用バッファ
   429                                  		;          =            = 
   430                                  		;          |____________| 
   431                                  		; 0000_7800|            | データ用バッファ
   432                                  		;          =            = 
   433                                  		;          |____________| 
   434                                  		; 0000_7A00|            | スタック
   435                                  		;          =            = 
   436                                  		;          |____________| 
   437                                  		; 0000_7C00|            | ブート
   438                                  		;          =            = 
   439                                  		;          |____________| 
   440                                  		;          |////////////| 
   441                                  		;          |            | 
   442                                  		;---------------------------------------
   443                                  
   444                                  		;---------------------------------------
   445                                  		; ルートディレクトリのセクタを読み込む
   446                                  		;---------------------------------------
   447 00000955 BB2002                  		mov		bx, 32 + 256 + 256				; BX = ディレクトリエントリの先頭セクタ
   448 00000958 B92000                  		mov		cx, (512 * 32) / 512			; CX = 512エントリ分のセクタ数
   449                                  .10L:											; do
   450                                  												; {
   451                                  		;---------------------------------------
   452                                  		; 1セクタ（16エントリ）分を読み込む
   453                                  		;---------------------------------------
   454 0000095B 6800766A015368-         		cdecl	read_lba, BOOT, bx, 1, 0x7600	;   AX = read_lba();
   454 00000962 [9C00]E84AFC83C408 
   455 0000096A 83F800                  		cmp		ax, 0							;   if (0 == AX)
   456 0000096D 741F                    		je		.10E							;     break;
   457                                  
   458                                  		;---------------------------------------
   459                                  		; ディレクトリエントリからファイル名を検索
   460                                  		;---------------------------------------
   461 0000096F E83000                  		cdecl	fat_find_file					;     AX = ファイルの検索
   462 00000972 83F800                  		cmp		ax, 0							;     if (AX)
   463 00000975 7414                    		je		.12E							;     {
   464                                  												;       
   465 00000977 053E02                  		add		ax, 32 + 256 + 256 + 32 - 2		;       // セクタ位置にオフセットを加算
   466 0000097A 6800786A015068-         		cdecl	read_lba, BOOT, ax, 1, 0x7800	;       read_lba() // ファイルの読み込み
   466 00000981 [9C00]E82BFC83C408 
   467                                  												;       
   468 00000989 EB03                    		jmp		.10E							;       break;
   469                                  .12E:											;     }
   470 0000098B 43                      		inc		bx								;     BX++; //次のセクタ（16エントリ）
   471 0000098C E2CD                    		loop	.10L							;   
   472                                  .10E:											; } while (--CX);
   473                                  
   474                                  		;---------------------------------------
   475                                  		; 【レジスタの復帰】
   476                                  		;---------------------------------------
   477 0000098E 59                      		pop		cx
   478 0000098F 5B                      		pop		bx
   479 00000990 58                      		pop		ax
   480                                  
   481 00000991 C3                      		ret
   482                                  
   483 00000992 46696C65206E6F7420-     .s0:	db		'File not found.', 0
   483 0000099B 666F756E642E00     
   484                                  .s1:
   485                                  
   486                                  ;************************************************************************
   487                                  ;	1セクタ分のディレクトリエントリからファイル名を検索
   488                                  ;************************************************************************
   489                                  fat_find_file:
   490                                  		;---------------------------------------
   491                                  		; 【レジスタの保存】
   492                                  		;---------------------------------------
   493 000009A2 53                      		push	bx
   494 000009A3 51                      		push	cx
   495 000009A4 56                      		push	si
   496                                  
   497                                  		;---------------------------------------
   498                                  		; ファイル名検索
   499                                  		;---------------------------------------
   500 000009A5 FC                      		cld										; // DFクリア（+方向）
   501 000009A6 BB0000                  		mov		bx, 0							; BX = ファイルの先頭セクタ; // 初期値
   502 000009A9 B91000                  		mov		cx, 512 / 32					; CX = エントリ数;           // 1セクタ/32バイト
   503 000009AC BE0076                  		mov		si, 0x7600						; SI = 読み込んだセクタのアドレス; 
   504                                  												; do
   505                                  .10L:											; {
   506 000009AF 80640B18                		and		[si + 11], byte 0x18			;   // ファイル属性のチェック
   507 000009B3 7516                    		jnz		.12E							;   if (ディレクトリ/ボリュームラベル以外)
   508                                  												;   {
   509 000009B5 6A0B68[D609]56E843-     		cdecl	memcmp, si, .s0, 8 + 3			;     AX = memcmp(ファイル名を比較);
   509 000009BD FC83C406           
   510 000009C1 83F800                  		cmp		ax, 0							;     if (同一ファイル名)
   511 000009C4 7505                    		jne		.12E							;     {
   512                                  												;       
   513 000009C6 8B5C1A                  		mov		bx, word [si + 0x1A]			;       BX = ファイルの先頭セクタ;
   514 000009C9 EB05                    		jmp		.10E							;       break;
   515                                  												;     }
   516                                  .12E:											;   }
   517 000009CB 83C620                  		add		si, 32							;   SI += 32; // 次のエントリ
   518 000009CE E2DF                    		loop	.10L							;   
   519                                  .10E:											; } while (--CX);
   520 000009D0 89D8                    		mov		ax, bx							; ret = 見つかったファイルの先頭セクタ;
   521                                  
   522                                  		;---------------------------------------
   523                                  		; 【レジスタの復帰】
   524                                  		;---------------------------------------
   525 000009D2 5E                      		pop		si
   526 000009D3 59                      		pop		cx
   527 000009D4 5B                      		pop		bx
   528                                  
   529 000009D5 C3                      		ret
   530                                  
   531 000009D6 5350454349414C2054-     .s0:	db		'SPECIAL TXT', 0
   531 000009DF 585400             
   532                                  
   533                                  ;************************************************************************
   534                                  ;	GLOBAL DESCRIPTOR TABLE
   535                                  ;	(セグメントディスクリプタの配列)
   536                                  ;************************************************************************
   537                                  ;
   538                                  ;   セグメントディスクリプタ
   539                                  ;
   540                                  ;        +--------+-----------------: Base (0xBBbbbbbb)
   541                                  ;        |   +----|--------+--------: Limit(0x000Lllll)
   542                                  ;        |   |    |        |
   543                                  ;       +--+--+--+--+--+--+--+--+
   544                                  ;       |B |FL|f |b       |l    |
   545                                  ;       +--+--+--+--+--+--+--+--+
   546                                  ;           |  |                         76543210
   547                                  ;           |  +--------------------: f:PDDSTTTA
   548                                  ;           |                          P:Exist
   549                                  ;           |                          D:DPL(特権)
   550                                  ;           |                          S:(DT)0=システムorゲート, 1=データセグメント
   551                                  ;           |                          T:Type
   552                                  ;           |                            000(0)=R/- DATA
   553                                  ;           |                            001(1)=R/W DATA
   554                                  ;           |                            010(2)=R/- STACK
   555                                  ;           |                            011(3)=R/W STACK
   556                                  ;           |                            100(4)=R/- CODE
   557                                  ;           |                            101(5)=R/W CODE
   558                                  ;           |                            110(6)=R/- CONFORM
   559                                  ;           |                            111(7)=R/W CONFORM
   560                                  ;           |                          A:Accessed
   561                                  ;           |                       
   562                                  ;           +-----------------------: F:GD0ALLLL
   563                                  ;                                      G:Limit Scale(0=1, 1=4K)
   564                                  ;                                      D:Data/BandDown(0=16, 1=32Bit セグメント)
   565                                  ;                                      A:any
   566                                  ;                                      L:Limit[19:16]
   567 000009E2 00<rept>                ALIGN 4, db 0
   568                                  ;					  B_ F L f T b_____ l___
   569 000009E4 0000000000000000        GDT:			dq	0x00_0_0_0_0_000000_0000	; NULL
   570 000009EC FFFF0000009ACF00        .cs:			dq	0x00_C_F_9_A_000000_FFFF	; CODE 4G
   571 000009F4 FFFF00000092CF00        .ds:			dq	0x00_C_F_9_2_000000_FFFF	; DATA 4G
   572                                  .gdt_end:
   573                                  
   574                                  ;===============================================
   575                                  ;	セレクタ
   576                                  ;===============================================
   577                                  SEL_CODE	equ	.cs - GDT						; コード用セレクタ
   578                                  SEL_DATA	equ	.ds - GDT						; データ用セレクタ
   579                                  
   580                                  ;===============================================
   581                                  ;	GDT
   582                                  ;===============================================
   583 000009FC 1700                    GDTR:	dw 		GDT.gdt_end - GDT - 1			; ディスクリプタテーブルのリミット
   584 000009FE [E4090000]              		dd 		GDT								; ディスクリプタテーブルのアドレス
   585                                  
   586                                  ;===============================================
   587                                  ;	IDT（疑似：割り込み禁止にする為）
   588                                  ;===============================================
   589 00000A02 0000                    IDTR:	dw 		0								; idt_limit
   590 00000A04 00000000                		dd 		0								; idt location
   591                                  
   592                                  ;************************************************************************
   593                                  ;	ブート処理の第7ステージ
   594                                  ;************************************************************************
   595                                  stage_7:
   596 00000A08 FA                      		cli										; // 割り込み禁止
   597                                  
   598                                  		;---------------------------------------
   599                                  		; GDTロード
   600                                  		;---------------------------------------
   601 00000A09 0F0116[FC09]            		lgdt	[GDTR]							; // グローバルディスクリプタテーブルをロード
   602 00000A0E 0F011E[020A]            		lidt	[IDTR]							; // 割り込みディスクリプタテーブルをロード
   603                                  
   604                                  		;---------------------------------------
   605                                  		; プロテクトモードへ移行
   606                                  		;---------------------------------------
   607 00000A13 0F20C0                  		mov		eax,cr0							; // PEビットをセット
   608 00000A16 83C801                  		or		ax, 1							; CR0 |= 1;
   609 00000A19 0F22C0                  		mov		cr0,eax							; 
   610                                  
   611 00000A1C EB00                    		jmp		$ + 2							; 先読みをクリア
   612                                  
   613                                  		;---------------------------------------
   614                                  		; セグメント間ジャンプ
   615                                  		;---------------------------------------
   616                                  [BITS 32]
   617 00000A1E 66                      		DB		0x66							; オペランドサイズオーバーライドプレフィックス
   618 00000A1F EA[260A0000]0800        		jmp		SEL_CODE:CODE_32
   619                                  
   620                                  ;************************************************************************
   621                                  ;	32ビットコード開始
   622                                  ;************************************************************************
   623                                  CODE_32:
   624                                  
   625                                  		;---------------------------------------
   626                                  		; セレクタを初期化
   627                                  		;---------------------------------------
   628 00000A26 66B81000                		mov		ax, SEL_DATA					;
   629 00000A2A 8ED8                    		mov		ds, ax							;
   630 00000A2C 8EC0                    		mov		es, ax							;
   631 00000A2E 8EE0                    		mov		fs, ax							;
   632 00000A30 8EE8                    		mov		gs, ax							;
   633 00000A32 8ED0                     		mov		ss, ax							;
   634                                  
   635                                  		;---------------------------------------
   636                                  		; カーネル部をコピー
   637                                  		;---------------------------------------
   638 00000A34 B900080000              		mov		ecx, (KERNEL_SIZE) / 4			; ECX = 4バイト単位でコピー;
   639 00000A39 BE009C0000              		mov		esi, BOOT_END					; ESI = 0x0000_9C00; // カーネル部
   640 00000A3E BF00101000              		mov		edi, KERNEL_LOAD				; EDI = 0x0010_1000; // 上位メモリ
   641 00000A43 FC                      		cld										; // DFクリア（+方向）
   642 00000A44 F3A5                    		rep movsd								; while (--ECX) *EDI++ = *ESI++;
   643                                  
   644                                  		;---------------------------------------
   645                                  		; カーネル処理に移行
   646                                  		;---------------------------------------
   647 00000A46 E9(00101000)            		jmp		KERNEL_LOAD						; カーネルの先頭にジャンプ
   648                                  
   649                                  ;************************************************************************
   650                                  ;	リアルモードへの移行プログラム
   651                                  ;************************************************************************
   652                                  TO_REAL_MODE:
   653                                  		;---------------------------------------
   654                                  		; 【スタックフレームの構築】
   655                                  		;---------------------------------------
   656                                  												; ------|--------
   657                                  												; EBP+ 8| col（列）
   658                                  												; EBP+12| row（行）
   659                                  												; EBP+16| color（色）
   660                                  												; EBP+20| *p（文字列へのアドレス）
   661                                  												; ---------------
   662 00000A4B 55                      		push	ebp								; EBP+ 4| EIP（戻り番地）
   663 00000A4C 89E5                    		mov		ebp, esp						; EBP+ 0| EBP（元の値）
   664                                  												; ---------------
   665                                  
   666                                  		;---------------------------------------
   667                                  		; 【レジスタの保存】
   668                                  		;---------------------------------------
   669 00000A4E 60                      		pusha
   670                                  
   671 00000A4F FA                      		cli										; // 割り込み禁止
   672                                  
   673                                  		;---------------------------------------
   674                                  		; 現在の設定値を保存
   675                                  		;---------------------------------------
   676 00000A50 0F20C0                  		mov		eax, cr0						; 
   677 00000A53 A3[350B0000]            		mov		[.cr0_saved], eax				; // CR0レジスタを保存
   678 00000A58 8925[390B0000]          		mov		[.esp_saved], esp				; // ESPレジスタを保存
   679 00000A5E 0F010D[2F0B0000]        		sidt	[.idtr_save]					; // IDTRを保存
   680 00000A65 0F011D[290B0000]        		lidt	[.idtr_real]					; // リアルモードの割り込み設定
   681                                  
   682                                  		;---------------------------------------
   683                                  		; 16ビットのプロテクトモードに移行
   684                                  		;---------------------------------------
   685 00000A6C EA[730A0000]1800        		jmp		0x0018:.bit16					; CS = 0x18（コードセグメントセレクタ）
   686                                  [BITS 16]
   687 00000A73 B82000                  .bit16:	mov		ax, 0x0020						; DS = 0x20（データセグメントセレクタ）
   688 00000A76 8ED8                    		mov		ds, ax							; 
   689 00000A78 8EC0                    		mov		es, ax							; 
   690 00000A7A 8ED0                    		mov		ss, ax							; 
   691                                  
   692                                  		;---------------------------------------
   693                                  		; リアルモードへ移行（ページング無効化）
   694                                  		;---------------------------------------
   695 00000A7C 0F20C0                  		mov		eax, cr0						; // PG/PEビットをクリア
   696 00000A7F 6625FEFFFF7F            		and		eax,  0x7FFF_FFFE				; CR0 &= ~(PG | PE);
   697 00000A85 0F22C0                  		mov		cr0, eax						; 
   698 00000A88 EB00                    		jmp		$ + 2							; 
   699                                  
   700                                  		;---------------------------------------
   701                                  		; セグメント設定（リアルモード）
   702                                  		;---------------------------------------
   703 00000A8A EA[8F0A]0000            		jmp		0:.real							; CS = 0x0000;
   704 00000A8F B80000                  .real:	mov		ax, 0x0000						; 
   705 00000A92 8ED8                    		mov		ds, ax							; DS = 0x0000;
   706 00000A94 8EC0                    		mov		es, ax							; ES = 0x0000;
   707 00000A96 8ED0                    		mov		ss, ax							; SS = 0x0000;
   708 00000A98 BC007C                  		mov		sp, 0x7C00						; SP = 0x7C00;
   709                                  
   710                                  		;---------------------------------------
   711                                  		; 割り込みマスクの設定（リアルモード用）
   712                                  		;---------------------------------------
   713                                  		outp	0x20, 0x11						; out(0x20, 0x11); // MASTER.ICW1 = 0x11;
   713 00000A9B B011                <1>  mov al, %2
   713 00000A9D E620                <1>  out %1, al
   714                                  		outp	0x21, 0x08						; out(0x21, 0x20); // MASTER.ICW2 = 0x08;
   714 00000A9F B008                <1>  mov al, %2
   714 00000AA1 E621                <1>  out %1, al
   715                                  		outp	0x21, 0x04						; out(0x21, 0x04); // MASTER.ICW3 = 0x04;
   715 00000AA3 B004                <1>  mov al, %2
   715 00000AA5 E621                <1>  out %1, al
   716                                  		outp	0x21, 0x01						; out(0x21, 0x01); // MASTER.ICW4 = 0x01;
   716 00000AA7 B001                <1>  mov al, %2
   716 00000AA9 E621                <1>  out %1, al
   717                                  
   718                                  		outp	0xA0, 0x11						; out(0xA0, 0x11); // SLAVE.ICW1  = 0x11;
   718 00000AAB B011                <1>  mov al, %2
   718 00000AAD E6A0                <1>  out %1, al
   719                                  		outp	0xA1, 0x10						; out(0xA1, 0x28); // SLAVE.ICW2  = 0x10;
   719 00000AAF B010                <1>  mov al, %2
   719 00000AB1 E6A1                <1>  out %1, al
   720                                  		outp	0xA1, 0x02						; out(0xA1, 0x02); // SLAVE.ICW3  = 0x02;
   720 00000AB3 B002                <1>  mov al, %2
   720 00000AB5 E6A1                <1>  out %1, al
   721                                  		outp	0xA1, 0x01						; out(0xA1, 0x01); // SLAVE.ICW4  = 0x01;
   721 00000AB7 B001                <1>  mov al, %2
   721 00000AB9 E6A1                <1>  out %1, al
   722                                  
   723                                  		outp	0x21, 0b_1011_1000				; // 割り込み有効：FDD/スレーブPIC/KBC/タイマー
   723 00000ABB B0B8                <1>  mov al, %2
   723 00000ABD E621                <1>  out %1, al
   724                                  		outp	0xA1, 0b_1011_1110				; // 割り込み有効：HDD/RTC
   724 00000ABF B0BE                <1>  mov al, %2
   724 00000AC1 E6A1                <1>  out %1, al
   725                                  
   726 00000AC3 FB                      		sti										; // 割り込み許可
   727                                  
   728                                  		;---------------------------------------
   729                                  		; ファイル読み込み
   730                                  		;---------------------------------------
   731 00000AC4 E87DFE                  		cdecl	read_file						; read_file();
   732                                  
   733                                  		;---------------------------------------
   734                                  		; 割り込みマスクの設定（プロテクトモード用）
   735                                  		;---------------------------------------
   736 00000AC7 FA                      		cli										; // 割り込み禁止
   737                                  
   738                                  		outp	0x20, 0x11						; // MASTER.ICW1 = 0x11;
   738 00000AC8 B011                <1>  mov al, %2
   738 00000ACA E620                <1>  out %1, al
   739                                  		outp	0x21, 0x20						; // MASTER.ICW2 = 0x20;
   739 00000ACC B020                <1>  mov al, %2
   739 00000ACE E621                <1>  out %1, al
   740                                  		outp	0x21, 0x04						; // MASTER.ICW3 = 0x04;
   740 00000AD0 B004                <1>  mov al, %2
   740 00000AD2 E621                <1>  out %1, al
   741                                  		outp	0x21, 0x01						; // MASTER.ICW4 = 0x01;
   741 00000AD4 B001                <1>  mov al, %2
   741 00000AD6 E621                <1>  out %1, al
   742                                  
   743                                  		outp	0xA0, 0x11						; // SLAVE.ICW1  = 0x11;
   743 00000AD8 B011                <1>  mov al, %2
   743 00000ADA E6A0                <1>  out %1, al
   744                                  		outp	0xA1, 0x28						; // SLAVE.ICW2  = 0x28;
   744 00000ADC B028                <1>  mov al, %2
   744 00000ADE E6A1                <1>  out %1, al
   745                                  		outp	0xA1, 0x02						; // SLAVE.ICW3  = 0x02;
   745 00000AE0 B002                <1>  mov al, %2
   745 00000AE2 E6A1                <1>  out %1, al
   746                                  		outp	0xA1, 0x01						; // SLAVE.ICW4  = 0x01;
   746 00000AE4 B001                <1>  mov al, %2
   746 00000AE6 E6A1                <1>  out %1, al
   747                                  
   748                                  		outp	0x21, 0b_1111_1000				; // 割り込み有効：スレーブPIC/KBC/タイマー
   748 00000AE8 B0F8                <1>  mov al, %2
   748 00000AEA E621                <1>  out %1, al
   749                                  		outp	0xA1, 0b_1111_1110				; // 割り込み有効：RTC
   749 00000AEC B0FE                <1>  mov al, %2
   749 00000AEE E6A1                <1>  out %1, al
   750                                  
   751                                  		;---------------------------------------
   752                                  		; 16ビットプロテクトモードに移行
   753                                  		;---------------------------------------
   754 00000AF0 0F20C0                  		mov		eax, cr0						; // PEビットをセット
   755 00000AF3 6683C801                		or		eax, 1							; CR0 |= PE;
   756 00000AF7 0F22C0                  		mov		cr0, eax						; 
   757                                  
   758 00000AFA EB00                    		jmp		$ + 2							; 先読みをクリア
   759                                  
   760                                  		;---------------------------------------
   761                                  		; 32ビットプロテクトモードに移行
   762                                  		;---------------------------------------
   763 00000AFC 66                      		DB		0x66							; 32bit オーバーライド
   764                                  [BITS 32]
   765 00000AFD EA[040B0000]0800        		jmp		0x0008:.bit32					; CS = 32ビットCS;
   766 00000B04 66B81000                .bit32:	mov		ax, 0x0010						; DS = 32ビットDS;
   767 00000B08 8ED8                    		mov		ds, ax							;
   768 00000B0A 8EC0                    		mov		es, ax							;
   769 00000B0C 8ED0                    		mov		ss, ax							;
   770                                  
   771                                  		;---------------------------------------
   772                                  		; レジスタ設定の復帰
   773                                  		;---------------------------------------
   774 00000B0E 8B25[390B0000]          		mov		esp, [.esp_saved]				; // ESPレジスタを復帰
   775 00000B14 A1[350B0000]            		mov		eax, [.cr0_saved]				; // CR0レジスタを復帰
   776 00000B19 0F22C0                  		mov		cr0, eax						; 
   777 00000B1C 0F011D[2F0B0000]        		lidt	[.idtr_save]					; // IDTRを復帰
   778                                  
   779 00000B23 FB                      		sti 									; // 割り込み許可
   780                                  
   781                                  		;---------------------------------------
   782                                  		; 【レジスタの復帰】
   783                                  		;---------------------------------------
   784 00000B24 61                      		popa
   785                                  
   786                                  		;---------------------------------------
   787                                  		; 【スタックフレームの破棄】
   788                                  		;---------------------------------------
   789 00000B25 89EC                    		mov		esp, ebp
   790 00000B27 5D                      		pop		ebp
   791                                  
   792 00000B28 C3                      		ret
   793                                  
   794                                  .idtr_real:
   795 00000B29 FF03                    		dw 		0x3FF							; idt_limit
   796 00000B2B 00000000                		dd 		0								; idt location
   797                                  
   798                                  .idtr_save:
   799 00000B2F 0000                    		dw 		0								; リミット
   800 00000B31 00000000                		dd 		0								; ベース
   801                                  
   802                                  .cr0_saved:
   803 00000B35 00000000                		dd		0
   804                                  
   805                                  .esp_saved:
   806 00000B39 00000000                		dd		0
   807                                  
   808                                  ;************************************************************************
   809                                  ;	パディング
   810                                  ;************************************************************************
   811 00000B3D 00<rept>                		times BOOT_SIZE - ($ - $$) - 16	db	0	; パディング
   812                                  
   813 00001FF0 [4B0A0000]              		dd 		TO_REAL_MODE					; リアルモード移行プログラム
   814                                  
   815                                  ;************************************************************************
   816                                  ;	パディング
   817                                  ;************************************************************************
   818 00001FF4 00<rept>                		times BOOT_SIZE - ($ - $$)		db	0	; パディング
   819                                  
